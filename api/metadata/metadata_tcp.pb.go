// Code generated by protoc-gen-go-tcp. DO NOT EDIT.
// versions:
// - protoc-gen-go-tcp v2.8.6
// - protoc            v3.6.1
// source: metadata/metadata.proto

package metadata

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
import (
	"context"

	"github.com/yola1107/kratos/v2/library/work"
	"github.com/yola1107/kratos/v2/transport/tcp"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
)

// MetadataTCPServer is the server API for Metadata service.
type MetadataTCPServer interface {
	GetTCPLoop() work.ITaskLoop
	SetCometChan(cl *tcp.ChanList, cs *tcp.Server)
	ListServices(context.Context, *ListServicesRequest) (*ListServicesReply, error)
	GetServiceDesc(context.Context, *GetServiceDescRequest) (*GetServiceDescReply, error)
}

func RegisterMetadataTCPServer(s *tcp.Server, srv MetadataTCPServer) {
	chanList := s.RegisterService(&Metadata_TCP_ServiceDesc, srv)
	srv.SetCometChan(chanList, s)
}

func _Metadata_ListServices_TCP_Handler(srv interface{}, ctx context.Context, data []byte, interceptor tcp.UnaryServerInterceptor) ([]byte, error) {
	in := new(ListServicesRequest)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	doFunc := func(ctx context.Context, req *ListServicesRequest) ([]byte, error) {
		doRequest := func() ([]byte, error) {
			resp, err := srv.(MetadataTCPServer).ListServices(ctx, req)
			if err != nil || resp == nil {
				return nil, err
			}
			return proto.Marshal(resp)
		}
		if loop := srv.(MetadataTCPServer).GetTCPLoop(); loop != nil {
			return loop.PostAndWaitCtx(ctx, doRequest)
		}
		return doRequest()
	}
	if interceptor == nil {
		return doFunc(ctx, in)
	}
	info := &tcp.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kratos.api.Metadata/ListServices",
	}
	interceptorHandler := func(ctx context.Context, req interface{}) ([]byte, error) {
		r, ok := req.(*ListServicesRequest)
		if !ok {
			return nil, status.Errorf(codes.InvalidArgument, "Invalid Request Argument, expect: *ListServicesRequest, Not: %T", req)
		}
		return doFunc(ctx, r)
	}
	return interceptor(ctx, in, info, interceptorHandler)
}

func _Metadata_GetServiceDesc_TCP_Handler(srv interface{}, ctx context.Context, data []byte, interceptor tcp.UnaryServerInterceptor) ([]byte, error) {
	in := new(GetServiceDescRequest)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	doFunc := func(ctx context.Context, req *GetServiceDescRequest) ([]byte, error) {
		doRequest := func() ([]byte, error) {
			resp, err := srv.(MetadataTCPServer).GetServiceDesc(ctx, req)
			if err != nil || resp == nil {
				return nil, err
			}
			return proto.Marshal(resp)
		}
		if loop := srv.(MetadataTCPServer).GetTCPLoop(); loop != nil {
			return loop.PostAndWaitCtx(ctx, doRequest)
		}
		return doRequest()
	}
	if interceptor == nil {
		return doFunc(ctx, in)
	}
	info := &tcp.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kratos.api.Metadata/GetServiceDesc",
	}
	interceptorHandler := func(ctx context.Context, req interface{}) ([]byte, error) {
		r, ok := req.(*GetServiceDescRequest)
		if !ok {
			return nil, status.Errorf(codes.InvalidArgument, "Invalid Request Argument, expect: *GetServiceDescRequest, Not: %T", req)
		}
		return doFunc(ctx, r)
	}
	return interceptor(ctx, in, info, interceptorHandler)
}

var Metadata_TCP_ServiceDesc = tcp.ServiceDesc{
	ServiceName: "kratos.api.Metadata",
	HandlerType: (*MetadataTCPServer)(nil),
	Methods: []tcp.MethodDesc{
		{
			MethodName: "ListServices",
			Handler:    _Metadata_ListServices_TCP_Handler,
			Ops:        1001,
		},
		{
			MethodName: "GetServiceDesc",
			Handler:    _Metadata_GetServiceDesc_TCP_Handler,
			Ops:        1003,
		},
	},
}
