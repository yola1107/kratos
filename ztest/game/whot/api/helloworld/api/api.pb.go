// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: helloworld/api/api.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GameCommand int32

const (
	GameCommand_NONE GameCommand = 0
	// push 消息（1~19）
	GameCommand_MsRoomInfo         GameCommand = 1 // 初始化房间
	GameCommand_MsUserEnterRoom    GameCommand = 2 // 玩家进入房间
	GameCommand_MsFaPush           GameCommand = 3 // 发牌结果推送
	GameCommand_MsActivePush       GameCommand = 4 // 通知操作玩家
	GameCommand_MsResultPush       GameCommand = 5 // 结算
	GameCommand_MsMarketResultPush GameCommand = 6 // 14牌：摸牌结果推送
	// 客户端 -> 服务器（20~39）
	GameCommand_MsC2SBetScore   GameCommand = 20 // 玩家下注  todo: 感觉可直接去掉
	GameCommand_MsC2SLastCard   GameCommand = 21 // 最后一张宣告
	GameCommand_MsC2SUserAction GameCommand = 22 // 玩家操作请求
	GameCommand_MsC2SLeavRoom   GameCommand = 23 // 玩家离开房间
	// 服务器 -> 客户端（120~139）
	GameCommand_MsS2CBetScore   GameCommand = 120
	GameCommand_MsS2CLastCard   GameCommand = 121
	GameCommand_MsS2CUserAction GameCommand = 122
	GameCommand_MsS2CLeavRoom   GameCommand = 123
)

// Enum value maps for GameCommand.
var (
	GameCommand_name = map[int32]string{
		0:   "NONE",
		1:   "MsRoomInfo",
		2:   "MsUserEnterRoom",
		3:   "MsFaPush",
		4:   "MsActivePush",
		5:   "MsResultPush",
		6:   "MsMarketResultPush",
		20:  "MsC2SBetScore",
		21:  "MsC2SLastCard",
		22:  "MsC2SUserAction",
		23:  "MsC2SLeavRoom",
		120: "MsS2CBetScore",
		121: "MsS2CLastCard",
		122: "MsS2CUserAction",
		123: "MsS2CLeavRoom",
	}
	GameCommand_value = map[string]int32{
		"NONE":               0,
		"MsRoomInfo":         1,
		"MsUserEnterRoom":    2,
		"MsFaPush":           3,
		"MsActivePush":       4,
		"MsResultPush":       5,
		"MsMarketResultPush": 6,
		"MsC2SBetScore":      20,
		"MsC2SLastCard":      21,
		"MsC2SUserAction":    22,
		"MsC2SLeavRoom":      23,
		"MsS2CBetScore":      120,
		"MsS2CLastCard":      121,
		"MsS2CUserAction":    122,
		"MsS2CLeavRoom":      123,
	}
)

func (x GameCommand) Enum() *GameCommand {
	p := new(GameCommand)
	*p = x
	return p
}

func (x GameCommand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameCommand) Descriptor() protoreflect.EnumDescriptor {
	return file_helloworld_api_api_proto_enumTypes[0].Descriptor()
}

func (GameCommand) Type() protoreflect.EnumType {
	return &file_helloworld_api_api_proto_enumTypes[0]
}

func (x GameCommand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameCommand.Descriptor instead.
func (GameCommand) EnumDescriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{0}
}

// 玩家动作类型
type ACTION int32

const (
	ACTION_ACTION_NULL  ACTION = 0
	ACTION_PLAY_CARD    ACTION = 1 //出牌
	ACTION_DRAW_CARD    ACTION = 2 //摸牌
	ACTION_DECLARE_SUIT ACTION = 3 //声明花色
	ACTION_SKIP_TURN    ACTION = 4 //跳过回合
)

// Enum value maps for ACTION.
var (
	ACTION_name = map[int32]string{
		0: "ACTION_NULL",
		1: "PLAY_CARD",
		2: "DRAW_CARD",
		3: "DECLARE_SUIT",
		4: "SKIP_TURN",
	}
	ACTION_value = map[string]int32{
		"ACTION_NULL":  0,
		"PLAY_CARD":    1,
		"DRAW_CARD":    2,
		"DECLARE_SUIT": 3,
		"SKIP_TURN":    4,
	}
)

func (x ACTION) Enum() *ACTION {
	p := new(ACTION)
	*p = x
	return p
}

func (x ACTION) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACTION) Descriptor() protoreflect.EnumDescriptor {
	return file_helloworld_api_api_proto_enumTypes[1].Descriptor()
}

func (ACTION) Type() protoreflect.EnumType {
	return &file_helloworld_api_api_proto_enumTypes[1]
}

func (x ACTION) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACTION.Descriptor instead.
func (ACTION) EnumDescriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{1}
}

// 花色定义
type SUIT_TYPE int32

const (
	SUIT_TYPE_SUIT_NONE     SUIT_TYPE = 0
	SUIT_TYPE_SUIT_CIRCLE   SUIT_TYPE = 1
	SUIT_TYPE_SUIT_CROSS    SUIT_TYPE = 2
	SUIT_TYPE_SUIT_TRIANGLE SUIT_TYPE = 3
	SUIT_TYPE_SUIT_STAR     SUIT_TYPE = 4
	SUIT_TYPE_SUIT_WHOT     SUIT_TYPE = 5
)

// Enum value maps for SUIT_TYPE.
var (
	SUIT_TYPE_name = map[int32]string{
		0: "SUIT_NONE",
		1: "SUIT_CIRCLE",
		2: "SUIT_CROSS",
		3: "SUIT_TRIANGLE",
		4: "SUIT_STAR",
		5: "SUIT_WHOT",
	}
	SUIT_TYPE_value = map[string]int32{
		"SUIT_NONE":     0,
		"SUIT_CIRCLE":   1,
		"SUIT_CROSS":    2,
		"SUIT_TRIANGLE": 3,
		"SUIT_STAR":     4,
		"SUIT_WHOT":     5,
	}
)

func (x SUIT_TYPE) Enum() *SUIT_TYPE {
	p := new(SUIT_TYPE)
	*p = x
	return p
}

func (x SUIT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SUIT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_helloworld_api_api_proto_enumTypes[2].Descriptor()
}

func (SUIT_TYPE) Type() protoreflect.EnumType {
	return &file_helloworld_api_api_proto_enumTypes[2]
}

func (x SUIT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SUIT_TYPE.Descriptor instead.
func (SUIT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{2}
}

// 牌的效果类型
type CARD_EFFECT int32

const (
	CARD_EFFECT_EFFECT_NORMAL      CARD_EFFECT = 0
	CARD_EFFECT_EFFECT_EXTRA_TURN  CARD_EFFECT = 1
	CARD_EFFECT_EFFECT_DRAW_TWO    CARD_EFFECT = 2
	CARD_EFFECT_EFFECT_SKIP_NEXT   CARD_EFFECT = 3
	CARD_EFFECT_EFFECT_MARKET_PICK CARD_EFFECT = 4
	CARD_EFFECT_EFFECT_WILD_CARD   CARD_EFFECT = 5
)

// Enum value maps for CARD_EFFECT.
var (
	CARD_EFFECT_name = map[int32]string{
		0: "EFFECT_NORMAL",
		1: "EFFECT_EXTRA_TURN",
		2: "EFFECT_DRAW_TWO",
		3: "EFFECT_SKIP_NEXT",
		4: "EFFECT_MARKET_PICK",
		5: "EFFECT_WILD_CARD",
	}
	CARD_EFFECT_value = map[string]int32{
		"EFFECT_NORMAL":      0,
		"EFFECT_EXTRA_TURN":  1,
		"EFFECT_DRAW_TWO":    2,
		"EFFECT_SKIP_NEXT":   3,
		"EFFECT_MARKET_PICK": 4,
		"EFFECT_WILD_CARD":   5,
	}
)

func (x CARD_EFFECT) Enum() *CARD_EFFECT {
	p := new(CARD_EFFECT)
	*p = x
	return p
}

func (x CARD_EFFECT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CARD_EFFECT) Descriptor() protoreflect.EnumDescriptor {
	return file_helloworld_api_api_proto_enumTypes[3].Descriptor()
}

func (CARD_EFFECT) Type() protoreflect.EnumType {
	return &file_helloworld_api_api_proto_enumTypes[3]
}

func (x CARD_EFFECT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CARD_EFFECT.Descriptor instead.
func (CARD_EFFECT) EnumDescriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{3}
}

// 场景消息
type RoomInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerInfo    []*UserEnterRoom       `protobuf:"bytes,1,rep,name=playerInfo,proto3" json:"playerInfo,omitempty"`                       //玩家信息
	Banner        int64                  `protobuf:"varint,2,opt,name=banner,proto3" json:"banner,omitempty"`                              //庄家
	CurUid        int64                  `protobuf:"varint,3,opt,name=curUid,proto3" json:"curUid,omitempty"`                              //操作当前玩家
	Ticker        int64                  `protobuf:"varint,4,opt,name=ticker,proto3" json:"ticker,omitempty"`                              //发言倒计时时长
	BaseScore     float64                `protobuf:"fixed64,5,opt,name=baseScore,proto3" json:"baseScore,omitempty"`                       //入场底分
	CurrCard      int32                  `protobuf:"varint,6,opt,name=currCard,proto3" json:"currCard,omitempty"`                          //当前牌（花色*100 + 牌值, 如whot牌=620）
	DeclareSuit   SUIT_TYPE              `protobuf:"varint,7,opt,name=declareSuit,proto3,enum=api.SUIT_TYPE" json:"declareSuit,omitempty"` //是否有玩家正在申明的花色 (玩家打出whot牌后当前可继续操作)
	LeftNum       int32                  `protobuf:"varint,8,opt,name=leftNum,proto3" json:"leftNum,omitempty"`                            //剩余牌堆牌数
	Pending       *Pending               `protobuf:"bytes,9,opt,name=pending,proto3" json:"pending,omitempty"`                             //当前待处理动作响应（如等待反击,等待声明花色）
	GameState     int32                  `protobuf:"varint,15,opt,name=gameState,proto3" json:"gameState,omitempty"`                       //房间游戏阶段
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoomInfo) Reset() {
	*x = RoomInfo{}
	mi := &file_helloworld_api_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomInfo) ProtoMessage() {}

func (x *RoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomInfo.ProtoReflect.Descriptor instead.
func (*RoomInfo) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{0}
}

func (x *RoomInfo) GetPlayerInfo() []*UserEnterRoom {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

func (x *RoomInfo) GetBanner() int64 {
	if x != nil {
		return x.Banner
	}
	return 0
}

func (x *RoomInfo) GetCurUid() int64 {
	if x != nil {
		return x.CurUid
	}
	return 0
}

func (x *RoomInfo) GetTicker() int64 {
	if x != nil {
		return x.Ticker
	}
	return 0
}

func (x *RoomInfo) GetBaseScore() float64 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *RoomInfo) GetCurrCard() int32 {
	if x != nil {
		return x.CurrCard
	}
	return 0
}

func (x *RoomInfo) GetDeclareSuit() SUIT_TYPE {
	if x != nil {
		return x.DeclareSuit
	}
	return SUIT_TYPE_SUIT_NONE
}

func (x *RoomInfo) GetLeftNum() int32 {
	if x != nil {
		return x.LeftNum
	}
	return 0
}

func (x *RoomInfo) GetPending() *Pending {
	if x != nil {
		return x.Pending
	}
	return nil
}

func (x *RoomInfo) GetGameState() int32 {
	if x != nil {
		return x.GameState
	}
	return 0
}

// 玩家进房
type UserEnterRoom struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`               //玩家uid
	Head          int32                  `protobuf:"varint,2,opt,name=head,proto3" json:"head,omitempty"`             //头像id
	UserName      string                 `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`      //暂时先随便传
	Seat          int32                  `protobuf:"varint,4,opt,name=seat,proto3" json:"seat,omitempty"`             //座位号
	Score         int64                  `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`           //玩家金币
	CanOp         []*ActionOption        `protobuf:"bytes,7,rep,name=canOp,proto3" json:"canOp,omitempty"`            //当前玩家允许的操作
	GameState     int32                  `protobuf:"varint,8,opt,name=gameState,proto3" json:"gameState,omitempty"`   //玩家游戏状态
	ResultInfo    *ResultPush            `protobuf:"bytes,11,opt,name=resultInfo,proto3" json:"resultInfo,omitempty"` //结算信息（当RoomInfo中的gameState为游戏结束阶段时处理该字段）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserEnterRoom) Reset() {
	*x = UserEnterRoom{}
	mi := &file_helloworld_api_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserEnterRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEnterRoom) ProtoMessage() {}

func (x *UserEnterRoom) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEnterRoom.ProtoReflect.Descriptor instead.
func (*UserEnterRoom) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{1}
}

func (x *UserEnterRoom) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserEnterRoom) GetHead() int32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *UserEnterRoom) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserEnterRoom) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *UserEnterRoom) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *UserEnterRoom) GetCanOp() []*ActionOption {
	if x != nil {
		return x.CanOp
	}
	return nil
}

func (x *UserEnterRoom) GetGameState() int32 {
	if x != nil {
		return x.GameState
	}
	return 0
}

func (x *UserEnterRoom) GetResultInfo() *ResultPush {
	if x != nil {
		return x.ResultInfo
	}
	return nil
}

// 发牌
type StageFa struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BankerUid     int64                  `protobuf:"varint,1,opt,name=bankerUid,proto3" json:"bankerUid,omitempty"` //庄家uid
	FirstCard     int32                  `protobuf:"varint,2,opt,name=firstCard,proto3" json:"firstCard,omitempty"` //第一张弃牌
	LeftNum       int32                  `protobuf:"varint,3,opt,name=leftNum,proto3" json:"leftNum,omitempty"`     //剩余牌数
	UserBet       []*FaBet               `protobuf:"bytes,4,rep,name=userBet,proto3" json:"userBet,omitempty"`      //手牌信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StageFa) Reset() {
	*x = StageFa{}
	mi := &file_helloworld_api_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StageFa) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StageFa) ProtoMessage() {}

func (x *StageFa) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StageFa.ProtoReflect.Descriptor instead.
func (*StageFa) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{2}
}

func (x *StageFa) GetBankerUid() int64 {
	if x != nil {
		return x.BankerUid
	}
	return 0
}

func (x *StageFa) GetFirstCard() int32 {
	if x != nil {
		return x.FirstCard
	}
	return 0
}

func (x *StageFa) GetLeftNum() int32 {
	if x != nil {
		return x.LeftNum
	}
	return 0
}

func (x *StageFa) GetUserBet() []*FaBet {
	if x != nil {
		return x.UserBet
	}
	return nil
}

type FaBet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`            //玩家uid
	Betscore      int64                  `protobuf:"varint,2,opt,name=betscore,proto3" json:"betscore,omitempty"`  //玩家下注金币
	Score         int64                  `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`        //玩家身上金币
	HandsNum      int32                  `protobuf:"varint,4,opt,name=handsNum,proto3" json:"handsNum,omitempty"`  //手牌张数
	Cards         []int32                `protobuf:"varint,5,rep,packed,name=cards,proto3" json:"cards,omitempty"` //自己手牌 (只发给自己)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FaBet) Reset() {
	*x = FaBet{}
	mi := &file_helloworld_api_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FaBet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaBet) ProtoMessage() {}

func (x *FaBet) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaBet.ProtoReflect.Descriptor instead.
func (*FaBet) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{3}
}

func (x *FaBet) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *FaBet) GetBetscore() int64 {
	if x != nil {
		return x.Betscore
	}
	return 0
}

func (x *FaBet) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *FaBet) GetHandsNum() int32 {
	if x != nil {
		return x.HandsNum
	}
	return 0
}

func (x *FaBet) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

// 通知玩家操作
type ActivePush struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Time          int64                  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`                                  //时间 ms
	Uid           int64                  `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`                                    //玩家uid
	CurrCard      int32                  `protobuf:"varint,3,opt,name=currCard,proto3" json:"currCard,omitempty"`                          //当前牌
	DeclareSuit   SUIT_TYPE              `protobuf:"varint,4,opt,name=declareSuit,proto3,enum=api.SUIT_TYPE" json:"declareSuit,omitempty"` //是否有玩家正在申明的花色
	CanOp         []*ActionOption        `protobuf:"bytes,5,rep,name=canOp,proto3" json:"canOp,omitempty"`                                 //当前玩家允许的操作
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivePush) Reset() {
	*x = ActivePush{}
	mi := &file_helloworld_api_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivePush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivePush) ProtoMessage() {}

func (x *ActivePush) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivePush.ProtoReflect.Descriptor instead.
func (*ActivePush) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{4}
}

func (x *ActivePush) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ActivePush) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ActivePush) GetCurrCard() int32 {
	if x != nil {
		return x.CurrCard
	}
	return 0
}

func (x *ActivePush) GetDeclareSuit() SUIT_TYPE {
	if x != nil {
		return x.DeclareSuit
	}
	return SUIT_TYPE_SUIT_NONE
}

func (x *ActivePush) GetCanOp() []*ActionOption {
	if x != nil {
		return x.CanOp
	}
	return nil
}

// 当前待处理动作响应
type Pending struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Effect        CARD_EFFECT            `protobuf:"varint,1,opt,name=effect,proto3,enum=api.CARD_EFFECT" json:"effect,omitempty"` //触发的牌面效果（如 +2、跳过、选花色）
	Initiator     int64                  `protobuf:"varint,2,opt,name=initiator,proto3" json:"initiator,omitempty"`                //发起者（首次触发该特效的玩家）
	Target        int64                  `protobuf:"varint,3,opt,name=target,proto3" json:"target,omitempty"`                      //当前目标玩家（效果指向）
	Quantity      int32                  `protobuf:"varint,4,opt,name=quantity,proto3" json:"quantity,omitempty"`                  //作用数量（如 +2 的连锁数量）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pending) Reset() {
	*x = Pending{}
	mi := &file_helloworld_api_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pending) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pending) ProtoMessage() {}

func (x *Pending) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pending.ProtoReflect.Descriptor instead.
func (*Pending) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{5}
}

func (x *Pending) GetEffect() CARD_EFFECT {
	if x != nil {
		return x.Effect
	}
	return CARD_EFFECT_EFFECT_NORMAL
}

func (x *Pending) GetInitiator() int64 {
	if x != nil {
		return x.Initiator
	}
	return 0
}

func (x *Pending) GetTarget() int64 {
	if x != nil {
		return x.Target
	}
	return 0
}

func (x *Pending) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

// 单个动作信息
type ActionOption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Action        ACTION                 `protobuf:"varint,1,opt,name=action,proto3,enum=api.ACTION" json:"action,omitempty"`         //可执行的动作类型（如 出牌、摸牌、声明花色等）
	Cards         []int32                `protobuf:"varint,2,rep,packed,name=cards,proto3" json:"cards,omitempty"`                    //出牌可选
	DrawCount     int32                  `protobuf:"varint,3,opt,name=drawCount,proto3" json:"drawCount,omitempty"`                   //需摸牌数量
	Suits         []SUIT_TYPE            `protobuf:"varint,4,rep,packed,name=suits,proto3,enum=api.SUIT_TYPE" json:"suits,omitempty"` //选花可选
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionOption) Reset() {
	*x = ActionOption{}
	mi := &file_helloworld_api_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionOption) ProtoMessage() {}

func (x *ActionOption) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionOption.ProtoReflect.Descriptor instead.
func (*ActionOption) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{6}
}

func (x *ActionOption) GetAction() ACTION {
	if x != nil {
		return x.Action
	}
	return ACTION_ACTION_NULL
}

func (x *ActionOption) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *ActionOption) GetDrawCount() int32 {
	if x != nil {
		return x.DrawCount
	}
	return 0
}

func (x *ActionOption) GetSuits() []SUIT_TYPE {
	if x != nil {
		return x.Suits
	}
	return nil
}

// 结算
type ResultPush struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WinUid        int64                  `protobuf:"varint,1,opt,name=winUid,proto3" json:"winUid,omitempty"`
	WinScore      int64                  `protobuf:"varint,2,opt,name=winScore,proto3" json:"winScore,omitempty"`
	FinishType    int32                  `protobuf:"varint,3,opt,name=finishType,proto3" json:"finishType,omitempty"` //结束类型 1:玩家出完手牌 2:剩余牌堆为空
	PlayerInfo    []*PlayerResult        `protobuf:"bytes,4,rep,name=PlayerInfo,proto3" json:"PlayerInfo,omitempty"`  //玩家输赢情况
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResultPush) Reset() {
	*x = ResultPush{}
	mi := &file_helloworld_api_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResultPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultPush) ProtoMessage() {}

func (x *ResultPush) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultPush.ProtoReflect.Descriptor instead.
func (*ResultPush) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{7}
}

func (x *ResultPush) GetWinUid() int64 {
	if x != nil {
		return x.WinUid
	}
	return 0
}

func (x *ResultPush) GetWinScore() int64 {
	if x != nil {
		return x.WinScore
	}
	return 0
}

func (x *ResultPush) GetFinishType() int32 {
	if x != nil {
		return x.FinishType
	}
	return 0
}

func (x *ResultPush) GetPlayerInfo() []*PlayerResult {
	if x != nil {
		return x.PlayerInfo
	}
	return nil
}

type PlayerResult struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Uid            int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`                       //玩家uid
	IsWinner       bool                   `protobuf:"varint,2,opt,name=isWinner,proto3" json:"isWinner,omitempty"`             //是否获胜
	WinScore       float64                `protobuf:"fixed64,3,opt,name=winScore,proto3" json:"winScore,omitempty"`            //赢分
	HandCards      []int32                `protobuf:"varint,4,rep,packed,name=handCards,proto3" json:"handCards,omitempty"`    //剩余手牌
	HandCardsScore int32                  `protobuf:"varint,5,opt,name=handCardsScore,proto3" json:"handCardsScore,omitempty"` //剩余手牌得分
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PlayerResult) Reset() {
	*x = PlayerResult{}
	mi := &file_helloworld_api_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerResult) ProtoMessage() {}

func (x *PlayerResult) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerResult.ProtoReflect.Descriptor instead.
func (*PlayerResult) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{8}
}

func (x *PlayerResult) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *PlayerResult) GetIsWinner() bool {
	if x != nil {
		return x.IsWinner
	}
	return false
}

func (x *PlayerResult) GetWinScore() float64 {
	if x != nil {
		return x.WinScore
	}
	return 0
}

func (x *PlayerResult) GetHandCards() []int32 {
	if x != nil {
		return x.HandCards
	}
	return nil
}

func (x *PlayerResult) GetHandCardsScore() int32 {
	if x != nil {
		return x.HandCardsScore
	}
	return 0
}

// 14牌：摸牌结果推送 (所有其他玩家各抽一张)
type MarketResultPush struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`            //用户ID
	ChairID       int32                  `protobuf:"varint,2,opt,name=chairID,proto3" json:"chairID,omitempty"`    //椅子号
	DrawNum       int32                  `protobuf:"varint,3,opt,name=drawNum,proto3" json:"drawNum,omitempty"`    //摸牌数量
	HandsNum      int32                  `protobuf:"varint,4,opt,name=handsNum,proto3" json:"handsNum,omitempty"`  //手牌张数
	Draw          []int32                `protobuf:"varint,5,rep,packed,name=draw,proto3" json:"draw,omitempty"`   //摸到的牌
	Cards         []int32                `protobuf:"varint,6,rep,packed,name=cards,proto3" json:"cards,omitempty"` //最后手牌
	LeftNum       int32                  `protobuf:"varint,7,opt,name=leftNum,proto3" json:"leftNum,omitempty"`    //牌堆剩余牌数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarketResultPush) Reset() {
	*x = MarketResultPush{}
	mi := &file_helloworld_api_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketResultPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketResultPush) ProtoMessage() {}

func (x *MarketResultPush) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketResultPush.ProtoReflect.Descriptor instead.
func (*MarketResultPush) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{9}
}

func (x *MarketResultPush) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *MarketResultPush) GetChairID() int32 {
	if x != nil {
		return x.ChairID
	}
	return 0
}

func (x *MarketResultPush) GetDrawNum() int32 {
	if x != nil {
		return x.DrawNum
	}
	return 0
}

func (x *MarketResultPush) GetHandsNum() int32 {
	if x != nil {
		return x.HandsNum
	}
	return 0
}

func (x *MarketResultPush) GetDraw() []int32 {
	if x != nil {
		return x.Draw
	}
	return nil
}

func (x *MarketResultPush) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *MarketResultPush) GetLeftNum() int32 {
	if x != nil {
		return x.LeftNum
	}
	return 0
}

// 最后一张宣告
type LastCardReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LastCardReq) Reset() {
	*x = LastCardReq{}
	mi := &file_helloworld_api_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LastCardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastCardReq) ProtoMessage() {}

func (x *LastCardReq) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastCardReq.ProtoReflect.Descriptor instead.
func (*LastCardReq) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{10}
}

// 同步所有人最后一张宣告信息
type LastCardRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Uid           int64                  `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LastCardRsp) Reset() {
	*x = LastCardRsp{}
	mi := &file_helloworld_api_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LastCardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastCardRsp) ProtoMessage() {}

func (x *LastCardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastCardRsp.ProtoReflect.Descriptor instead.
func (*LastCardRsp) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{11}
}

func (x *LastCardRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *LastCardRsp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

// 玩家操作请求
type UserActionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Action        ACTION                 `protobuf:"varint,2,opt,name=action,proto3,enum=api.ACTION" json:"action,omitempty"`              // 请求的动作类型, 摸牌,出牌,万能牌声明花色
	OutCard       int32                  `protobuf:"varint,3,opt,name=outCard,proto3" json:"outCard,omitempty"`                            // 请求要打出的牌, 卡牌ID（花色*100 + 牌值）
	DeclareSuit   SUIT_TYPE              `protobuf:"varint,4,opt,name=declareSuit,proto3,enum=api.SUIT_TYPE" json:"declareSuit,omitempty"` //请求万能牌声明花色
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserActionReq) Reset() {
	*x = UserActionReq{}
	mi := &file_helloworld_api_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserActionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserActionReq) ProtoMessage() {}

func (x *UserActionReq) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserActionReq.ProtoReflect.Descriptor instead.
func (*UserActionReq) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{12}
}

func (x *UserActionReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserActionReq) GetAction() ACTION {
	if x != nil {
		return x.Action
	}
	return ACTION_ACTION_NULL
}

func (x *UserActionReq) GetOutCard() int32 {
	if x != nil {
		return x.OutCard
	}
	return 0
}

func (x *UserActionReq) GetDeclareSuit() SUIT_TYPE {
	if x != nil {
		return x.DeclareSuit
	}
	return SUIT_TYPE_SUIT_NONE
}

// 同步所有人玩家操作结果
type UserActionRsp struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Code    int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                //错误信息
	Uid     int64                  `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`                       //用户ID
	Seat    int32                  `protobuf:"varint,4,opt,name=seat,proto3" json:"seat,omitempty"`                     //椅子号
	Action  ACTION                 `protobuf:"varint,5,opt,name=action,proto3,enum=api.ACTION" json:"action,omitempty"` //执行的动作
	LeftNum int32                  `protobuf:"varint,6,opt,name=leftNum,proto3" json:"leftNum,omitempty"`               //牌堆剩余牌数
	Effect  *Pending               `protobuf:"bytes,7,opt,name=effect,proto3" json:"effect,omitempty"`                  //触发的牌面效果及等待响应信息（如 +2、跳过、选花色）
	// 执行结果
	PlayResult    *PlayCardResult    `protobuf:"bytes,8,opt,name=playResult,proto3" json:"playResult,omitempty"`        //出牌结果
	DrawResult    *DrawCardResult    `protobuf:"bytes,9,opt,name=drawResult,proto3" json:"drawResult,omitempty"`        //摸牌结果
	DeclareResult *DeclareSuitResult `protobuf:"bytes,10,opt,name=DeclareResult,proto3" json:"DeclareResult,omitempty"` //花色声明结果
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserActionRsp) Reset() {
	*x = UserActionRsp{}
	mi := &file_helloworld_api_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserActionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserActionRsp) ProtoMessage() {}

func (x *UserActionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserActionRsp.ProtoReflect.Descriptor instead.
func (*UserActionRsp) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{13}
}

func (x *UserActionRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UserActionRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *UserActionRsp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserActionRsp) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *UserActionRsp) GetAction() ACTION {
	if x != nil {
		return x.Action
	}
	return ACTION_ACTION_NULL
}

func (x *UserActionRsp) GetLeftNum() int32 {
	if x != nil {
		return x.LeftNum
	}
	return 0
}

func (x *UserActionRsp) GetEffect() *Pending {
	if x != nil {
		return x.Effect
	}
	return nil
}

func (x *UserActionRsp) GetPlayResult() *PlayCardResult {
	if x != nil {
		return x.PlayResult
	}
	return nil
}

func (x *UserActionRsp) GetDrawResult() *DrawCardResult {
	if x != nil {
		return x.DrawResult
	}
	return nil
}

func (x *UserActionRsp) GetDeclareResult() *DeclareSuitResult {
	if x != nil {
		return x.DeclareResult
	}
	return nil
}

// 出牌结果
type PlayCardResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Card          int32                  `protobuf:"varint,1,opt,name=card,proto3" json:"card,omitempty"`          //出牌玩家出的牌
	HandsNum      int32                  `protobuf:"varint,2,opt,name=handsNum,proto3" json:"handsNum,omitempty"`  //出牌玩家手牌数量
	Cards         []int32                `protobuf:"varint,3,rep,packed,name=cards,proto3" json:"cards,omitempty"` //出牌玩家自己的手牌 (只发送给出牌玩家)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayCardResult) Reset() {
	*x = PlayCardResult{}
	mi := &file_helloworld_api_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayCardResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayCardResult) ProtoMessage() {}

func (x *PlayCardResult) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayCardResult.ProtoReflect.Descriptor instead.
func (*PlayCardResult) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{14}
}

func (x *PlayCardResult) GetCard() int32 {
	if x != nil {
		return x.Card
	}
	return 0
}

func (x *PlayCardResult) GetHandsNum() int32 {
	if x != nil {
		return x.HandsNum
	}
	return 0
}

func (x *PlayCardResult) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

// 摸牌结果
type DrawCardResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DrawNum       int32                  `protobuf:"varint,1,opt,name=drawNum,proto3" json:"drawNum,omitempty"`    //摸牌数量
	HandsNum      int32                  `protobuf:"varint,2,opt,name=handsNum,proto3" json:"handsNum,omitempty"`  //玩家手牌数
	Drawn         []int32                `protobuf:"varint,3,rep,packed,name=drawn,proto3" json:"drawn,omitempty"` //摸到的牌 (只发送给摸牌玩家)
	Cards         []int32                `protobuf:"varint,4,rep,packed,name=cards,proto3" json:"cards,omitempty"` //摸牌玩家自己的手牌 (只发送给摸牌玩家)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DrawCardResult) Reset() {
	*x = DrawCardResult{}
	mi := &file_helloworld_api_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DrawCardResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawCardResult) ProtoMessage() {}

func (x *DrawCardResult) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawCardResult.ProtoReflect.Descriptor instead.
func (*DrawCardResult) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{15}
}

func (x *DrawCardResult) GetDrawNum() int32 {
	if x != nil {
		return x.DrawNum
	}
	return 0
}

func (x *DrawCardResult) GetHandsNum() int32 {
	if x != nil {
		return x.HandsNum
	}
	return 0
}

func (x *DrawCardResult) GetDrawn() []int32 {
	if x != nil {
		return x.Drawn
	}
	return nil
}

func (x *DrawCardResult) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

// 声明花色结果
type DeclareSuitResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Suit          SUIT_TYPE              `protobuf:"varint,1,opt,name=suit,proto3,enum=api.SUIT_TYPE" json:"suit,omitempty"` //打出万能牌后声明花色类型 1-5
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeclareSuitResult) Reset() {
	*x = DeclareSuitResult{}
	mi := &file_helloworld_api_api_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeclareSuitResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclareSuitResult) ProtoMessage() {}

func (x *DeclareSuitResult) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclareSuitResult.ProtoReflect.Descriptor instead.
func (*DeclareSuitResult) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{16}
}

func (x *DeclareSuitResult) GetSuit() SUIT_TYPE {
	if x != nil {
		return x.Suit
	}
	return SUIT_TYPE_SUIT_NONE
}

// 玩家退出房间
type C2SLeavRoom struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *C2SLeavRoom) Reset() {
	*x = C2SLeavRoom{}
	mi := &file_helloworld_api_api_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *C2SLeavRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2SLeavRoom) ProtoMessage() {}

func (x *C2SLeavRoom) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2SLeavRoom.ProtoReflect.Descriptor instead.
func (*C2SLeavRoom) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{17}
}

// 同步玩家退出房间
type S2CLeavRoom struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`   //离开玩家
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"` //消息状态
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *S2CLeavRoom) Reset() {
	*x = S2CLeavRoom{}
	mi := &file_helloworld_api_api_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S2CLeavRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2CLeavRoom) ProtoMessage() {}

func (x *S2CLeavRoom) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2CLeavRoom.ProtoReflect.Descriptor instead.
func (*S2CLeavRoom) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{18}
}

func (x *S2CLeavRoom) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *S2CLeavRoom) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

var File_helloworld_api_api_proto protoreflect.FileDescriptor

const file_helloworld_api_api_proto_rawDesc = "" +
	"\n" +
	"\x18helloworld/api/api.proto\x12\x03api\"\xd2\x02\n" +
	"\bRoomInfo\x122\n" +
	"\n" +
	"playerInfo\x18\x01 \x03(\v2\x12.api.UserEnterRoomR\n" +
	"playerInfo\x12\x16\n" +
	"\x06banner\x18\x02 \x01(\x03R\x06banner\x12\x16\n" +
	"\x06curUid\x18\x03 \x01(\x03R\x06curUid\x12\x16\n" +
	"\x06ticker\x18\x04 \x01(\x03R\x06ticker\x12\x1c\n" +
	"\tbaseScore\x18\x05 \x01(\x01R\tbaseScore\x12\x1a\n" +
	"\bcurrCard\x18\x06 \x01(\x05R\bcurrCard\x120\n" +
	"\vdeclareSuit\x18\a \x01(\x0e2\x0e.api.SUIT_TYPER\vdeclareSuit\x12\x18\n" +
	"\aleftNum\x18\b \x01(\x05R\aleftNum\x12&\n" +
	"\apending\x18\t \x01(\v2\f.api.PendingR\apending\x12\x1c\n" +
	"\tgameState\x18\x0f \x01(\x05R\tgameState\"\xf3\x01\n" +
	"\rUserEnterRoom\x12\x10\n" +
	"\x03uid\x18\x01 \x01(\x03R\x03uid\x12\x12\n" +
	"\x04head\x18\x02 \x01(\x05R\x04head\x12\x1a\n" +
	"\buserName\x18\x03 \x01(\tR\buserName\x12\x12\n" +
	"\x04seat\x18\x04 \x01(\x05R\x04seat\x12\x14\n" +
	"\x05score\x18\x05 \x01(\x03R\x05score\x12'\n" +
	"\x05canOp\x18\a \x03(\v2\x11.api.ActionOptionR\x05canOp\x12\x1c\n" +
	"\tgameState\x18\b \x01(\x05R\tgameState\x12/\n" +
	"\n" +
	"resultInfo\x18\v \x01(\v2\x0f.api.ResultPushR\n" +
	"resultInfo\"\x85\x01\n" +
	"\aStageFa\x12\x1c\n" +
	"\tbankerUid\x18\x01 \x01(\x03R\tbankerUid\x12\x1c\n" +
	"\tfirstCard\x18\x02 \x01(\x05R\tfirstCard\x12\x18\n" +
	"\aleftNum\x18\x03 \x01(\x05R\aleftNum\x12$\n" +
	"\auserBet\x18\x04 \x03(\v2\n" +
	".api.FaBetR\auserBet\"}\n" +
	"\x05FaBet\x12\x10\n" +
	"\x03uid\x18\x01 \x01(\x03R\x03uid\x12\x1a\n" +
	"\bbetscore\x18\x02 \x01(\x03R\bbetscore\x12\x14\n" +
	"\x05score\x18\x03 \x01(\x03R\x05score\x12\x1a\n" +
	"\bhandsNum\x18\x04 \x01(\x05R\bhandsNum\x12\x14\n" +
	"\x05cards\x18\x05 \x03(\x05R\x05cards\"\xa9\x01\n" +
	"\n" +
	"ActivePush\x12\x12\n" +
	"\x04time\x18\x01 \x01(\x03R\x04time\x12\x10\n" +
	"\x03uid\x18\x02 \x01(\x03R\x03uid\x12\x1a\n" +
	"\bcurrCard\x18\x03 \x01(\x05R\bcurrCard\x120\n" +
	"\vdeclareSuit\x18\x04 \x01(\x0e2\x0e.api.SUIT_TYPER\vdeclareSuit\x12'\n" +
	"\x05canOp\x18\x05 \x03(\v2\x11.api.ActionOptionR\x05canOp\"\x85\x01\n" +
	"\aPending\x12(\n" +
	"\x06effect\x18\x01 \x01(\x0e2\x10.api.CARD_EFFECTR\x06effect\x12\x1c\n" +
	"\tinitiator\x18\x02 \x01(\x03R\tinitiator\x12\x16\n" +
	"\x06target\x18\x03 \x01(\x03R\x06target\x12\x1a\n" +
	"\bquantity\x18\x04 \x01(\x05R\bquantity\"\x8d\x01\n" +
	"\fActionOption\x12#\n" +
	"\x06action\x18\x01 \x01(\x0e2\v.api.ACTIONR\x06action\x12\x14\n" +
	"\x05cards\x18\x02 \x03(\x05R\x05cards\x12\x1c\n" +
	"\tdrawCount\x18\x03 \x01(\x05R\tdrawCount\x12$\n" +
	"\x05suits\x18\x04 \x03(\x0e2\x0e.api.SUIT_TYPER\x05suits\"\x93\x01\n" +
	"\n" +
	"ResultPush\x12\x16\n" +
	"\x06winUid\x18\x01 \x01(\x03R\x06winUid\x12\x1a\n" +
	"\bwinScore\x18\x02 \x01(\x03R\bwinScore\x12\x1e\n" +
	"\n" +
	"finishType\x18\x03 \x01(\x05R\n" +
	"finishType\x121\n" +
	"\n" +
	"PlayerInfo\x18\x04 \x03(\v2\x11.api.PlayerResultR\n" +
	"PlayerInfo\"\x9e\x01\n" +
	"\fPlayerResult\x12\x10\n" +
	"\x03uid\x18\x01 \x01(\x03R\x03uid\x12\x1a\n" +
	"\bisWinner\x18\x02 \x01(\bR\bisWinner\x12\x1a\n" +
	"\bwinScore\x18\x03 \x01(\x01R\bwinScore\x12\x1c\n" +
	"\thandCards\x18\x04 \x03(\x05R\thandCards\x12&\n" +
	"\x0ehandCardsScore\x18\x05 \x01(\x05R\x0ehandCardsScore\"\xb8\x01\n" +
	"\x10MarketResultPush\x12\x10\n" +
	"\x03uid\x18\x01 \x01(\x03R\x03uid\x12\x18\n" +
	"\achairID\x18\x02 \x01(\x05R\achairID\x12\x18\n" +
	"\adrawNum\x18\x03 \x01(\x05R\adrawNum\x12\x1a\n" +
	"\bhandsNum\x18\x04 \x01(\x05R\bhandsNum\x12\x12\n" +
	"\x04draw\x18\x05 \x03(\x05R\x04draw\x12\x14\n" +
	"\x05cards\x18\x06 \x03(\x05R\x05cards\x12\x18\n" +
	"\aleftNum\x18\a \x01(\x05R\aleftNum\"\r\n" +
	"\vLastCardReq\"3\n" +
	"\vLastCardRsp\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x10\n" +
	"\x03uid\x18\x02 \x01(\x03R\x03uid\"\x92\x01\n" +
	"\rUserActionReq\x12\x10\n" +
	"\x03uid\x18\x01 \x01(\x03R\x03uid\x12#\n" +
	"\x06action\x18\x02 \x01(\x0e2\v.api.ACTIONR\x06action\x12\x18\n" +
	"\aoutCard\x18\x03 \x01(\x05R\aoutCard\x120\n" +
	"\vdeclareSuit\x18\x04 \x01(\x0e2\x0e.api.SUIT_TYPER\vdeclareSuit\"\xf0\x02\n" +
	"\rUserActionRsp\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x10\n" +
	"\x03uid\x18\x03 \x01(\x03R\x03uid\x12\x12\n" +
	"\x04seat\x18\x04 \x01(\x05R\x04seat\x12#\n" +
	"\x06action\x18\x05 \x01(\x0e2\v.api.ACTIONR\x06action\x12\x18\n" +
	"\aleftNum\x18\x06 \x01(\x05R\aleftNum\x12$\n" +
	"\x06effect\x18\a \x01(\v2\f.api.PendingR\x06effect\x123\n" +
	"\n" +
	"playResult\x18\b \x01(\v2\x13.api.PlayCardResultR\n" +
	"playResult\x123\n" +
	"\n" +
	"drawResult\x18\t \x01(\v2\x13.api.DrawCardResultR\n" +
	"drawResult\x12<\n" +
	"\rDeclareResult\x18\n" +
	" \x01(\v2\x16.api.DeclareSuitResultR\rDeclareResult\"V\n" +
	"\x0ePlayCardResult\x12\x12\n" +
	"\x04card\x18\x01 \x01(\x05R\x04card\x12\x1a\n" +
	"\bhandsNum\x18\x02 \x01(\x05R\bhandsNum\x12\x14\n" +
	"\x05cards\x18\x03 \x03(\x05R\x05cards\"r\n" +
	"\x0eDrawCardResult\x12\x18\n" +
	"\adrawNum\x18\x01 \x01(\x05R\adrawNum\x12\x1a\n" +
	"\bhandsNum\x18\x02 \x01(\x05R\bhandsNum\x12\x14\n" +
	"\x05drawn\x18\x03 \x03(\x05R\x05drawn\x12\x14\n" +
	"\x05cards\x18\x04 \x03(\x05R\x05cards\"7\n" +
	"\x11DeclareSuitResult\x12\"\n" +
	"\x04suit\x18\x01 \x01(\x0e2\x0e.api.SUIT_TYPER\x04suit\"\r\n" +
	"\vC2SLeavRoom\"3\n" +
	"\vS2CLeavRoom\x12\x10\n" +
	"\x03uid\x18\x01 \x01(\x03R\x03uid\x12\x12\n" +
	"\x04code\x18\x02 \x01(\x05R\x04code*\xa2\x02\n" +
	"\vGameCommand\x12\b\n" +
	"\x04NONE\x10\x00\x12\x0e\n" +
	"\n" +
	"MsRoomInfo\x10\x01\x12\x13\n" +
	"\x0fMsUserEnterRoom\x10\x02\x12\f\n" +
	"\bMsFaPush\x10\x03\x12\x10\n" +
	"\fMsActivePush\x10\x04\x12\x10\n" +
	"\fMsResultPush\x10\x05\x12\x16\n" +
	"\x12MsMarketResultPush\x10\x06\x12\x11\n" +
	"\rMsC2SBetScore\x10\x14\x12\x11\n" +
	"\rMsC2SLastCard\x10\x15\x12\x13\n" +
	"\x0fMsC2SUserAction\x10\x16\x12\x11\n" +
	"\rMsC2SLeavRoom\x10\x17\x12\x11\n" +
	"\rMsS2CBetScore\x10x\x12\x11\n" +
	"\rMsS2CLastCard\x10y\x12\x13\n" +
	"\x0fMsS2CUserAction\x10z\x12\x11\n" +
	"\rMsS2CLeavRoom\x10{*X\n" +
	"\x06ACTION\x12\x0f\n" +
	"\vACTION_NULL\x10\x00\x12\r\n" +
	"\tPLAY_CARD\x10\x01\x12\r\n" +
	"\tDRAW_CARD\x10\x02\x12\x10\n" +
	"\fDECLARE_SUIT\x10\x03\x12\r\n" +
	"\tSKIP_TURN\x10\x04*l\n" +
	"\tSUIT_TYPE\x12\r\n" +
	"\tSUIT_NONE\x10\x00\x12\x0f\n" +
	"\vSUIT_CIRCLE\x10\x01\x12\x0e\n" +
	"\n" +
	"SUIT_CROSS\x10\x02\x12\x11\n" +
	"\rSUIT_TRIANGLE\x10\x03\x12\r\n" +
	"\tSUIT_STAR\x10\x04\x12\r\n" +
	"\tSUIT_WHOT\x10\x05*\x90\x01\n" +
	"\vCARD_EFFECT\x12\x11\n" +
	"\rEFFECT_NORMAL\x10\x00\x12\x15\n" +
	"\x11EFFECT_EXTRA_TURN\x10\x01\x12\x13\n" +
	"\x0fEFFECT_DRAW_TWO\x10\x02\x12\x14\n" +
	"\x10EFFECT_SKIP_NEXT\x10\x03\x12\x16\n" +
	"\x12EFFECT_MARKET_PICK\x10\x04\x12\x14\n" +
	"\x10EFFECT_WILD_CARD\x10\x05B\x1dZ\x1bwhot/api/helloworld/api;apib\x06proto3"

var (
	file_helloworld_api_api_proto_rawDescOnce sync.Once
	file_helloworld_api_api_proto_rawDescData []byte
)

func file_helloworld_api_api_proto_rawDescGZIP() []byte {
	file_helloworld_api_api_proto_rawDescOnce.Do(func() {
		file_helloworld_api_api_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_helloworld_api_api_proto_rawDesc), len(file_helloworld_api_api_proto_rawDesc)))
	})
	return file_helloworld_api_api_proto_rawDescData
}

var file_helloworld_api_api_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_helloworld_api_api_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_helloworld_api_api_proto_goTypes = []any{
	(GameCommand)(0),          // 0: api.GameCommand
	(ACTION)(0),               // 1: api.ACTION
	(SUIT_TYPE)(0),            // 2: api.SUIT_TYPE
	(CARD_EFFECT)(0),          // 3: api.CARD_EFFECT
	(*RoomInfo)(nil),          // 4: api.RoomInfo
	(*UserEnterRoom)(nil),     // 5: api.UserEnterRoom
	(*StageFa)(nil),           // 6: api.StageFa
	(*FaBet)(nil),             // 7: api.FaBet
	(*ActivePush)(nil),        // 8: api.ActivePush
	(*Pending)(nil),           // 9: api.Pending
	(*ActionOption)(nil),      // 10: api.ActionOption
	(*ResultPush)(nil),        // 11: api.ResultPush
	(*PlayerResult)(nil),      // 12: api.PlayerResult
	(*MarketResultPush)(nil),  // 13: api.MarketResultPush
	(*LastCardReq)(nil),       // 14: api.LastCardReq
	(*LastCardRsp)(nil),       // 15: api.LastCardRsp
	(*UserActionReq)(nil),     // 16: api.UserActionReq
	(*UserActionRsp)(nil),     // 17: api.UserActionRsp
	(*PlayCardResult)(nil),    // 18: api.PlayCardResult
	(*DrawCardResult)(nil),    // 19: api.DrawCardResult
	(*DeclareSuitResult)(nil), // 20: api.DeclareSuitResult
	(*C2SLeavRoom)(nil),       // 21: api.C2SLeavRoom
	(*S2CLeavRoom)(nil),       // 22: api.S2CLeavRoom
}
var file_helloworld_api_api_proto_depIdxs = []int32{
	5,  // 0: api.RoomInfo.playerInfo:type_name -> api.UserEnterRoom
	2,  // 1: api.RoomInfo.declareSuit:type_name -> api.SUIT_TYPE
	9,  // 2: api.RoomInfo.pending:type_name -> api.Pending
	10, // 3: api.UserEnterRoom.canOp:type_name -> api.ActionOption
	11, // 4: api.UserEnterRoom.resultInfo:type_name -> api.ResultPush
	7,  // 5: api.StageFa.userBet:type_name -> api.FaBet
	2,  // 6: api.ActivePush.declareSuit:type_name -> api.SUIT_TYPE
	10, // 7: api.ActivePush.canOp:type_name -> api.ActionOption
	3,  // 8: api.Pending.effect:type_name -> api.CARD_EFFECT
	1,  // 9: api.ActionOption.action:type_name -> api.ACTION
	2,  // 10: api.ActionOption.suits:type_name -> api.SUIT_TYPE
	12, // 11: api.ResultPush.PlayerInfo:type_name -> api.PlayerResult
	1,  // 12: api.UserActionReq.action:type_name -> api.ACTION
	2,  // 13: api.UserActionReq.declareSuit:type_name -> api.SUIT_TYPE
	1,  // 14: api.UserActionRsp.action:type_name -> api.ACTION
	9,  // 15: api.UserActionRsp.effect:type_name -> api.Pending
	18, // 16: api.UserActionRsp.playResult:type_name -> api.PlayCardResult
	19, // 17: api.UserActionRsp.drawResult:type_name -> api.DrawCardResult
	20, // 18: api.UserActionRsp.DeclareResult:type_name -> api.DeclareSuitResult
	2,  // 19: api.DeclareSuitResult.suit:type_name -> api.SUIT_TYPE
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_helloworld_api_api_proto_init() }
func file_helloworld_api_api_proto_init() {
	if File_helloworld_api_api_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_helloworld_api_api_proto_rawDesc), len(file_helloworld_api_api_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_helloworld_api_api_proto_goTypes,
		DependencyIndexes: file_helloworld_api_api_proto_depIdxs,
		EnumInfos:         file_helloworld_api_api_proto_enumTypes,
		MessageInfos:      file_helloworld_api_api_proto_msgTypes,
	}.Build()
	File_helloworld_api_api_proto = out.File
	file_helloworld_api_api_proto_goTypes = nil
	file_helloworld_api_api_proto_depIdxs = nil
}
