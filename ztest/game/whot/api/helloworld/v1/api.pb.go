// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: helloworld/v1/api.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GameCommand int32

const (
	GameCommand_Nothing     GameCommand = 0 //
	GameCommand_SayHelloReq GameCommand = 1 //
	GameCommand_SayHelloRsp GameCommand = 2
	// request
	GameCommand_OnLoginReq       GameCommand = 1001 //登录
	GameCommand_OnLoginRsp       GameCommand = 1002
	GameCommand_OnLogoutReq      GameCommand = 1003 //登出
	GameCommand_OnLogoutRsp      GameCommand = 1004
	GameCommand_OnReadyReq       GameCommand = 1005 //准备
	GameCommand_OnReadyRsp       GameCommand = 1006
	GameCommand_OnSwitchTableReq GameCommand = 1007 //换桌
	GameCommand_OnSwitchTableRsp GameCommand = 1008
	GameCommand_OnSceneReq       GameCommand = 1009 //场景信息
	GameCommand_OnSceneRsp       GameCommand = 1010
	GameCommand_OnChatReq        GameCommand = 1011 //聊天
	GameCommand_OnChatRsp        GameCommand = 1012
	GameCommand_OnHostingReq     GameCommand = 1013 //托管
	GameCommand_OnHostingRsp     GameCommand = 1014
	GameCommand_OnForwardReq     GameCommand = 1015 //转发
	GameCommand_OnForwardRsp     GameCommand = 1016
	// game request
	GameCommand_OnPlayerActionReq GameCommand = 1101
	GameCommand_OnPlayerActionRsp GameCommand = 1102
	// push
	GameCommand_OnUserInfoPush    GameCommand = 2001 //玩家信息
	GameCommand_OnEmojiConfigPush GameCommand = 2002 //表情道具配置
	GameCommand_OnPlayerQuitPush  GameCommand = 2003 //玩家退出
	GameCommand_OnUserOfflinePush GameCommand = 2004 //用户断线通知
	// game push
	GameCommand_OnMatchResultPush    GameCommand = 2100 //匹配结果通知
	GameCommand_OnSendCardPush       GameCommand = 2101 //发牌通知
	GameCommand_OnActivePush         GameCommand = 2102 //活动玩家通知
	GameCommand_OnMarketDrawCardPush GameCommand = 2103 //补牌信息推送(MARKET)
	GameCommand_OnLastCardPush       GameCommand = 2104 //最后一张通知
	GameCommand_OnResultPush         GameCommand = 2200 //结算通知
)

// Enum value maps for GameCommand.
var (
	GameCommand_name = map[int32]string{
		0:    "Nothing",
		1:    "SayHelloReq",
		2:    "SayHelloRsp",
		1001: "OnLoginReq",
		1002: "OnLoginRsp",
		1003: "OnLogoutReq",
		1004: "OnLogoutRsp",
		1005: "OnReadyReq",
		1006: "OnReadyRsp",
		1007: "OnSwitchTableReq",
		1008: "OnSwitchTableRsp",
		1009: "OnSceneReq",
		1010: "OnSceneRsp",
		1011: "OnChatReq",
		1012: "OnChatRsp",
		1013: "OnHostingReq",
		1014: "OnHostingRsp",
		1015: "OnForwardReq",
		1016: "OnForwardRsp",
		1101: "OnPlayerActionReq",
		1102: "OnPlayerActionRsp",
		2001: "OnUserInfoPush",
		2002: "OnEmojiConfigPush",
		2003: "OnPlayerQuitPush",
		2004: "OnUserOfflinePush",
		2100: "OnMatchResultPush",
		2101: "OnSendCardPush",
		2102: "OnActivePush",
		2103: "OnMarketDrawCardPush",
		2104: "OnLastCardPush",
		2200: "OnResultPush",
	}
	GameCommand_value = map[string]int32{
		"Nothing":              0,
		"SayHelloReq":          1,
		"SayHelloRsp":          2,
		"OnLoginReq":           1001,
		"OnLoginRsp":           1002,
		"OnLogoutReq":          1003,
		"OnLogoutRsp":          1004,
		"OnReadyReq":           1005,
		"OnReadyRsp":           1006,
		"OnSwitchTableReq":     1007,
		"OnSwitchTableRsp":     1008,
		"OnSceneReq":           1009,
		"OnSceneRsp":           1010,
		"OnChatReq":            1011,
		"OnChatRsp":            1012,
		"OnHostingReq":         1013,
		"OnHostingRsp":         1014,
		"OnForwardReq":         1015,
		"OnForwardRsp":         1016,
		"OnPlayerActionReq":    1101,
		"OnPlayerActionRsp":    1102,
		"OnUserInfoPush":       2001,
		"OnEmojiConfigPush":    2002,
		"OnPlayerQuitPush":     2003,
		"OnUserOfflinePush":    2004,
		"OnMatchResultPush":    2100,
		"OnSendCardPush":       2101,
		"OnActivePush":         2102,
		"OnMarketDrawCardPush": 2103,
		"OnLastCardPush":       2104,
		"OnResultPush":         2200,
	}
)

func (x GameCommand) Enum() *GameCommand {
	p := new(GameCommand)
	*p = x
	return p
}

func (x GameCommand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameCommand) Descriptor() protoreflect.EnumDescriptor {
	return file_helloworld_v1_api_proto_enumTypes[0].Descriptor()
}

func (GameCommand) Type() protoreflect.EnumType {
	return &file_helloworld_v1_api_proto_enumTypes[0]
}

func (x GameCommand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameCommand.Descriptor instead.
func (GameCommand) EnumDescriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{0}
}

// 玩家动作类型
type ACTION int32

const (
	ACTION_ACTION_NULL  ACTION = 0 //
	ACTION_PLAY_CARD    ACTION = 1 // 出牌
	ACTION_DRAW_CARD    ACTION = 2 // 摸牌
	ACTION_DECLARE_SUIT ACTION = 3 // 声明花色
	ACTION_SKIP_TURN    ACTION = 4 // 跳过回合
)

// Enum value maps for ACTION.
var (
	ACTION_name = map[int32]string{
		0: "ACTION_NULL",
		1: "PLAY_CARD",
		2: "DRAW_CARD",
		3: "DECLARE_SUIT",
		4: "SKIP_TURN",
	}
	ACTION_value = map[string]int32{
		"ACTION_NULL":  0,
		"PLAY_CARD":    1,
		"DRAW_CARD":    2,
		"DECLARE_SUIT": 3,
		"SKIP_TURN":    4,
	}
)

func (x ACTION) Enum() *ACTION {
	p := new(ACTION)
	*p = x
	return p
}

func (x ACTION) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACTION) Descriptor() protoreflect.EnumDescriptor {
	return file_helloworld_v1_api_proto_enumTypes[1].Descriptor()
}

func (ACTION) Type() protoreflect.EnumType {
	return &file_helloworld_v1_api_proto_enumTypes[1]
}

func (x ACTION) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACTION.Descriptor instead.
func (ACTION) EnumDescriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{1}
}

// 卡牌特效类型（出牌产生的特效类型）
type CARD_EFFECT int32

const (
	CARD_EFFECT_NORMAL   CARD_EFFECT = 0 //
	CARD_EFFECT_HOLD_ON  CARD_EFFECT = 1 // 1牌：立即再次出牌
	CARD_EFFECT_PICK_TWO CARD_EFFECT = 2 // 2牌：下家抽两张牌并跳过回合
	CARD_EFFECT_SUSPEND  CARD_EFFECT = 3 // 8牌：跳过下家
	CARD_EFFECT_MARKET   CARD_EFFECT = 4 // 14牌：所有其他玩家各抽一张
	CARD_EFFECT_WHOT     CARD_EFFECT = 5 // 20牌：万能牌（可终止2/8牌反击）
)

// Enum value maps for CARD_EFFECT.
var (
	CARD_EFFECT_name = map[int32]string{
		0: "NORMAL",
		1: "HOLD_ON",
		2: "PICK_TWO",
		3: "SUSPEND",
		4: "MARKET",
		5: "WHOT",
	}
	CARD_EFFECT_value = map[string]int32{
		"NORMAL":   0,
		"HOLD_ON":  1,
		"PICK_TWO": 2,
		"SUSPEND":  3,
		"MARKET":   4,
		"WHOT":     5,
	}
)

func (x CARD_EFFECT) Enum() *CARD_EFFECT {
	p := new(CARD_EFFECT)
	*p = x
	return p
}

func (x CARD_EFFECT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CARD_EFFECT) Descriptor() protoreflect.EnumDescriptor {
	return file_helloworld_v1_api_proto_enumTypes[2].Descriptor()
}

func (CARD_EFFECT) Type() protoreflect.EnumType {
	return &file_helloworld_v1_api_proto_enumTypes[2]
}

func (x CARD_EFFECT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CARD_EFFECT.Descriptor instead.
func (CARD_EFFECT) EnumDescriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{2}
}

// 游戏结束类型
type FINISH_TYPE int32

const (
	FINISH_TYPE_NONE              FINISH_TYPE = 0 // 未结束
	FINISH_TYPE_PLAYER_HAND_EMPTY FINISH_TYPE = 1 // 玩家出完牌
	FINISH_TYPE_DECK_EMPTY        FINISH_TYPE = 2 // 牌堆剩余牌为0
)

// Enum value maps for FINISH_TYPE.
var (
	FINISH_TYPE_name = map[int32]string{
		0: "NONE",
		1: "PLAYER_HAND_EMPTY",
		2: "DECK_EMPTY",
	}
	FINISH_TYPE_value = map[string]int32{
		"NONE":              0,
		"PLAYER_HAND_EMPTY": 1,
		"DECK_EMPTY":        2,
	}
)

func (x FINISH_TYPE) Enum() *FINISH_TYPE {
	p := new(FINISH_TYPE)
	*p = x
	return p
}

func (x FINISH_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FINISH_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_helloworld_v1_api_proto_enumTypes[3].Descriptor()
}

func (FINISH_TYPE) Type() protoreflect.EnumType {
	return &file_helloworld_v1_api_proto_enumTypes[3]
}

func (x FINISH_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FINISH_TYPE.Descriptor instead.
func (FINISH_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{3}
}

// 定义花色常量，编码时乘100用
type SUIT int32

const (
	SUIT_INVALID   SUIT = 0
	SUIT_CIRCLE    SUIT = 1
	SUIT_TRIANGLE  SUIT = 2
	SUIT_CROSS     SUIT = 3
	SUIT_SQUARE    SUIT = 4
	SUIT_START     SUIT = 5
	SUIT_SUIT_WHOT SUIT = 6
)

// Enum value maps for SUIT.
var (
	SUIT_name = map[int32]string{
		0: "INVALID",
		1: "CIRCLE",
		2: "TRIANGLE",
		3: "CROSS",
		4: "SQUARE",
		5: "START",
		6: "SUIT_WHOT",
	}
	SUIT_value = map[string]int32{
		"INVALID":   0,
		"CIRCLE":    1,
		"TRIANGLE":  2,
		"CROSS":     3,
		"SQUARE":    4,
		"START":     5,
		"SUIT_WHOT": 6,
	}
)

func (x SUIT) Enum() *SUIT {
	p := new(SUIT)
	*p = x
	return p
}

func (x SUIT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SUIT) Descriptor() protoreflect.EnumDescriptor {
	return file_helloworld_v1_api_proto_enumTypes[4].Descriptor()
}

func (SUIT) Type() protoreflect.EnumType {
	return &file_helloworld_v1_api_proto_enumTypes[4]
}

func (x SUIT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SUIT.Descriptor instead.
func (SUIT) EnumDescriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{4}
}

type HelloRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HelloRequest) Reset() {
	*x = HelloRequest{}
	mi := &file_helloworld_v1_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HelloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloRequest) ProtoMessage() {}

func (x *HelloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloRequest.ProtoReflect.Descriptor instead.
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{0}
}

func (x *HelloRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type HelloReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HelloReply) Reset() {
	*x = HelloReply{}
	mi := &file_helloworld_v1_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HelloReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloReply) ProtoMessage() {}

func (x *HelloReply) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloReply.ProtoReflect.Descriptor instead.
func (*HelloReply) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{1}
}

func (x *HelloReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 登录
type LoginReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int64                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`   //ID
	Token         string                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`      //token
	Type          int32                  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`       //0:创建，1：加入 2:快速加入
	TableID       int32                  `protobuf:"varint,4,opt,name=tableID,proto3" json:"tableID,omitempty"` //桌子号
	ChairID       int32                  `protobuf:"varint,5,opt,name=chairID,proto3" json:"chairID,omitempty"` //椅子号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginReq) Reset() {
	*x = LoginReq{}
	mi := &file_helloworld_v1_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReq) ProtoMessage() {}

func (x *LoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReq.ProtoReflect.Descriptor instead.
func (*LoginReq) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{2}
}

func (x *LoginReq) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *LoginReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LoginReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *LoginReq) GetTableID() int32 {
	if x != nil {
		return x.TableID
	}
	return 0
}

func (x *LoginReq) GetChairID() int32 {
	if x != nil {
		return x.ChairID
	}
	return 0
}

type LoginRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`     //错误码
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`        //错误信息
	UserID        int64                  `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"` //ID
	TableID       int32                  `protobuf:"varint,4,opt,name=tableID,proto3" json:"tableID,omitempty"`
	ChairID       int32                  `protobuf:"varint,5,opt,name=chairID,proto3" json:"chairID,omitempty"`
	ArenaID       int32                  `protobuf:"varint,6,opt,name=arenaID,proto3" json:"arenaID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginRsp) Reset() {
	*x = LoginRsp{}
	mi := &file_helloworld_v1_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRsp) ProtoMessage() {}

func (x *LoginRsp) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRsp.ProtoReflect.Descriptor instead.
func (*LoginRsp) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{3}
}

func (x *LoginRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *LoginRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *LoginRsp) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *LoginRsp) GetTableID() int32 {
	if x != nil {
		return x.TableID
	}
	return 0
}

func (x *LoginRsp) GetChairID() int32 {
	if x != nil {
		return x.ChairID
	}
	return 0
}

func (x *LoginRsp) GetArenaID() int32 {
	if x != nil {
		return x.ArenaID
	}
	return 0
}

// 登出
type LogoutReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserDBID      int64                  `protobuf:"varint,1,opt,name=userDBID,proto3" json:"userDBID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogoutReq) Reset() {
	*x = LogoutReq{}
	mi := &file_helloworld_v1_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogoutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutReq) ProtoMessage() {}

func (x *LogoutReq) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutReq.ProtoReflect.Descriptor instead.
func (*LogoutReq) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{4}
}

func (x *LogoutReq) GetUserDBID() int64 {
	if x != nil {
		return x.UserDBID
	}
	return 0
}

type LogoutRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` //错误码 0:成功
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    //错误信息 主动/踢人
	UserID        int64                  `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogoutRsp) Reset() {
	*x = LogoutRsp{}
	mi := &file_helloworld_v1_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogoutRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutRsp) ProtoMessage() {}

func (x *LogoutRsp) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutRsp.ProtoReflect.Descriptor instead.
func (*LogoutRsp) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{5}
}

func (x *LogoutRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *LogoutRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *LogoutRsp) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

// 准备
type ReadyReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int64                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	IsReady       bool                   `protobuf:"varint,2,opt,name=isReady,proto3" json:"isReady,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadyReq) Reset() {
	*x = ReadyReq{}
	mi := &file_helloworld_v1_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadyReq) ProtoMessage() {}

func (x *ReadyReq) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadyReq.ProtoReflect.Descriptor instead.
func (*ReadyReq) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{6}
}

func (x *ReadyReq) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ReadyReq) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

type ReadyRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int64                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	IsReady       bool                   `protobuf:"varint,2,opt,name=isReady,proto3" json:"isReady,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadyRsp) Reset() {
	*x = ReadyRsp{}
	mi := &file_helloworld_v1_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadyRsp) ProtoMessage() {}

func (x *ReadyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadyRsp.ProtoReflect.Descriptor instead.
func (*ReadyRsp) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{7}
}

func (x *ReadyRsp) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ReadyRsp) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

// 换桌
type SwitchTableReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int64                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	ChairID       int32                  `protobuf:"varint,2,opt,name=chairID,proto3" json:"chairID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwitchTableReq) Reset() {
	*x = SwitchTableReq{}
	mi := &file_helloworld_v1_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwitchTableReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchTableReq) ProtoMessage() {}

func (x *SwitchTableReq) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchTableReq.ProtoReflect.Descriptor instead.
func (*SwitchTableReq) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{8}
}

func (x *SwitchTableReq) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *SwitchTableReq) GetChairID() int32 {
	if x != nil {
		return x.ChairID
	}
	return 0
}

type SwitchTableRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	UserID        int64                  `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwitchTableRsp) Reset() {
	*x = SwitchTableRsp{}
	mi := &file_helloworld_v1_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwitchTableRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchTableRsp) ProtoMessage() {}

func (x *SwitchTableRsp) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchTableRsp.ProtoReflect.Descriptor instead.
func (*SwitchTableRsp) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{9}
}

func (x *SwitchTableRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SwitchTableRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SwitchTableRsp) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

// 聊天/表情
type ChatReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int32                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"` //玩家ID
	OpType        int32                  `protobuf:"varint,2,opt,name=opType,proto3" json:"opType,omitempty"` //0表情 1快捷文字 2自定义文字
	FaceID        int32                  `protobuf:"varint,3,opt,name=faceID,proto3" json:"faceID,omitempty"` //表情or聊天ID
	Msg           string                 `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`        //聊天信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatReq) Reset() {
	*x = ChatReq{}
	mi := &file_helloworld_v1_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatReq) ProtoMessage() {}

func (x *ChatReq) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatReq.ProtoReflect.Descriptor instead.
func (*ChatReq) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{10}
}

func (x *ChatReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ChatReq) GetOpType() int32 {
	if x != nil {
		return x.OpType
	}
	return 0
}

func (x *ChatReq) GetFaceID() int32 {
	if x != nil {
		return x.FaceID
	}
	return 0
}

func (x *ChatReq) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type ChatRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int32                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"` //玩家ID
	OpType        int32                  `protobuf:"varint,2,opt,name=opType,proto3" json:"opType,omitempty"` //0表情 1快捷文字 2自定义文字
	FaceID        int32                  `protobuf:"varint,3,opt,name=faceID,proto3" json:"faceID,omitempty"` //表情or聊天ID
	Msg           string                 `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`        //聊天信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatRsp) Reset() {
	*x = ChatRsp{}
	mi := &file_helloworld_v1_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRsp) ProtoMessage() {}

func (x *ChatRsp) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRsp.ProtoReflect.Descriptor instead.
func (*ChatRsp) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{11}
}

func (x *ChatRsp) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ChatRsp) GetOpType() int32 {
	if x != nil {
		return x.OpType
	}
	return 0
}

func (x *ChatRsp) GetFaceID() int32 {
	if x != nil {
		return x.FaceID
	}
	return 0
}

func (x *ChatRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 转发
type ForwardReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          int32                  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForwardReq) Reset() {
	*x = ForwardReq{}
	mi := &file_helloworld_v1_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForwardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardReq) ProtoMessage() {}

func (x *ForwardReq) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardReq.ProtoReflect.Descriptor instead.
func (*ForwardReq) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{12}
}

func (x *ForwardReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ForwardReq) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type ForwardRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          int32                  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForwardRsp) Reset() {
	*x = ForwardRsp{}
	mi := &file_helloworld_v1_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForwardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardRsp) ProtoMessage() {}

func (x *ForwardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardRsp.ProtoReflect.Descriptor instead.
func (*ForwardRsp) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{13}
}

func (x *ForwardRsp) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ForwardRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 托管
type HostingReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsHosting     bool                   `protobuf:"varint,1,opt,name=isHosting,proto3" json:"isHosting,omitempty"` // true 托管； false 取消托管
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostingReq) Reset() {
	*x = HostingReq{}
	mi := &file_helloworld_v1_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostingReq) ProtoMessage() {}

func (x *HostingReq) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostingReq.ProtoReflect.Descriptor instead.
func (*HostingReq) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{14}
}

func (x *HostingReq) GetIsHosting() bool {
	if x != nil {
		return x.IsHosting
	}
	return false
}

type HostingRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChairID       int32                  `protobuf:"varint,1,opt,name=chairID,proto3" json:"chairID,omitempty"`     //座位号
	Status        int32                  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`       //1:正常  2:托管
	AiNum         int32                  `protobuf:"varint,3,opt,name=aiNum,proto3" json:"aiNum,omitempty"`         //玩家（非断线）超时引起的当前局的托管次数
	PlayTimes     int32                  `protobuf:"varint,4,opt,name=playTimes,proto3" json:"playTimes,omitempty"` //操作时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostingRsp) Reset() {
	*x = HostingRsp{}
	mi := &file_helloworld_v1_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostingRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostingRsp) ProtoMessage() {}

func (x *HostingRsp) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostingRsp.ProtoReflect.Descriptor instead.
func (*HostingRsp) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{15}
}

func (x *HostingRsp) GetChairID() int32 {
	if x != nil {
		return x.ChairID
	}
	return 0
}

func (x *HostingRsp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *HostingRsp) GetAiNum() int32 {
	if x != nil {
		return x.AiNum
	}
	return 0
}

func (x *HostingRsp) GetPlayTimes() int32 {
	if x != nil {
		return x.PlayTimes
	}
	return 0
}

// 玩家信息推送
type UserInfoPush struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int64                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`      //用户ID
	ChairID       int32                  `protobuf:"varint,2,opt,name=chairID,proto3" json:"chairID,omitempty"`    //椅子号
	UserName      string                 `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`   //用户名字
	Money         float64                `protobuf:"fixed64,4,opt,name=money,proto3" json:"money,omitempty"`       //玩家金币
	Avatar        string                 `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`       // 头像
	AvatarUrl     string                 `protobuf:"bytes,6,opt,name=avatarUrl,proto3" json:"avatarUrl,omitempty"` // 头像
	Vip           int32                  `protobuf:"varint,7,opt,name=vip,proto3" json:"vip,omitempty"`            //用户vip
	Status        int32                  `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`      //用户状态，符合原Frame的用户状态 0:free 1:sit(noReady) 2:ready 3:gaming
	Ip            string                 `protobuf:"bytes,9,opt,name=ip,proto3" json:"ip,omitempty"`               //ip地址
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserInfoPush) Reset() {
	*x = UserInfoPush{}
	mi := &file_helloworld_v1_api_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInfoPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoPush) ProtoMessage() {}

func (x *UserInfoPush) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoPush.ProtoReflect.Descriptor instead.
func (*UserInfoPush) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{16}
}

func (x *UserInfoPush) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UserInfoPush) GetChairID() int32 {
	if x != nil {
		return x.ChairID
	}
	return 0
}

func (x *UserInfoPush) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserInfoPush) GetMoney() float64 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *UserInfoPush) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserInfoPush) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *UserInfoPush) GetVip() int32 {
	if x != nil {
		return x.Vip
	}
	return 0
}

func (x *UserInfoPush) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserInfoPush) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

// 玩家退出推送
type PlayerQuitPush struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int64                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`   //玩家ID
	ChairID       int32                  `protobuf:"varint,2,opt,name=chairID,proto3" json:"chairID,omitempty"` //椅子号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerQuitPush) Reset() {
	*x = PlayerQuitPush{}
	mi := &file_helloworld_v1_api_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerQuitPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQuitPush) ProtoMessage() {}

func (x *PlayerQuitPush) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQuitPush.ProtoReflect.Descriptor instead.
func (*PlayerQuitPush) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{17}
}

func (x *PlayerQuitPush) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *PlayerQuitPush) GetChairID() int32 {
	if x != nil {
		return x.ChairID
	}
	return 0
}

// 用户断线推送
type UserOfflinePush struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int64                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`       //用户ID
	IsOffline     bool                   `protobuf:"varint,2,opt,name=isOffline,proto3" json:"isOffline,omitempty"` //用户离线状态
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserOfflinePush) Reset() {
	*x = UserOfflinePush{}
	mi := &file_helloworld_v1_api_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserOfflinePush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOfflinePush) ProtoMessage() {}

func (x *UserOfflinePush) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOfflinePush.ProtoReflect.Descriptor instead.
func (*UserOfflinePush) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{18}
}

func (x *UserOfflinePush) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UserOfflinePush) GetIsOffline() bool {
	if x != nil {
		return x.IsOffline
	}
	return false
}

// 匹配结果推送
type MatchResultPush struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Uid           int64                  `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchResultPush) Reset() {
	*x = MatchResultPush{}
	mi := &file_helloworld_v1_api_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchResultPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchResultPush) ProtoMessage() {}

func (x *MatchResultPush) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchResultPush.ProtoReflect.Descriptor instead.
func (*MatchResultPush) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{19}
}

func (x *MatchResultPush) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MatchResultPush) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *MatchResultPush) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

// 发牌推送
type SendCardPush struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int64                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`         // 用户ID
	Cards         []int32                `protobuf:"varint,2,rep,packed,name=cards,proto3" json:"cards,omitempty"`    // 发给玩家的牌（格式：花色*100 + 牌值）
	Bottom        []int32                `protobuf:"varint,3,rep,packed,name=bottom,proto3" json:"bottom,omitempty"`  // 底牌
	LeftNum       int32                  `protobuf:"varint,4,opt,name=leftNum,proto3" json:"leftNum,omitempty"`       // 剩余牌数
	FirstChair    int32                  `protobuf:"varint,5,opt,name=firstChair,proto3" json:"firstChair,omitempty"` // 首次操作的玩家椅子
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendCardPush) Reset() {
	*x = SendCardPush{}
	mi := &file_helloworld_v1_api_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendCardPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCardPush) ProtoMessage() {}

func (x *SendCardPush) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCardPush.ProtoReflect.Descriptor instead.
func (*SendCardPush) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{20}
}

func (x *SendCardPush) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *SendCardPush) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *SendCardPush) GetBottom() []int32 {
	if x != nil {
		return x.Bottom
	}
	return nil
}

func (x *SendCardPush) GetLeftNum() int32 {
	if x != nil {
		return x.LeftNum
	}
	return 0
}

func (x *SendCardPush) GetFirstChair() int32 {
	if x != nil {
		return x.FirstChair
	}
	return 0
}

// 场景请求/响应
type SceneReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int64                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"` // 用户ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SceneReq) Reset() {
	*x = SceneReq{}
	mi := &file_helloworld_v1_api_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SceneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneReq) ProtoMessage() {}

func (x *SceneReq) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneReq.ProtoReflect.Descriptor instead.
func (*SceneReq) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{21}
}

func (x *SceneReq) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

// 场景响应，包含当前游戏状态和玩家信息
type SceneRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BaseScore     float64                `protobuf:"fixed64,1,opt,name=baseScore,proto3" json:"baseScore,omitempty"`                      // 基础分
	Stage         int32                  `protobuf:"varint,2,opt,name=stage,proto3" json:"stage,omitempty"`                               // 游戏阶段
	Timeout       int64                  `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`                           // 剩余时间（秒）
	Active        int32                  `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`                             // 当前操作玩家椅子号
	FirstChair    int32                  `protobuf:"varint,5,opt,name=firstChair,proto3" json:"firstChair,omitempty"`                     // 首家椅子号
	CurrCard      int32                  `protobuf:"varint,6,opt,name=currCard,proto3" json:"currCard,omitempty"`                         // 最后出牌（花色*100 + 牌值）
	DeclareSuit   SUIT                   `protobuf:"varint,7,opt,name=declareSuit,proto3,enum=whot.v1.SUIT" json:"declareSuit,omitempty"` // 当前申明的花色
	LeftNum       int32                  `protobuf:"varint,8,opt,name=leftNum,proto3" json:"leftNum,omitempty"`                           // 剩余牌数
	Pending       *Pending               `protobuf:"bytes,9,opt,name=pending,proto3" json:"pending,omitempty"`                            // 当前待处理动作响应（如等待反击,等待声明花色）
	Players       []*PlayerInfo          `protobuf:"bytes,10,rep,name=players,proto3" json:"players,omitempty"`                           // 玩家列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SceneRsp) Reset() {
	*x = SceneRsp{}
	mi := &file_helloworld_v1_api_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SceneRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneRsp) ProtoMessage() {}

func (x *SceneRsp) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneRsp.ProtoReflect.Descriptor instead.
func (*SceneRsp) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{22}
}

func (x *SceneRsp) GetBaseScore() float64 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *SceneRsp) GetStage() int32 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *SceneRsp) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *SceneRsp) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *SceneRsp) GetFirstChair() int32 {
	if x != nil {
		return x.FirstChair
	}
	return 0
}

func (x *SceneRsp) GetCurrCard() int32 {
	if x != nil {
		return x.CurrCard
	}
	return 0
}

func (x *SceneRsp) GetDeclareSuit() SUIT {
	if x != nil {
		return x.DeclareSuit
	}
	return SUIT_INVALID
}

func (x *SceneRsp) GetLeftNum() int32 {
	if x != nil {
		return x.LeftNum
	}
	return 0
}

func (x *SceneRsp) GetPending() *Pending {
	if x != nil {
		return x.Pending
	}
	return nil
}

func (x *SceneRsp) GetPlayers() []*PlayerInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

// 玩家基础信息
type PlayerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`      // 用户ID
	ChairId       int32                  `protobuf:"varint,2,opt,name=chairId,proto3" json:"chairId,omitempty"`    // 椅子号
	Status        int32                  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`      // 玩家状态
	Hosting       bool                   `protobuf:"varint,4,opt,name=hosting,proto3" json:"hosting,omitempty"`    // 是否托管
	Offline       bool                   `protobuf:"varint,5,opt,name=offline,proto3" json:"offline,omitempty"`    // 是否断线
	Cards         []int32                `protobuf:"varint,6,rep,packed,name=cards,proto3" json:"cards,omitempty"` // 手牌列表（格式：花色*100 + 牌值）
	CanOp         []*ActionOption        `protobuf:"bytes,7,rep,name=canOp,proto3" json:"canOp,omitempty"`         // 当前允许的操作及牌. (只有当前活动玩家才能有操作信息)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerInfo) Reset() {
	*x = PlayerInfo{}
	mi := &file_helloworld_v1_api_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInfo) ProtoMessage() {}

func (x *PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInfo.ProtoReflect.Descriptor instead.
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{23}
}

func (x *PlayerInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PlayerInfo) GetChairId() int32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *PlayerInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PlayerInfo) GetHosting() bool {
	if x != nil {
		return x.Hosting
	}
	return false
}

func (x *PlayerInfo) GetOffline() bool {
	if x != nil {
		return x.Offline
	}
	return false
}

func (x *PlayerInfo) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *PlayerInfo) GetCanOp() []*ActionOption {
	if x != nil {
		return x.CanOp
	}
	return nil
}

// 玩家操作请求
type PlayerActionReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Action        ACTION                 `protobuf:"varint,2,opt,name=action,proto3,enum=whot.v1.ACTION" json:"action,omitempty"`         // 请求的动作类型, 摸牌,出牌,万能牌声明花色
	OutCard       int32                  `protobuf:"varint,3,opt,name=outCard,proto3" json:"outCard,omitempty"`                           // 请求要打出的牌, 卡牌ID（花色*100 + 牌值）
	DeclareSuit   SUIT                   `protobuf:"varint,4,opt,name=declareSuit,proto3,enum=whot.v1.SUIT" json:"declareSuit,omitempty"` // 请求万能牌声明花色
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerActionReq) Reset() {
	*x = PlayerActionReq{}
	mi := &file_helloworld_v1_api_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerActionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerActionReq) ProtoMessage() {}

func (x *PlayerActionReq) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerActionReq.ProtoReflect.Descriptor instead.
func (*PlayerActionReq) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{24}
}

func (x *PlayerActionReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PlayerActionReq) GetAction() ACTION {
	if x != nil {
		return x.Action
	}
	return ACTION_ACTION_NULL
}

func (x *PlayerActionReq) GetOutCard() int32 {
	if x != nil {
		return x.OutCard
	}
	return 0
}

func (x *PlayerActionReq) GetDeclareSuit() SUIT {
	if x != nil {
		return x.DeclareSuit
	}
	return SUIT_INVALID
}

// 玩家操作响应
type PlayerActionRsp struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Code    int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                         // 返回码（0=成功）
	Message string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                    // 错误信息
	UserId  int64                  `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`                     // 用户ID
	ChairId int32                  `protobuf:"varint,4,opt,name=chairId,proto3" json:"chairId,omitempty"`                   // 椅子号
	Action  ACTION                 `protobuf:"varint,5,opt,name=action,proto3,enum=whot.v1.ACTION" json:"action,omitempty"` // 执行的动作
	LeftNum int32                  `protobuf:"varint,6,opt,name=leftNum,proto3" json:"leftNum,omitempty"`                   // 牌堆剩余牌数
	Effect  *Pending               `protobuf:"bytes,7,opt,name=effect,proto3" json:"effect,omitempty"`                      // 触发的牌面效果及等待响应信息（如 +2、跳过、选花色）
	// 执行结果
	PlayResult    *PlayCardResult    `protobuf:"bytes,8,opt,name=playResult,proto3" json:"playResult,omitempty"`        // 出牌结果
	DrawResult    *DrawCardResult    `protobuf:"bytes,9,opt,name=drawResult,proto3" json:"drawResult,omitempty"`        // 摸牌结果
	DeclareResult *DeclareSuitResult `protobuf:"bytes,10,opt,name=DeclareResult,proto3" json:"DeclareResult,omitempty"` // 花色声明结果
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerActionRsp) Reset() {
	*x = PlayerActionRsp{}
	mi := &file_helloworld_v1_api_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerActionRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerActionRsp) ProtoMessage() {}

func (x *PlayerActionRsp) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerActionRsp.ProtoReflect.Descriptor instead.
func (*PlayerActionRsp) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{25}
}

func (x *PlayerActionRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PlayerActionRsp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PlayerActionRsp) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PlayerActionRsp) GetChairId() int32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *PlayerActionRsp) GetAction() ACTION {
	if x != nil {
		return x.Action
	}
	return ACTION_ACTION_NULL
}

func (x *PlayerActionRsp) GetLeftNum() int32 {
	if x != nil {
		return x.LeftNum
	}
	return 0
}

func (x *PlayerActionRsp) GetEffect() *Pending {
	if x != nil {
		return x.Effect
	}
	return nil
}

func (x *PlayerActionRsp) GetPlayResult() *PlayCardResult {
	if x != nil {
		return x.PlayResult
	}
	return nil
}

func (x *PlayerActionRsp) GetDrawResult() *DrawCardResult {
	if x != nil {
		return x.DrawResult
	}
	return nil
}

func (x *PlayerActionRsp) GetDeclareResult() *DeclareSuitResult {
	if x != nil {
		return x.DeclareResult
	}
	return nil
}

// 出牌结果
type PlayCardResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Card          int32                  `protobuf:"varint,1,opt,name=card,proto3" json:"card,omitempty"`             // 出牌玩家出的牌
	TotalCards    int32                  `protobuf:"varint,2,opt,name=totalCards,proto3" json:"totalCards,omitempty"` // 出牌玩家总牌数 (最后一张牌宣告)
	Cards         []int32                `protobuf:"varint,3,rep,packed,name=cards,proto3" json:"cards,omitempty"`    // 出牌玩家自己的手牌 (只发送给出牌玩家)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayCardResult) Reset() {
	*x = PlayCardResult{}
	mi := &file_helloworld_v1_api_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayCardResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayCardResult) ProtoMessage() {}

func (x *PlayCardResult) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayCardResult.ProtoReflect.Descriptor instead.
func (*PlayCardResult) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{26}
}

func (x *PlayCardResult) GetCard() int32 {
	if x != nil {
		return x.Card
	}
	return 0
}

func (x *PlayCardResult) GetTotalCards() int32 {
	if x != nil {
		return x.TotalCards
	}
	return 0
}

func (x *PlayCardResult) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

// 摸牌结果
type DrawCardResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DrawNum       int32                  `protobuf:"varint,1,opt,name=drawNum,proto3" json:"drawNum,omitempty"`       // 摸牌数量
	TotalCards    int32                  `protobuf:"varint,2,opt,name=totalCards,proto3" json:"totalCards,omitempty"` // 玩家总牌数
	Drawn         []int32                `protobuf:"varint,3,rep,packed,name=drawn,proto3" json:"drawn,omitempty"`    // 摸到的牌 (只发送给摸牌玩家)
	Cards         []int32                `protobuf:"varint,4,rep,packed,name=cards,proto3" json:"cards,omitempty"`    // 摸牌玩家自己的手牌 (只发送给摸牌玩家)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DrawCardResult) Reset() {
	*x = DrawCardResult{}
	mi := &file_helloworld_v1_api_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DrawCardResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawCardResult) ProtoMessage() {}

func (x *DrawCardResult) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawCardResult.ProtoReflect.Descriptor instead.
func (*DrawCardResult) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{27}
}

func (x *DrawCardResult) GetDrawNum() int32 {
	if x != nil {
		return x.DrawNum
	}
	return 0
}

func (x *DrawCardResult) GetTotalCards() int32 {
	if x != nil {
		return x.TotalCards
	}
	return 0
}

func (x *DrawCardResult) GetDrawn() []int32 {
	if x != nil {
		return x.Drawn
	}
	return nil
}

func (x *DrawCardResult) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

// 声明花色结果
type DeclareSuitResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Suit          SUIT                   `protobuf:"varint,1,opt,name=suit,proto3,enum=whot.v1.SUIT" json:"suit,omitempty"` // 打出万能牌后声明花色类型 1-5
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeclareSuitResult) Reset() {
	*x = DeclareSuitResult{}
	mi := &file_helloworld_v1_api_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeclareSuitResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclareSuitResult) ProtoMessage() {}

func (x *DeclareSuitResult) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclareSuitResult.ProtoReflect.Descriptor instead.
func (*DeclareSuitResult) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{28}
}

func (x *DeclareSuitResult) GetSuit() SUIT {
	if x != nil {
		return x.Suit
	}
	return SUIT_INVALID
}

// 活动玩家操作推送（轮到玩家操作）
type ActivePush struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stage         int32                  `protobuf:"varint,1,opt,name=stage,proto3" json:"stage,omitempty"`     // 游戏阶段
	Timeout       int64                  `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"` // 剩余时间
	Active        int32                  `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`   // 当前操作玩家
	LeftNum       int32                  `protobuf:"varint,4,opt,name=leftNum,proto3" json:"leftNum,omitempty"` // 剩余牌数
	Pending       *Pending               `protobuf:"bytes,5,opt,name=pending,proto3" json:"pending,omitempty"`  // 当前待处理动作响应（如等待反击,等待声明花色）
	CanOp         []*ActionOption        `protobuf:"bytes,6,rep,name=canOp,proto3" json:"canOp,omitempty"`      // 当前允许的操作及牌
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivePush) Reset() {
	*x = ActivePush{}
	mi := &file_helloworld_v1_api_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivePush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivePush) ProtoMessage() {}

func (x *ActivePush) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivePush.ProtoReflect.Descriptor instead.
func (*ActivePush) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{29}
}

func (x *ActivePush) GetStage() int32 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *ActivePush) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ActivePush) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *ActivePush) GetLeftNum() int32 {
	if x != nil {
		return x.LeftNum
	}
	return 0
}

func (x *ActivePush) GetPending() *Pending {
	if x != nil {
		return x.Pending
	}
	return nil
}

func (x *ActivePush) GetCanOp() []*ActionOption {
	if x != nil {
		return x.CanOp
	}
	return nil
}

// 单个动作以及其附属信息（如：出哪些牌、声明哪种花色）
type ActionOption struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Action        ACTION                 `protobuf:"varint,1,opt,name=action,proto3,enum=whot.v1.ACTION" json:"action,omitempty"`    // 可执行的动作类型（如 出牌、摸牌、声明花色等）
	Cards         []int32                `protobuf:"varint,2,rep,packed,name=cards,proto3" json:"cards,omitempty"`                   // 出牌可选
	DrawCount     int32                  `protobuf:"varint,3,opt,name=drawCount,proto3" json:"drawCount,omitempty"`                  // 需摸牌数量
	Suits         []SUIT                 `protobuf:"varint,4,rep,packed,name=suits,proto3,enum=whot.v1.SUIT" json:"suits,omitempty"` // 选花可选（仅声明花色时有效）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionOption) Reset() {
	*x = ActionOption{}
	mi := &file_helloworld_v1_api_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionOption) ProtoMessage() {}

func (x *ActionOption) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionOption.ProtoReflect.Descriptor instead.
func (*ActionOption) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{30}
}

func (x *ActionOption) GetAction() ACTION {
	if x != nil {
		return x.Action
	}
	return ACTION_ACTION_NULL
}

func (x *ActionOption) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *ActionOption) GetDrawCount() int32 {
	if x != nil {
		return x.DrawCount
	}
	return 0
}

func (x *ActionOption) GetSuits() []SUIT {
	if x != nil {
		return x.Suits
	}
	return nil
}

// 当前待处理动作响应; 如等待反击,等待声明花色等操作
type Pending struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Effect        CARD_EFFECT            `protobuf:"varint,1,opt,name=effect,proto3,enum=whot.v1.CARD_EFFECT" json:"effect,omitempty"` // 触发的牌面效果（如 +2、跳过、选花色）
	Initiator     int32                  `protobuf:"varint,2,opt,name=initiator,proto3" json:"initiator,omitempty"`                    // 发起者（首次触发该特效的玩家）
	Target        int32                  `protobuf:"varint,3,opt,name=target,proto3" json:"target,omitempty"`                          // 当前目标玩家（效果指向）
	Quantity      int32                  `protobuf:"varint,4,opt,name=quantity,proto3" json:"quantity,omitempty"`                      // 作用数量（如 +2 的连锁数量）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pending) Reset() {
	*x = Pending{}
	mi := &file_helloworld_v1_api_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pending) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pending) ProtoMessage() {}

func (x *Pending) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pending.ProtoReflect.Descriptor instead.
func (*Pending) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{31}
}

func (x *Pending) GetEffect() CARD_EFFECT {
	if x != nil {
		return x.Effect
	}
	return CARD_EFFECT_NORMAL
}

func (x *Pending) GetInitiator() int32 {
	if x != nil {
		return x.Initiator
	}
	return 0
}

func (x *Pending) GetTarget() int32 {
	if x != nil {
		return x.Target
	}
	return 0
}

func (x *Pending) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

// 摸牌推送
type MarketDrawCardPush struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int64                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`      // 用户ID
	ChairID       int32                  `protobuf:"varint,2,opt,name=chairID,proto3" json:"chairID,omitempty"`    // 椅子号
	Draw          []int32                `protobuf:"varint,3,rep,packed,name=draw,proto3" json:"draw,omitempty"`   // 摸到的牌
	Cards         []int32                `protobuf:"varint,4,rep,packed,name=cards,proto3" json:"cards,omitempty"` // 最后手牌
	LeftNum       int32                  `protobuf:"varint,5,opt,name=leftNum,proto3" json:"leftNum,omitempty"`    // 剩余牌数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarketDrawCardPush) Reset() {
	*x = MarketDrawCardPush{}
	mi := &file_helloworld_v1_api_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketDrawCardPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDrawCardPush) ProtoMessage() {}

func (x *MarketDrawCardPush) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDrawCardPush.ProtoReflect.Descriptor instead.
func (*MarketDrawCardPush) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{32}
}

func (x *MarketDrawCardPush) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *MarketDrawCardPush) GetChairID() int32 {
	if x != nil {
		return x.ChairID
	}
	return 0
}

func (x *MarketDrawCardPush) GetDraw() []int32 {
	if x != nil {
		return x.Draw
	}
	return nil
}

func (x *MarketDrawCardPush) GetCards() []int32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *MarketDrawCardPush) GetLeftNum() int32 {
	if x != nil {
		return x.LeftNum
	}
	return 0
}

// 最后一张推送
type LastCardPush struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsLast        bool                   `protobuf:"varint,1,opt,name=isLast,proto3" json:"isLast,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LastCardPush) Reset() {
	*x = LastCardPush{}
	mi := &file_helloworld_v1_api_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LastCardPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastCardPush) ProtoMessage() {}

func (x *LastCardPush) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastCardPush.ProtoReflect.Descriptor instead.
func (*LastCardPush) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{33}
}

func (x *LastCardPush) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

// 结果推送
type ResultPush struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FinishType    FINISH_TYPE            `protobuf:"varint,1,opt,name=finishType,proto3,enum=whot.v1.FINISH_TYPE" json:"finishType,omitempty"`
	WinnerID      int64                  `protobuf:"varint,2,opt,name=winnerID,proto3" json:"winnerID,omitempty"` //赢家Id
	Results       []*PlayerResult        `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResultPush) Reset() {
	*x = ResultPush{}
	mi := &file_helloworld_v1_api_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResultPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultPush) ProtoMessage() {}

func (x *ResultPush) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultPush.ProtoReflect.Descriptor instead.
func (*ResultPush) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{34}
}

func (x *ResultPush) GetFinishType() FINISH_TYPE {
	if x != nil {
		return x.FinishType
	}
	return FINISH_TYPE_NONE
}

func (x *ResultPush) GetWinnerID() int64 {
	if x != nil {
		return x.WinnerID
	}
	return 0
}

func (x *ResultPush) GetResults() []*PlayerResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// 玩家结果
type PlayerResult struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UserID         int64                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`                 // 用户ID
	ChairID        int32                  `protobuf:"varint,2,opt,name=chairID,proto3" json:"chairID,omitempty"`               // 椅子号
	IsWinner       bool                   `protobuf:"varint,3,opt,name=isWinner,proto3" json:"isWinner,omitempty"`             // 是否获胜
	WinScore       float64                `protobuf:"fixed64,4,opt,name=winScore,proto3" json:"winScore,omitempty"`            // 赢分
	HandCards      []int32                `protobuf:"varint,5,rep,packed,name=handCards,proto3" json:"handCards,omitempty"`    // 剩余手牌
	HandCardsScore int32                  `protobuf:"varint,6,opt,name=handCardsScore,proto3" json:"handCardsScore,omitempty"` // 剩余手牌得分
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PlayerResult) Reset() {
	*x = PlayerResult{}
	mi := &file_helloworld_v1_api_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerResult) ProtoMessage() {}

func (x *PlayerResult) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerResult.ProtoReflect.Descriptor instead.
func (*PlayerResult) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{35}
}

func (x *PlayerResult) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *PlayerResult) GetChairID() int32 {
	if x != nil {
		return x.ChairID
	}
	return 0
}

func (x *PlayerResult) GetIsWinner() bool {
	if x != nil {
		return x.IsWinner
	}
	return false
}

func (x *PlayerResult) GetWinScore() float64 {
	if x != nil {
		return x.WinScore
	}
	return 0
}

func (x *PlayerResult) GetHandCards() []int32 {
	if x != nil {
		return x.HandCards
	}
	return nil
}

func (x *PlayerResult) GetHandCardsScore() int32 {
	if x != nil {
		return x.HandCardsScore
	}
	return 0
}

var File_helloworld_v1_api_proto protoreflect.FileDescriptor

const file_helloworld_v1_api_proto_rawDesc = "" +
	"\n" +
	"\x17helloworld/v1/api.proto\x12\awhot.v1\x1a\x1cgoogle/api/annotations.proto\"\"\n" +
	"\fHelloRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"&\n" +
	"\n" +
	"HelloReply\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\"\x80\x01\n" +
	"\bLoginReq\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\x03R\x06userID\x12\x14\n" +
	"\x05token\x18\x02 \x01(\tR\x05token\x12\x12\n" +
	"\x04type\x18\x03 \x01(\x05R\x04type\x12\x18\n" +
	"\atableID\x18\x04 \x01(\x05R\atableID\x12\x18\n" +
	"\achairID\x18\x05 \x01(\x05R\achairID\"\x96\x01\n" +
	"\bLoginRsp\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\x12\x16\n" +
	"\x06userID\x18\x03 \x01(\x03R\x06userID\x12\x18\n" +
	"\atableID\x18\x04 \x01(\x05R\atableID\x12\x18\n" +
	"\achairID\x18\x05 \x01(\x05R\achairID\x12\x18\n" +
	"\aarenaID\x18\x06 \x01(\x05R\aarenaID\"'\n" +
	"\tLogoutReq\x12\x1a\n" +
	"\buserDBID\x18\x01 \x01(\x03R\buserDBID\"I\n" +
	"\tLogoutRsp\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\x12\x16\n" +
	"\x06UserID\x18\x03 \x01(\x03R\x06UserID\"<\n" +
	"\bReadyReq\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\x03R\x06userID\x12\x18\n" +
	"\aisReady\x18\x02 \x01(\bR\aisReady\"<\n" +
	"\bReadyRsp\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\x03R\x06userID\x12\x18\n" +
	"\aisReady\x18\x02 \x01(\bR\aisReady\"B\n" +
	"\x0eSwitchTableReq\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\x03R\x06userID\x12\x18\n" +
	"\achairID\x18\x02 \x01(\x05R\achairID\"N\n" +
	"\x0eSwitchTableRsp\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\x12\x16\n" +
	"\x06userID\x18\x03 \x01(\x03R\x06userID\"c\n" +
	"\aChatReq\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\x05R\x06userID\x12\x16\n" +
	"\x06opType\x18\x02 \x01(\x05R\x06opType\x12\x16\n" +
	"\x06faceID\x18\x03 \x01(\x05R\x06faceID\x12\x10\n" +
	"\x03msg\x18\x04 \x01(\tR\x03msg\"c\n" +
	"\aChatRsp\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\x05R\x06userID\x12\x16\n" +
	"\x06opType\x18\x02 \x01(\x05R\x06opType\x12\x16\n" +
	"\x06faceID\x18\x03 \x01(\x05R\x06faceID\x12\x10\n" +
	"\x03msg\x18\x04 \x01(\tR\x03msg\"2\n" +
	"\n" +
	"ForwardReq\x12\x12\n" +
	"\x04type\x18\x01 \x01(\x05R\x04type\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\"2\n" +
	"\n" +
	"ForwardRsp\x12\x12\n" +
	"\x04type\x18\x01 \x01(\x05R\x04type\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\"*\n" +
	"\n" +
	"HostingReq\x12\x1c\n" +
	"\tisHosting\x18\x01 \x01(\bR\tisHosting\"r\n" +
	"\n" +
	"HostingRsp\x12\x18\n" +
	"\achairID\x18\x01 \x01(\x05R\achairID\x12\x16\n" +
	"\x06status\x18\x02 \x01(\x05R\x06status\x12\x14\n" +
	"\x05aiNum\x18\x03 \x01(\x05R\x05aiNum\x12\x1c\n" +
	"\tplayTimes\x18\x04 \x01(\x05R\tplayTimes\"\xe2\x01\n" +
	"\fUserInfoPush\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\x03R\x06userID\x12\x18\n" +
	"\achairID\x18\x02 \x01(\x05R\achairID\x12\x1a\n" +
	"\buserName\x18\x03 \x01(\tR\buserName\x12\x14\n" +
	"\x05money\x18\x04 \x01(\x01R\x05money\x12\x16\n" +
	"\x06avatar\x18\x05 \x01(\tR\x06avatar\x12\x1c\n" +
	"\tavatarUrl\x18\x06 \x01(\tR\tavatarUrl\x12\x10\n" +
	"\x03vip\x18\a \x01(\x05R\x03vip\x12\x16\n" +
	"\x06status\x18\b \x01(\x05R\x06status\x12\x0e\n" +
	"\x02ip\x18\t \x01(\tR\x02ip\"B\n" +
	"\x0ePlayerQuitPush\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\x03R\x06userID\x12\x18\n" +
	"\achairID\x18\x02 \x01(\x05R\achairID\"G\n" +
	"\x0fUserOfflinePush\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\x03R\x06userID\x12\x1c\n" +
	"\tisOffline\x18\x02 \x01(\bR\tisOffline\"I\n" +
	"\x0fMatchResultPush\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\x12\x10\n" +
	"\x03uid\x18\x03 \x01(\x03R\x03uid\"\x8e\x01\n" +
	"\fSendCardPush\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\x03R\x06userID\x12\x14\n" +
	"\x05cards\x18\x02 \x03(\x05R\x05cards\x12\x16\n" +
	"\x06bottom\x18\x03 \x03(\x05R\x06bottom\x12\x18\n" +
	"\aleftNum\x18\x04 \x01(\x05R\aleftNum\x12\x1e\n" +
	"\n" +
	"firstChair\x18\x05 \x01(\x05R\n" +
	"firstChair\"\"\n" +
	"\bSceneReq\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\x03R\x06userID\"\xd2\x02\n" +
	"\bSceneRsp\x12\x1c\n" +
	"\tbaseScore\x18\x01 \x01(\x01R\tbaseScore\x12\x14\n" +
	"\x05stage\x18\x02 \x01(\x05R\x05stage\x12\x18\n" +
	"\atimeout\x18\x03 \x01(\x03R\atimeout\x12\x16\n" +
	"\x06active\x18\x04 \x01(\x05R\x06active\x12\x1e\n" +
	"\n" +
	"firstChair\x18\x05 \x01(\x05R\n" +
	"firstChair\x12\x1a\n" +
	"\bcurrCard\x18\x06 \x01(\x05R\bcurrCard\x12/\n" +
	"\vdeclareSuit\x18\a \x01(\x0e2\r.whot.v1.SUITR\vdeclareSuit\x12\x18\n" +
	"\aleftNum\x18\b \x01(\x05R\aleftNum\x12*\n" +
	"\apending\x18\t \x01(\v2\x10.whot.v1.PendingR\apending\x12-\n" +
	"\aplayers\x18\n" +
	" \x03(\v2\x13.whot.v1.PlayerInfoR\aplayers\"\xcd\x01\n" +
	"\n" +
	"PlayerInfo\x12\x16\n" +
	"\x06userId\x18\x01 \x01(\x03R\x06userId\x12\x18\n" +
	"\achairId\x18\x02 \x01(\x05R\achairId\x12\x16\n" +
	"\x06status\x18\x03 \x01(\x05R\x06status\x12\x18\n" +
	"\ahosting\x18\x04 \x01(\bR\ahosting\x12\x18\n" +
	"\aoffline\x18\x05 \x01(\bR\aoffline\x12\x14\n" +
	"\x05cards\x18\x06 \x03(\x05R\x05cards\x12+\n" +
	"\x05canOp\x18\a \x03(\v2\x15.whot.v1.ActionOptionR\x05canOp\"\x9d\x01\n" +
	"\x0fPlayerActionReq\x12\x16\n" +
	"\x06userId\x18\x01 \x01(\x03R\x06userId\x12'\n" +
	"\x06action\x18\x02 \x01(\x0e2\x0f.whot.v1.ACTIONR\x06action\x12\x18\n" +
	"\aoutCard\x18\x03 \x01(\x05R\aoutCard\x12/\n" +
	"\vdeclareSuit\x18\x04 \x01(\x0e2\r.whot.v1.SUITR\vdeclareSuit\"\x92\x03\n" +
	"\x0fPlayerActionRsp\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x16\n" +
	"\x06userId\x18\x03 \x01(\x03R\x06userId\x12\x18\n" +
	"\achairId\x18\x04 \x01(\x05R\achairId\x12'\n" +
	"\x06action\x18\x05 \x01(\x0e2\x0f.whot.v1.ACTIONR\x06action\x12\x18\n" +
	"\aleftNum\x18\x06 \x01(\x05R\aleftNum\x12(\n" +
	"\x06effect\x18\a \x01(\v2\x10.whot.v1.PendingR\x06effect\x127\n" +
	"\n" +
	"playResult\x18\b \x01(\v2\x17.whot.v1.PlayCardResultR\n" +
	"playResult\x127\n" +
	"\n" +
	"drawResult\x18\t \x01(\v2\x17.whot.v1.DrawCardResultR\n" +
	"drawResult\x12@\n" +
	"\rDeclareResult\x18\n" +
	" \x01(\v2\x1a.whot.v1.DeclareSuitResultR\rDeclareResult\"Z\n" +
	"\x0ePlayCardResult\x12\x12\n" +
	"\x04card\x18\x01 \x01(\x05R\x04card\x12\x1e\n" +
	"\n" +
	"totalCards\x18\x02 \x01(\x05R\n" +
	"totalCards\x12\x14\n" +
	"\x05cards\x18\x03 \x03(\x05R\x05cards\"v\n" +
	"\x0eDrawCardResult\x12\x18\n" +
	"\adrawNum\x18\x01 \x01(\x05R\adrawNum\x12\x1e\n" +
	"\n" +
	"totalCards\x18\x02 \x01(\x05R\n" +
	"totalCards\x12\x14\n" +
	"\x05drawn\x18\x03 \x03(\x05R\x05drawn\x12\x14\n" +
	"\x05cards\x18\x04 \x03(\x05R\x05cards\"6\n" +
	"\x11DeclareSuitResult\x12!\n" +
	"\x04suit\x18\x01 \x01(\x0e2\r.whot.v1.SUITR\x04suit\"\xc7\x01\n" +
	"\n" +
	"ActivePush\x12\x14\n" +
	"\x05stage\x18\x01 \x01(\x05R\x05stage\x12\x18\n" +
	"\atimeout\x18\x02 \x01(\x03R\atimeout\x12\x16\n" +
	"\x06active\x18\x03 \x01(\x05R\x06active\x12\x18\n" +
	"\aleftNum\x18\x04 \x01(\x05R\aleftNum\x12*\n" +
	"\apending\x18\x05 \x01(\v2\x10.whot.v1.PendingR\apending\x12+\n" +
	"\x05canOp\x18\x06 \x03(\v2\x15.whot.v1.ActionOptionR\x05canOp\"\x90\x01\n" +
	"\fActionOption\x12'\n" +
	"\x06action\x18\x01 \x01(\x0e2\x0f.whot.v1.ACTIONR\x06action\x12\x14\n" +
	"\x05cards\x18\x02 \x03(\x05R\x05cards\x12\x1c\n" +
	"\tdrawCount\x18\x03 \x01(\x05R\tdrawCount\x12#\n" +
	"\x05suits\x18\x04 \x03(\x0e2\r.whot.v1.SUITR\x05suits\"\x89\x01\n" +
	"\aPending\x12,\n" +
	"\x06effect\x18\x01 \x01(\x0e2\x14.whot.v1.CARD_EFFECTR\x06effect\x12\x1c\n" +
	"\tinitiator\x18\x02 \x01(\x05R\tinitiator\x12\x16\n" +
	"\x06target\x18\x03 \x01(\x05R\x06target\x12\x1a\n" +
	"\bquantity\x18\x04 \x01(\x05R\bquantity\"\x8a\x01\n" +
	"\x12MarketDrawCardPush\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\x03R\x06userID\x12\x18\n" +
	"\achairID\x18\x02 \x01(\x05R\achairID\x12\x12\n" +
	"\x04draw\x18\x03 \x03(\x05R\x04draw\x12\x14\n" +
	"\x05cards\x18\x04 \x03(\x05R\x05cards\x12\x18\n" +
	"\aleftNum\x18\x05 \x01(\x05R\aleftNum\"&\n" +
	"\fLastCardPush\x12\x16\n" +
	"\x06isLast\x18\x01 \x01(\bR\x06isLast\"\x8f\x01\n" +
	"\n" +
	"ResultPush\x124\n" +
	"\n" +
	"finishType\x18\x01 \x01(\x0e2\x14.whot.v1.FINISH_TYPER\n" +
	"finishType\x12\x1a\n" +
	"\bwinnerID\x18\x02 \x01(\x03R\bwinnerID\x12/\n" +
	"\aresults\x18\x03 \x03(\v2\x15.whot.v1.PlayerResultR\aresults\"\xbe\x01\n" +
	"\fPlayerResult\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\x03R\x06userID\x12\x18\n" +
	"\achairID\x18\x02 \x01(\x05R\achairID\x12\x1a\n" +
	"\bisWinner\x18\x03 \x01(\bR\bisWinner\x12\x1a\n" +
	"\bwinScore\x18\x04 \x01(\x01R\bwinScore\x12\x1c\n" +
	"\thandCards\x18\x05 \x03(\x05R\thandCards\x12&\n" +
	"\x0ehandCardsScore\x18\x06 \x01(\x05R\x0ehandCardsScore*\xef\x04\n" +
	"\vGameCommand\x12\v\n" +
	"\aNothing\x10\x00\x12\x0f\n" +
	"\vSayHelloReq\x10\x01\x12\x0f\n" +
	"\vSayHelloRsp\x10\x02\x12\x0f\n" +
	"\n" +
	"OnLoginReq\x10\xe9\a\x12\x0f\n" +
	"\n" +
	"OnLoginRsp\x10\xea\a\x12\x10\n" +
	"\vOnLogoutReq\x10\xeb\a\x12\x10\n" +
	"\vOnLogoutRsp\x10\xec\a\x12\x0f\n" +
	"\n" +
	"OnReadyReq\x10\xed\a\x12\x0f\n" +
	"\n" +
	"OnReadyRsp\x10\xee\a\x12\x15\n" +
	"\x10OnSwitchTableReq\x10\xef\a\x12\x15\n" +
	"\x10OnSwitchTableRsp\x10\xf0\a\x12\x0f\n" +
	"\n" +
	"OnSceneReq\x10\xf1\a\x12\x0f\n" +
	"\n" +
	"OnSceneRsp\x10\xf2\a\x12\x0e\n" +
	"\tOnChatReq\x10\xf3\a\x12\x0e\n" +
	"\tOnChatRsp\x10\xf4\a\x12\x11\n" +
	"\fOnHostingReq\x10\xf5\a\x12\x11\n" +
	"\fOnHostingRsp\x10\xf6\a\x12\x11\n" +
	"\fOnForwardReq\x10\xf7\a\x12\x11\n" +
	"\fOnForwardRsp\x10\xf8\a\x12\x16\n" +
	"\x11OnPlayerActionReq\x10\xcd\b\x12\x16\n" +
	"\x11OnPlayerActionRsp\x10\xce\b\x12\x13\n" +
	"\x0eOnUserInfoPush\x10\xd1\x0f\x12\x16\n" +
	"\x11OnEmojiConfigPush\x10\xd2\x0f\x12\x15\n" +
	"\x10OnPlayerQuitPush\x10\xd3\x0f\x12\x16\n" +
	"\x11OnUserOfflinePush\x10\xd4\x0f\x12\x16\n" +
	"\x11OnMatchResultPush\x10\xb4\x10\x12\x13\n" +
	"\x0eOnSendCardPush\x10\xb5\x10\x12\x11\n" +
	"\fOnActivePush\x10\xb6\x10\x12\x19\n" +
	"\x14OnMarketDrawCardPush\x10\xb7\x10\x12\x13\n" +
	"\x0eOnLastCardPush\x10\xb8\x10\x12\x11\n" +
	"\fOnResultPush\x10\x98\x11*X\n" +
	"\x06ACTION\x12\x0f\n" +
	"\vACTION_NULL\x10\x00\x12\r\n" +
	"\tPLAY_CARD\x10\x01\x12\r\n" +
	"\tDRAW_CARD\x10\x02\x12\x10\n" +
	"\fDECLARE_SUIT\x10\x03\x12\r\n" +
	"\tSKIP_TURN\x10\x04*W\n" +
	"\vCARD_EFFECT\x12\n" +
	"\n" +
	"\x06NORMAL\x10\x00\x12\v\n" +
	"\aHOLD_ON\x10\x01\x12\f\n" +
	"\bPICK_TWO\x10\x02\x12\v\n" +
	"\aSUSPEND\x10\x03\x12\n" +
	"\n" +
	"\x06MARKET\x10\x04\x12\b\n" +
	"\x04WHOT\x10\x05*>\n" +
	"\vFINISH_TYPE\x12\b\n" +
	"\x04NONE\x10\x00\x12\x15\n" +
	"\x11PLAYER_HAND_EMPTY\x10\x01\x12\x0e\n" +
	"\n" +
	"DECK_EMPTY\x10\x02*^\n" +
	"\x04SUIT\x12\v\n" +
	"\aINVALID\x10\x00\x12\n" +
	"\n" +
	"\x06CIRCLE\x10\x01\x12\f\n" +
	"\bTRIANGLE\x10\x02\x12\t\n" +
	"\x05CROSS\x10\x03\x12\n" +
	"\n" +
	"\x06SQUARE\x10\x04\x12\t\n" +
	"\x05START\x10\x05\x12\r\n" +
	"\tSUIT_WHOT\x10\x062\xf6\x06\n" +
	"\x04Whot\x12O\n" +
	"\vSayHelloReq\x12\x15.whot.v1.HelloRequest\x1a\x13.whot.v1.HelloReply\"\x14\x82\xd3\xe4\x93\x02\x0e\x12\f/whot/{name}\x12O\n" +
	"\n" +
	"OnLoginReq\x12\x11.whot.v1.LoginReq\x1a\x11.whot.v1.LoginRsp\"\x1b\x82\xd3\xe4\x93\x02\x15:\x01*\"\x10/whot/OnLoginReq\x12S\n" +
	"\vOnLogoutReq\x12\x12.whot.v1.LogoutReq\x1a\x12.whot.v1.LogoutRsp\"\x1c\x82\xd3\xe4\x93\x02\x16:\x01*\"\x11/whot/OnLogoutReq\x12O\n" +
	"\n" +
	"OnReadyReq\x12\x11.whot.v1.ReadyReq\x1a\x11.whot.v1.ReadyRsp\"\x1b\x82\xd3\xe4\x93\x02\x15:\x01*\"\x10/whot/OnReadyReq\x12g\n" +
	"\x10OnSwitchTableReq\x12\x17.whot.v1.SwitchTableReq\x1a\x17.whot.v1.SwitchTableRsp\"!\x82\xd3\xe4\x93\x02\x1b:\x01*\"\x16/whot/OnSwitchTableReq\x12O\n" +
	"\n" +
	"OnSceneReq\x12\x11.whot.v1.SceneReq\x1a\x11.whot.v1.SceneRsp\"\x1b\x82\xd3\xe4\x93\x02\x15:\x01*\"\x10/whot/OnSceneReq\x12Q\n" +
	"\tOnChatReq\x12\x10.whot.v1.ChatReq\x1a\x10.whot.v1.ChatRsp\" \x82\xd3\xe4\x93\x02\x1a:\x01*\"\x15/whot/OnChatOrFaceReq\x12W\n" +
	"\fOnHostingReq\x12\x13.whot.v1.HostingReq\x1a\x13.whot.v1.HostingRsp\"\x1d\x82\xd3\xe4\x93\x02\x17:\x01*\"\x12/whot/OnHostingReq\x12W\n" +
	"\fOnForwardReq\x12\x13.whot.v1.ForwardReq\x1a\x13.whot.v1.ForwardRsp\"\x1d\x82\xd3\xe4\x93\x02\x17:\x01*\"\x12/whot/OnForwardReq\x12g\n" +
	"\x11OnPlayerActionReq\x12\x18.whot.v1.PlayerActionReq\x1a\x18.whot.v1.PlayerActionRsp\"\x1e\x82\xd3\xe4\x93\x02\x18:\x01*\"\x13/whot/OnPlayCardReqB\x1bZ\x19whot/api/helloworld/v1;v1b\x06proto3"

var (
	file_helloworld_v1_api_proto_rawDescOnce sync.Once
	file_helloworld_v1_api_proto_rawDescData []byte
)

func file_helloworld_v1_api_proto_rawDescGZIP() []byte {
	file_helloworld_v1_api_proto_rawDescOnce.Do(func() {
		file_helloworld_v1_api_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_helloworld_v1_api_proto_rawDesc), len(file_helloworld_v1_api_proto_rawDesc)))
	})
	return file_helloworld_v1_api_proto_rawDescData
}

var file_helloworld_v1_api_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_helloworld_v1_api_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_helloworld_v1_api_proto_goTypes = []any{
	(GameCommand)(0),           // 0: whot.v1.GameCommand
	(ACTION)(0),                // 1: whot.v1.ACTION
	(CARD_EFFECT)(0),           // 2: whot.v1.CARD_EFFECT
	(FINISH_TYPE)(0),           // 3: whot.v1.FINISH_TYPE
	(SUIT)(0),                  // 4: whot.v1.SUIT
	(*HelloRequest)(nil),       // 5: whot.v1.HelloRequest
	(*HelloReply)(nil),         // 6: whot.v1.HelloReply
	(*LoginReq)(nil),           // 7: whot.v1.LoginReq
	(*LoginRsp)(nil),           // 8: whot.v1.LoginRsp
	(*LogoutReq)(nil),          // 9: whot.v1.LogoutReq
	(*LogoutRsp)(nil),          // 10: whot.v1.LogoutRsp
	(*ReadyReq)(nil),           // 11: whot.v1.ReadyReq
	(*ReadyRsp)(nil),           // 12: whot.v1.ReadyRsp
	(*SwitchTableReq)(nil),     // 13: whot.v1.SwitchTableReq
	(*SwitchTableRsp)(nil),     // 14: whot.v1.SwitchTableRsp
	(*ChatReq)(nil),            // 15: whot.v1.ChatReq
	(*ChatRsp)(nil),            // 16: whot.v1.ChatRsp
	(*ForwardReq)(nil),         // 17: whot.v1.ForwardReq
	(*ForwardRsp)(nil),         // 18: whot.v1.ForwardRsp
	(*HostingReq)(nil),         // 19: whot.v1.HostingReq
	(*HostingRsp)(nil),         // 20: whot.v1.HostingRsp
	(*UserInfoPush)(nil),       // 21: whot.v1.UserInfoPush
	(*PlayerQuitPush)(nil),     // 22: whot.v1.PlayerQuitPush
	(*UserOfflinePush)(nil),    // 23: whot.v1.UserOfflinePush
	(*MatchResultPush)(nil),    // 24: whot.v1.MatchResultPush
	(*SendCardPush)(nil),       // 25: whot.v1.SendCardPush
	(*SceneReq)(nil),           // 26: whot.v1.SceneReq
	(*SceneRsp)(nil),           // 27: whot.v1.SceneRsp
	(*PlayerInfo)(nil),         // 28: whot.v1.PlayerInfo
	(*PlayerActionReq)(nil),    // 29: whot.v1.PlayerActionReq
	(*PlayerActionRsp)(nil),    // 30: whot.v1.PlayerActionRsp
	(*PlayCardResult)(nil),     // 31: whot.v1.PlayCardResult
	(*DrawCardResult)(nil),     // 32: whot.v1.DrawCardResult
	(*DeclareSuitResult)(nil),  // 33: whot.v1.DeclareSuitResult
	(*ActivePush)(nil),         // 34: whot.v1.ActivePush
	(*ActionOption)(nil),       // 35: whot.v1.ActionOption
	(*Pending)(nil),            // 36: whot.v1.Pending
	(*MarketDrawCardPush)(nil), // 37: whot.v1.MarketDrawCardPush
	(*LastCardPush)(nil),       // 38: whot.v1.LastCardPush
	(*ResultPush)(nil),         // 39: whot.v1.ResultPush
	(*PlayerResult)(nil),       // 40: whot.v1.PlayerResult
}
var file_helloworld_v1_api_proto_depIdxs = []int32{
	4,  // 0: whot.v1.SceneRsp.declareSuit:type_name -> whot.v1.SUIT
	36, // 1: whot.v1.SceneRsp.pending:type_name -> whot.v1.Pending
	28, // 2: whot.v1.SceneRsp.players:type_name -> whot.v1.PlayerInfo
	35, // 3: whot.v1.PlayerInfo.canOp:type_name -> whot.v1.ActionOption
	1,  // 4: whot.v1.PlayerActionReq.action:type_name -> whot.v1.ACTION
	4,  // 5: whot.v1.PlayerActionReq.declareSuit:type_name -> whot.v1.SUIT
	1,  // 6: whot.v1.PlayerActionRsp.action:type_name -> whot.v1.ACTION
	36, // 7: whot.v1.PlayerActionRsp.effect:type_name -> whot.v1.Pending
	31, // 8: whot.v1.PlayerActionRsp.playResult:type_name -> whot.v1.PlayCardResult
	32, // 9: whot.v1.PlayerActionRsp.drawResult:type_name -> whot.v1.DrawCardResult
	33, // 10: whot.v1.PlayerActionRsp.DeclareResult:type_name -> whot.v1.DeclareSuitResult
	4,  // 11: whot.v1.DeclareSuitResult.suit:type_name -> whot.v1.SUIT
	36, // 12: whot.v1.ActivePush.pending:type_name -> whot.v1.Pending
	35, // 13: whot.v1.ActivePush.canOp:type_name -> whot.v1.ActionOption
	1,  // 14: whot.v1.ActionOption.action:type_name -> whot.v1.ACTION
	4,  // 15: whot.v1.ActionOption.suits:type_name -> whot.v1.SUIT
	2,  // 16: whot.v1.Pending.effect:type_name -> whot.v1.CARD_EFFECT
	3,  // 17: whot.v1.ResultPush.finishType:type_name -> whot.v1.FINISH_TYPE
	40, // 18: whot.v1.ResultPush.results:type_name -> whot.v1.PlayerResult
	5,  // 19: whot.v1.Whot.SayHelloReq:input_type -> whot.v1.HelloRequest
	7,  // 20: whot.v1.Whot.OnLoginReq:input_type -> whot.v1.LoginReq
	9,  // 21: whot.v1.Whot.OnLogoutReq:input_type -> whot.v1.LogoutReq
	11, // 22: whot.v1.Whot.OnReadyReq:input_type -> whot.v1.ReadyReq
	13, // 23: whot.v1.Whot.OnSwitchTableReq:input_type -> whot.v1.SwitchTableReq
	26, // 24: whot.v1.Whot.OnSceneReq:input_type -> whot.v1.SceneReq
	15, // 25: whot.v1.Whot.OnChatReq:input_type -> whot.v1.ChatReq
	19, // 26: whot.v1.Whot.OnHostingReq:input_type -> whot.v1.HostingReq
	17, // 27: whot.v1.Whot.OnForwardReq:input_type -> whot.v1.ForwardReq
	29, // 28: whot.v1.Whot.OnPlayerActionReq:input_type -> whot.v1.PlayerActionReq
	6,  // 29: whot.v1.Whot.SayHelloReq:output_type -> whot.v1.HelloReply
	8,  // 30: whot.v1.Whot.OnLoginReq:output_type -> whot.v1.LoginRsp
	10, // 31: whot.v1.Whot.OnLogoutReq:output_type -> whot.v1.LogoutRsp
	12, // 32: whot.v1.Whot.OnReadyReq:output_type -> whot.v1.ReadyRsp
	14, // 33: whot.v1.Whot.OnSwitchTableReq:output_type -> whot.v1.SwitchTableRsp
	27, // 34: whot.v1.Whot.OnSceneReq:output_type -> whot.v1.SceneRsp
	16, // 35: whot.v1.Whot.OnChatReq:output_type -> whot.v1.ChatRsp
	20, // 36: whot.v1.Whot.OnHostingReq:output_type -> whot.v1.HostingRsp
	18, // 37: whot.v1.Whot.OnForwardReq:output_type -> whot.v1.ForwardRsp
	30, // 38: whot.v1.Whot.OnPlayerActionReq:output_type -> whot.v1.PlayerActionRsp
	29, // [29:39] is the sub-list for method output_type
	19, // [19:29] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_helloworld_v1_api_proto_init() }
func file_helloworld_v1_api_proto_init() {
	if File_helloworld_v1_api_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_helloworld_v1_api_proto_rawDesc), len(file_helloworld_v1_api_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_helloworld_v1_api_proto_goTypes,
		DependencyIndexes: file_helloworld_v1_api_proto_depIdxs,
		EnumInfos:         file_helloworld_v1_api_proto_enumTypes,
		MessageInfos:      file_helloworld_v1_api_proto_msgTypes,
	}.Build()
	File_helloworld_v1_api_proto = out.File
	file_helloworld_v1_api_proto_goTypes = nil
	file_helloworld_v1_api_proto_depIdxs = nil
}
