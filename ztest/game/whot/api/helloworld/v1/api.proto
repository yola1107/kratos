syntax = "proto3";

package whot.v1;

import "google/api/annotations.proto";

option go_package = "whot/api/helloworld/v1;v1";

enum GameCommand {
    Nothing     = 0;  //
    SayHelloReq = 1;  //
    SayHelloRsp = 2;

    // request
    OnLoginReq       = 1001;  //登录
    OnLoginRsp       = 1002;
    OnLogoutReq      = 1003;  //登出
    OnLogoutRsp      = 1004;
    OnReadyReq       = 1005;  //准备
    OnReadyRsp       = 1006;
    OnSwitchTableReq = 1007;  //换桌
    OnSwitchTableRsp = 1008;
    OnSceneReq       = 1009;  //场景信息
    OnSceneRsp       = 1010;
    OnChatReq        = 1011;  //聊天
    OnChatRsp        = 1012;
    OnHostingReq     = 1013;  //托管
    OnHostingRsp     = 1014;
    OnForwardReq     = 1015;  //转发
    OnForwardRsp     = 1016;

    // game request
    OnPlayCardReq = 1101;
    OnPlayCardRsp = 1102;

    // push
    OnUserInfoPush    = 2001;  //玩家信息
    OnEmojiConfigPush = 2002;  //表情道具配置
    OnPlayerQuitPush  = 2003;  //玩家退出
    OnUserOfflinePush = 2004;  //用户断线通知

    // game push
    OnSetBankerPush = 2100;  //庄家通知
    OnSendCardPush  = 2101;  //发牌通知
    OnActivePush    = 2102;  //活动玩家通知
    OnResultPush    = 2200;  //结算通知
}

// The whot service definition.
service Whot {
    // Sends a greeting
    rpc SayHelloReq(HelloRequest) returns (HelloReply) {
        option (google.api.http) = {
            get: "/whot/{name}"
        };
    }

    rpc OnLoginReq(LoginReq) returns (LoginRsp) {
        option (google.api.http) = {
            post: "/whot/OnLoginReq",
            body: "*"
        };
    }
    rpc OnLogoutReq(LogoutReq) returns (LogoutRsp) {
        option (google.api.http) = {
            post: "/whot/OnLogoutReq",
            body: "*"
        };
    }
    rpc OnReadyReq(ReadyReq) returns (ReadyRsp) {
        option (google.api.http) = {
            post: "/whot/OnReadyReq",
            body: "*"
        };
    }
    rpc OnSwitchTableReq(SwitchTableReq) returns (SwitchTableRsp) {
        option (google.api.http) = {
            post: "/whot/OnSwitchTableReq",
            body: "*"
        };
    }
    rpc OnSceneReq(SceneReq) returns (SceneRsp) {
        option (google.api.http) = {
            post: "/whot/OnSceneReq",
            body: "*"
        };
    }
    rpc OnChatReq(ChatReq) returns (ChatRsp) {
        option (google.api.http) = {
            post: "/whot/OnChatOrFaceReq",
            body: "*"
        };
    }
    rpc OnHostingReq(HostingReq) returns (HostingRsp) {
        option (google.api.http) = {
            post: "/whot/OnHostingReq",
            body: "*"
        };
    }
    rpc OnForwardReq(ForwardReq) returns (ForwardRsp) {
        option (google.api.http) = {
            post: "/whot/OnForwardReq",
            body: "*"
        };
    }
    // game request
    rpc OnPlayCardReq(PlayCardReq) returns (PlayCardRsp) {
        option (google.api.http) = {
            post: "/whot/OnPlayCardReq",
            body: "*"
        };
    }
}

message HelloRequest {
    string name = 1;
}
message HelloReply {
    string message = 1;
}

// 登录
message LoginReq {
    int64 userID  = 1;  //ID
    string token  = 2;  //token
    int32 type    = 3;  //0:创建，1：加入 2:快速加入
    int32 tableID = 4;  //桌子号
    int32 chairID = 5;  //椅子号
}

message LoginRsp {
    int32 code    = 1;  //错误码
    string msg    = 2;  //错误信息
    int64 userID  = 3;  //ID
    int32 tableID = 4;
    int32 chairID = 5;
    int32 arenaID = 6;
}

// 登出
message LogoutReq {
    int64 userDBID = 1;
}

message LogoutRsp {
    int32 code   = 1;  //错误码 0:成功
    string msg   = 2;  //错误信息 主动/踢人
    int64 UserID = 3;
}

// 准备
message ReadyReq {
    int64 userID = 1;
    bool isReady = 2;
}

message ReadyRsp {
    int64 userID = 1;
    bool isReady = 2;
}

// 换桌
message SwitchTableReq {
    int64 userID  = 1;
    int32 chairID = 2;
}

message SwitchTableRsp {
    int32 code   = 1;
    string msg   = 2;
    int64 userID = 3;
}

// 聊天/表情
message ChatReq {
    int32 userID = 1;  //玩家ID
    int32 opType = 2;  //0表情 1快捷文字 2自定义文字
    int32 faceID = 3;  //表情or聊天ID
    string msg   = 4;  //聊天信息
}

message ChatRsp {
    int32 userID = 1;  //玩家ID
    int32 opType = 2;  //0表情 1快捷文字 2自定义文字
    int32 faceID = 3;  //表情or聊天ID
    string msg   = 4;  //聊天信息
}

// 转发
message ForwardReq {
    int32 type = 1;
    string msg = 2;
}

message ForwardRsp {
    int32 type = 1;
    string msg = 2;
}

// 托管
message HostingReq {
    bool isHosting = 1;  // true 托管； false 取消托管
}

message HostingRsp {
    int32 chairID   = 1;  //座位号
    int32 status    = 2;  //1:正常  2:托管
    int32 aiNum     = 3;  //玩家（非断线）超时引起的当前局的托管次数
    int32 playTimes = 4;  //操作时间
}

// 玩家信息推送
message UserInfoPush {
    int64 userID     = 1;  //用户ID
    int32 chairID    = 2;  //椅子号
    string userName  = 3;  //用户名字
    double money     = 4;  //玩家金币
    string avatar    = 5;  // 头像
    string avatarUrl = 6;  // 头像
    int32 vip        = 7;  //用户vip
    int32 status     = 8;  //用户状态，符合原Frame的用户状态 0:free 1:sit(noReady) 2:ready 3:gaming
    string ip        = 9;  //ip地址
}

// 玩家退出推送
message PlayerQuitPush {
    int64 userID  = 1;  //玩家ID
    int32 chairID = 2;  //椅子号
}

// 用户断线推送
message UserOfflinePush {
    int64 userID   = 1;  //用户ID
    bool isOffline = 2;  //用户离线状态
}

// ---------------------------------------------
/*

	  游戏协议
*/


// 玩家动作类型
enum Action {
    ACTION_UNKNOWN = 0;  // 未知动作
    ACTION_PLAY    = 1;  // 出牌
    ACTION_DRAW    = 2;  // 摸牌
}

// 特效类型
enum Effect {
    EFFECT_NONE     = 0;  // 无特效
    EFFECT_HOLD_ON  = 1;  // 1牌特效：立即再次出牌
    EFFECT_PICK_TWO = 2;  // 2牌特效：下家抽两张牌并跳过回合
    EFFECT_SUSPEND  = 3;  // 8牌特效：跳过下家
    EFFECT_MARKET   = 4;  // 14牌特效：所有其他玩家各抽一张
    EFFECT_WHOT     = 5;  // 20牌特效：万能牌 (可终止2/8牌反击)
}

// 游戏结束类型
enum FinishType {
    FINISH_NONE   = 0;  // 未结束
    FINISH_NORMAL = 1;  // 玩家出完牌
    FINISH_DECK   = 2;  // 牌堆剩余牌为0
}

// 设置庄家推送
message SetBankerPush {
    int32 chairID = 1;  // 庄家chairID
}

// 发牌推送
message SendCardPush {
    int64 userID          = 1;  // 用户ID
    repeated int32 cards  = 2;  // 发给玩家的牌（格式：花色*100 + 牌值）
    repeated int32 bottom = 3;  // 底牌
    int32 leftNum         = 4;  // 剩余牌数
}

// 场景请求/响应
message SceneReq {
    int64 userID = 1;  // 用户ID
}

message SceneRsp {
    double baseScore              = 1;   // 基础分
    int32 stage                   = 2;   // 游戏状态
    int64 timeout                 = 3;   // 剩余时间(秒)
    int32 activeChairID           = 4;   // 当前操作位置
    int32 banker                  = 5;   // 庄家位置
    int32 lastCard                = 6;   // 最后出的牌（格式：花色*100 + 牌值）
    repeated PlayerScene players  = 11;  // 玩家列表
    int32 currentSuit             = 12;  // 当前花色
    PendingAction actionPending   = 13;  // 待处理动作
    int32 leftNum                 = 14;  // 剩余牌数

    repeated Action allowedActions = 15;  // 允许的操作类型
    repeated int32 allowedCards    = 16;  // 当前允许出的牌
    bool requireCounter            = 17;  // 当前是否需要2/8牌反击
}

// 玩家场景信息
message PlayerScene {
    int64 userID         = 1;   // 用户ID
    int32 chairID        = 2;   // 椅子号
    int32 status         = 3;   // 玩家状态
    bool hosting         = 4;   // 是否托管
    bool offline         = 5;   // 是否断线
    Action lastAction    = 6;   // 最后操作
    repeated int32 cards = 8;   // 手牌列表（格式：花色*100 + 牌值）
    bool declareLast     = 9;   // 是否宣告最后一张牌
    bool suspended       = 10;  // 当前回合是否被跳过
}

// 激活推送（轮到操作）
message ActivePush {
    int32 stage                  = 1;  // 游戏状态
    int64 timeout                = 2;  // 剩余时间
    int32 activeChairID          = 3;  // 当前操作位置
    int32 leftNum                = 4;  // 剩余牌数
    bool yourTurn                = 5;  // 是否轮到当前玩家
    repeated Action allowedActions = 6;  // 允许的操作类型
    PendingAction actionPending  = 7;  // 待处理动作
    bool requireCounter          = 8;  // 当前是否需要2/8牌反击
}

// 玩家操作请求
message PlayerActionReq {
    int64 userID = 1;
    Action action = 2;

    oneof actionParams {
        PlayCardParams playCard = 3;
        DrawCardParams drawCard = 4;
        DeclareLastParams declareLast = 5;
    }
}

// 出牌参数
message PlayCardParams {
    int32 card = 1;           // 出的牌（格式：花色*100 + 牌值）
    optional int32 suit = 2;  // 仅当出万能牌时需声明花色
}

// 摸牌参数
message DrawCardParams {
    int32 count = 1;          // 摸牌数量（通常为1，连锁反应时可能>1）
}

// 宣告最后一张牌参数
message DeclareLastParams {
    bool isLast = 1;          // 宣告/取消宣告最后一张
}

// 玩家操作响应
message PlayCardRsp {
    int32 code                  = 1;   // 返回码
    string msg                  = 2;   // 错误信息
    int64 userID                = 3;   // 用户ID
    int32 chairID               = 4;   // 椅子号
    Action action               = 5;   // 请求的动作
    int32 outCard               = 6;   // 出的牌
    Effect effectPending        = 7;   // 触发的特效类型
    PendingAction actionPending = 8;   // 待处理动作
    int32 leftNum               = 9;   // 剩余牌数
    FinishType finishType       = 10;  // 结束类型
    int32 newSuit               = 11;  // 新花色（仅WHOT时声明）
}

// 摸牌推送
message DrawCardPush {
    int64 userID         = 1;  // 用户ID
    int32 chairID        = 2;  // 椅子号
    repeated int32 draw  = 3;  // 摸到的牌
    repeated int32 cards = 4;  // 最后手牌
    int32 leftNum        = 5;  // 剩余牌数
}

// 特效待处理动作
message PendingAction {
    Effect effect   = 1;  // 特效类型
    int32 target    = 2;  // 目标玩家索引
    int32 quantity  = 3;  // 数量（用于2/5牌连锁）
    int32 initiator = 4;  // 发起者索引
    int32 cardValue = 5;  // 触发特效的牌值（用于反击验证）
    int32 suit      = 6;  // 当前花色（WHOT牌后必需）
}

// 游戏结果推送
message ResultPush {
    FinishType finishType         = 1;  // 结束类型
    repeated PlayerResult results = 2;  // 所有玩家结果
}

// 玩家结算信息
message PlayerResult {
    int64 userID         = 1;  // 用户ID
    int32 chairID        = 2;  // 椅子号
    bool isWinner        = 3;  // 是否获胜
    int32 score          = 4;  // 玩家得分
    repeated int32 cards = 5;  // 剩余手牌
}
