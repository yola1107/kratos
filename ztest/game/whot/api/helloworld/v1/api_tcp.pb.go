// Code generated by protoc-gen-go-tcp. DO NOT EDIT.
// versions:
// - protoc-gen-go-tcp v2.8.6
// - protoc            v3.6.1
// source: helloworld/v1/api.proto

package v1

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
import (
	"context"

	"github.com/yola1107/kratos/v2/library/work"
	"github.com/yola1107/kratos/v2/transport/tcp"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
)

// WhotTCPServer is the server API for Whot service.
type WhotTCPServer interface {
	GetTCPLoop() work.ITaskLoop
	SetCometChan(cl *tcp.ChanList, cs *tcp.Server)
	SayHelloReq(context.Context, *HelloRequest) (*HelloReply, error)
	OnLoginReq(context.Context, *LoginReq) (*LoginRsp, error)
	OnLogoutReq(context.Context, *LogoutReq) (*LogoutRsp, error)
	OnReadyReq(context.Context, *ReadyReq) (*ReadyRsp, error)
	OnSwitchTableReq(context.Context, *SwitchTableReq) (*SwitchTableRsp, error)
	OnSceneReq(context.Context, *SceneReq) (*SceneRsp, error)
	OnChatReq(context.Context, *ChatReq) (*ChatRsp, error)
	OnHostingReq(context.Context, *HostingReq) (*HostingRsp, error)
	OnForwardReq(context.Context, *ForwardReq) (*ForwardRsp, error)
	OnPlayerActionReq(context.Context, *PlayerActionReq) (*PlayerActionRsp, error)
}

func RegisterWhotTCPServer(s *tcp.Server, srv WhotTCPServer) {
	chanList := s.RegisterService(&Whot_TCP_ServiceDesc, srv)
	srv.SetCometChan(chanList, s)
}

func _Whot_SayHelloReq_TCP_Handler(srv interface{}, ctx context.Context, data []byte, interceptor tcp.UnaryServerInterceptor) ([]byte, error) {
	in := new(HelloRequest)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	doFunc := func(ctx context.Context, req *HelloRequest) ([]byte, error) {
		doRequest := func() ([]byte, error) {
			resp, err := srv.(WhotTCPServer).SayHelloReq(ctx, req)
			if err != nil || resp == nil {
				return nil, err
			}
			return proto.Marshal(resp)
		}
		if loop := srv.(WhotTCPServer).GetTCPLoop(); loop != nil {
			return loop.PostAndWaitCtx(ctx, doRequest)
		}
		return doRequest()
	}
	if interceptor == nil {
		return doFunc(ctx, in)
	}
	info := &tcp.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whot.v1.Whot/SayHelloReq",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		r, ok := req.(*HelloRequest)
		if !ok {
			return nil, status.Errorf(codes.InvalidArgument, "Invalid Request Argument, expect: *HelloRequest, Not: %T", req)
		}
		return doFunc(ctx, r)
	}
	return interceptor(ctx, in, info, handler)
}

func _Whot_OnLoginReq_TCP_Handler(srv interface{}, ctx context.Context, data []byte, interceptor tcp.UnaryServerInterceptor) ([]byte, error) {
	in := new(LoginReq)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	doFunc := func(ctx context.Context, req *LoginReq) ([]byte, error) {
		doRequest := func() ([]byte, error) {
			resp, err := srv.(WhotTCPServer).OnLoginReq(ctx, req)
			if err != nil || resp == nil {
				return nil, err
			}
			return proto.Marshal(resp)
		}
		if loop := srv.(WhotTCPServer).GetTCPLoop(); loop != nil {
			return loop.PostAndWaitCtx(ctx, doRequest)
		}
		return doRequest()
	}
	if interceptor == nil {
		return doFunc(ctx, in)
	}
	info := &tcp.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whot.v1.Whot/OnLoginReq",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		r, ok := req.(*LoginReq)
		if !ok {
			return nil, status.Errorf(codes.InvalidArgument, "Invalid Request Argument, expect: *LoginReq, Not: %T", req)
		}
		return doFunc(ctx, r)
	}
	return interceptor(ctx, in, info, handler)
}

func _Whot_OnLogoutReq_TCP_Handler(srv interface{}, ctx context.Context, data []byte, interceptor tcp.UnaryServerInterceptor) ([]byte, error) {
	in := new(LogoutReq)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	doFunc := func(ctx context.Context, req *LogoutReq) ([]byte, error) {
		doRequest := func() ([]byte, error) {
			resp, err := srv.(WhotTCPServer).OnLogoutReq(ctx, req)
			if err != nil || resp == nil {
				return nil, err
			}
			return proto.Marshal(resp)
		}
		if loop := srv.(WhotTCPServer).GetTCPLoop(); loop != nil {
			return loop.PostAndWaitCtx(ctx, doRequest)
		}
		return doRequest()
	}
	if interceptor == nil {
		return doFunc(ctx, in)
	}
	info := &tcp.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whot.v1.Whot/OnLogoutReq",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		r, ok := req.(*LogoutReq)
		if !ok {
			return nil, status.Errorf(codes.InvalidArgument, "Invalid Request Argument, expect: *LogoutReq, Not: %T", req)
		}
		return doFunc(ctx, r)
	}
	return interceptor(ctx, in, info, handler)
}

func _Whot_OnReadyReq_TCP_Handler(srv interface{}, ctx context.Context, data []byte, interceptor tcp.UnaryServerInterceptor) ([]byte, error) {
	in := new(ReadyReq)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	doFunc := func(ctx context.Context, req *ReadyReq) ([]byte, error) {
		doRequest := func() ([]byte, error) {
			resp, err := srv.(WhotTCPServer).OnReadyReq(ctx, req)
			if err != nil || resp == nil {
				return nil, err
			}
			return proto.Marshal(resp)
		}
		if loop := srv.(WhotTCPServer).GetTCPLoop(); loop != nil {
			return loop.PostAndWaitCtx(ctx, doRequest)
		}
		return doRequest()
	}
	if interceptor == nil {
		return doFunc(ctx, in)
	}
	info := &tcp.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whot.v1.Whot/OnReadyReq",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		r, ok := req.(*ReadyReq)
		if !ok {
			return nil, status.Errorf(codes.InvalidArgument, "Invalid Request Argument, expect: *ReadyReq, Not: %T", req)
		}
		return doFunc(ctx, r)
	}
	return interceptor(ctx, in, info, handler)
}

func _Whot_OnSwitchTableReq_TCP_Handler(srv interface{}, ctx context.Context, data []byte, interceptor tcp.UnaryServerInterceptor) ([]byte, error) {
	in := new(SwitchTableReq)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	doFunc := func(ctx context.Context, req *SwitchTableReq) ([]byte, error) {
		doRequest := func() ([]byte, error) {
			resp, err := srv.(WhotTCPServer).OnSwitchTableReq(ctx, req)
			if err != nil || resp == nil {
				return nil, err
			}
			return proto.Marshal(resp)
		}
		if loop := srv.(WhotTCPServer).GetTCPLoop(); loop != nil {
			return loop.PostAndWaitCtx(ctx, doRequest)
		}
		return doRequest()
	}
	if interceptor == nil {
		return doFunc(ctx, in)
	}
	info := &tcp.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whot.v1.Whot/OnSwitchTableReq",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		r, ok := req.(*SwitchTableReq)
		if !ok {
			return nil, status.Errorf(codes.InvalidArgument, "Invalid Request Argument, expect: *SwitchTableReq, Not: %T", req)
		}
		return doFunc(ctx, r)
	}
	return interceptor(ctx, in, info, handler)
}

func _Whot_OnSceneReq_TCP_Handler(srv interface{}, ctx context.Context, data []byte, interceptor tcp.UnaryServerInterceptor) ([]byte, error) {
	in := new(SceneReq)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	doFunc := func(ctx context.Context, req *SceneReq) ([]byte, error) {
		doRequest := func() ([]byte, error) {
			resp, err := srv.(WhotTCPServer).OnSceneReq(ctx, req)
			if err != nil || resp == nil {
				return nil, err
			}
			return proto.Marshal(resp)
		}
		if loop := srv.(WhotTCPServer).GetTCPLoop(); loop != nil {
			return loop.PostAndWaitCtx(ctx, doRequest)
		}
		return doRequest()
	}
	if interceptor == nil {
		return doFunc(ctx, in)
	}
	info := &tcp.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whot.v1.Whot/OnSceneReq",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		r, ok := req.(*SceneReq)
		if !ok {
			return nil, status.Errorf(codes.InvalidArgument, "Invalid Request Argument, expect: *SceneReq, Not: %T", req)
		}
		return doFunc(ctx, r)
	}
	return interceptor(ctx, in, info, handler)
}

func _Whot_OnChatReq_TCP_Handler(srv interface{}, ctx context.Context, data []byte, interceptor tcp.UnaryServerInterceptor) ([]byte, error) {
	in := new(ChatReq)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	doFunc := func(ctx context.Context, req *ChatReq) ([]byte, error) {
		doRequest := func() ([]byte, error) {
			resp, err := srv.(WhotTCPServer).OnChatReq(ctx, req)
			if err != nil || resp == nil {
				return nil, err
			}
			return proto.Marshal(resp)
		}
		if loop := srv.(WhotTCPServer).GetTCPLoop(); loop != nil {
			return loop.PostAndWaitCtx(ctx, doRequest)
		}
		return doRequest()
	}
	if interceptor == nil {
		return doFunc(ctx, in)
	}
	info := &tcp.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whot.v1.Whot/OnChatReq",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		r, ok := req.(*ChatReq)
		if !ok {
			return nil, status.Errorf(codes.InvalidArgument, "Invalid Request Argument, expect: *ChatReq, Not: %T", req)
		}
		return doFunc(ctx, r)
	}
	return interceptor(ctx, in, info, handler)
}

func _Whot_OnHostingReq_TCP_Handler(srv interface{}, ctx context.Context, data []byte, interceptor tcp.UnaryServerInterceptor) ([]byte, error) {
	in := new(HostingReq)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	doFunc := func(ctx context.Context, req *HostingReq) ([]byte, error) {
		doRequest := func() ([]byte, error) {
			resp, err := srv.(WhotTCPServer).OnHostingReq(ctx, req)
			if err != nil || resp == nil {
				return nil, err
			}
			return proto.Marshal(resp)
		}
		if loop := srv.(WhotTCPServer).GetTCPLoop(); loop != nil {
			return loop.PostAndWaitCtx(ctx, doRequest)
		}
		return doRequest()
	}
	if interceptor == nil {
		return doFunc(ctx, in)
	}
	info := &tcp.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whot.v1.Whot/OnHostingReq",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		r, ok := req.(*HostingReq)
		if !ok {
			return nil, status.Errorf(codes.InvalidArgument, "Invalid Request Argument, expect: *HostingReq, Not: %T", req)
		}
		return doFunc(ctx, r)
	}
	return interceptor(ctx, in, info, handler)
}

func _Whot_OnForwardReq_TCP_Handler(srv interface{}, ctx context.Context, data []byte, interceptor tcp.UnaryServerInterceptor) ([]byte, error) {
	in := new(ForwardReq)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	doFunc := func(ctx context.Context, req *ForwardReq) ([]byte, error) {
		doRequest := func() ([]byte, error) {
			resp, err := srv.(WhotTCPServer).OnForwardReq(ctx, req)
			if err != nil || resp == nil {
				return nil, err
			}
			return proto.Marshal(resp)
		}
		if loop := srv.(WhotTCPServer).GetTCPLoop(); loop != nil {
			return loop.PostAndWaitCtx(ctx, doRequest)
		}
		return doRequest()
	}
	if interceptor == nil {
		return doFunc(ctx, in)
	}
	info := &tcp.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whot.v1.Whot/OnForwardReq",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		r, ok := req.(*ForwardReq)
		if !ok {
			return nil, status.Errorf(codes.InvalidArgument, "Invalid Request Argument, expect: *ForwardReq, Not: %T", req)
		}
		return doFunc(ctx, r)
	}
	return interceptor(ctx, in, info, handler)
}

func _Whot_OnPlayerActionReq_TCP_Handler(srv interface{}, ctx context.Context, data []byte, interceptor tcp.UnaryServerInterceptor) ([]byte, error) {
	in := new(PlayerActionReq)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	doFunc := func(ctx context.Context, req *PlayerActionReq) ([]byte, error) {
		doRequest := func() ([]byte, error) {
			resp, err := srv.(WhotTCPServer).OnPlayerActionReq(ctx, req)
			if err != nil || resp == nil {
				return nil, err
			}
			return proto.Marshal(resp)
		}
		if loop := srv.(WhotTCPServer).GetTCPLoop(); loop != nil {
			return loop.PostAndWaitCtx(ctx, doRequest)
		}
		return doRequest()
	}
	if interceptor == nil {
		return doFunc(ctx, in)
	}
	info := &tcp.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/whot.v1.Whot/OnPlayerActionReq",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		r, ok := req.(*PlayerActionReq)
		if !ok {
			return nil, status.Errorf(codes.InvalidArgument, "Invalid Request Argument, expect: *PlayerActionReq, Not: %T", req)
		}
		return doFunc(ctx, r)
	}
	return interceptor(ctx, in, info, handler)
}

var Whot_TCP_ServiceDesc = tcp.ServiceDesc{
	ServiceName: "whot.v1.Whot",
	HandlerType: (*WhotTCPServer)(nil),
	Methods: []tcp.MethodDesc{
		{
			MethodName: "SayHelloReq",
			Handler:    _Whot_SayHelloReq_TCP_Handler,
			Ops:        1,
		},
		{
			MethodName: "OnLoginReq",
			Handler:    _Whot_OnLoginReq_TCP_Handler,
			Ops:        1001,
		},
		{
			MethodName: "OnLogoutReq",
			Handler:    _Whot_OnLogoutReq_TCP_Handler,
			Ops:        1003,
		},
		{
			MethodName: "OnReadyReq",
			Handler:    _Whot_OnReadyReq_TCP_Handler,
			Ops:        1005,
		},
		{
			MethodName: "OnSwitchTableReq",
			Handler:    _Whot_OnSwitchTableReq_TCP_Handler,
			Ops:        1007,
		},
		{
			MethodName: "OnSceneReq",
			Handler:    _Whot_OnSceneReq_TCP_Handler,
			Ops:        1009,
		},
		{
			MethodName: "OnChatReq",
			Handler:    _Whot_OnChatReq_TCP_Handler,
			Ops:        1011,
		},
		{
			MethodName: "OnHostingReq",
			Handler:    _Whot_OnHostingReq_TCP_Handler,
			Ops:        1013,
		},
		{
			MethodName: "OnForwardReq",
			Handler:    _Whot_OnForwardReq_TCP_Handler,
			Ops:        1015,
		},
		{
			MethodName: "OnPlayerActionReq",
			Handler:    _Whot_OnPlayerActionReq_TCP_Handler,
			Ops:        1101,
		},
	},
}
