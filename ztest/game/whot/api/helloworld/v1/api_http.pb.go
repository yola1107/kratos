// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.6
// - protoc             v3.6.1
// source: helloworld/v1/api.proto

package v1

import (
	context "context"
	http "github.com/yola1107/kratos/v2/transport/http"
	binding "github.com/yola1107/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationWhotOnChatReq = "/whot.v1.Whot/OnChatReq"
const OperationWhotOnForwardReq = "/whot.v1.Whot/OnForwardReq"
const OperationWhotOnHostingReq = "/whot.v1.Whot/OnHostingReq"
const OperationWhotOnLoginReq = "/whot.v1.Whot/OnLoginReq"
const OperationWhotOnLogoutReq = "/whot.v1.Whot/OnLogoutReq"
const OperationWhotOnPlayerActionReq = "/whot.v1.Whot/OnPlayerActionReq"
const OperationWhotOnReadyReq = "/whot.v1.Whot/OnReadyReq"
const OperationWhotOnSceneReq = "/whot.v1.Whot/OnSceneReq"
const OperationWhotOnSwitchTableReq = "/whot.v1.Whot/OnSwitchTableReq"
const OperationWhotSayHelloReq = "/whot.v1.Whot/SayHelloReq"

type WhotHTTPServer interface {
	OnChatReq(context.Context, *ChatReq) (*ChatRsp, error)
	OnForwardReq(context.Context, *ForwardReq) (*ForwardRsp, error)
	OnHostingReq(context.Context, *HostingReq) (*HostingRsp, error)
	OnLoginReq(context.Context, *LoginReq) (*LoginRsp, error)
	OnLogoutReq(context.Context, *LogoutReq) (*LogoutRsp, error)
	// OnPlayerActionReq game request
	OnPlayerActionReq(context.Context, *PlayerActionReq) (*PlayerActionRsp, error)
	OnReadyReq(context.Context, *ReadyReq) (*ReadyRsp, error)
	OnSceneReq(context.Context, *SceneReq) (*SceneRsp, error)
	OnSwitchTableReq(context.Context, *SwitchTableReq) (*SwitchTableRsp, error)
	// SayHelloReq Sends a greeting
	SayHelloReq(context.Context, *HelloRequest) (*HelloReply, error)
}

func RegisterWhotHTTPServer(s *http.Server, srv WhotHTTPServer) {
	r := s.Route("/")
	r.GET("/whot/{name}", _Whot_SayHelloReq0_HTTP_Handler(srv))
	r.POST("/whot/OnLoginReq", _Whot_OnLoginReq0_HTTP_Handler(srv))
	r.POST("/whot/OnLogoutReq", _Whot_OnLogoutReq0_HTTP_Handler(srv))
	r.POST("/whot/OnReadyReq", _Whot_OnReadyReq0_HTTP_Handler(srv))
	r.POST("/whot/OnSwitchTableReq", _Whot_OnSwitchTableReq0_HTTP_Handler(srv))
	r.POST("/whot/OnSceneReq", _Whot_OnSceneReq0_HTTP_Handler(srv))
	r.POST("/whot/OnChatOrFaceReq", _Whot_OnChatReq0_HTTP_Handler(srv))
	r.POST("/whot/OnHostingReq", _Whot_OnHostingReq0_HTTP_Handler(srv))
	r.POST("/whot/OnForwardReq", _Whot_OnForwardReq0_HTTP_Handler(srv))
	r.POST("/whot/OnPlayCardReq", _Whot_OnPlayerActionReq0_HTTP_Handler(srv))
}

func _Whot_SayHelloReq0_HTTP_Handler(srv WhotHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HelloRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWhotSayHelloReq)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayHelloReq(ctx, req.(*HelloRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloReply)
		return ctx.Result(200, reply)
	}
}

func _Whot_OnLoginReq0_HTTP_Handler(srv WhotHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWhotOnLoginReq)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OnLoginReq(ctx, req.(*LoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginRsp)
		return ctx.Result(200, reply)
	}
}

func _Whot_OnLogoutReq0_HTTP_Handler(srv WhotHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWhotOnLogoutReq)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OnLogoutReq(ctx, req.(*LogoutReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutRsp)
		return ctx.Result(200, reply)
	}
}

func _Whot_OnReadyReq0_HTTP_Handler(srv WhotHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReadyReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWhotOnReadyReq)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OnReadyReq(ctx, req.(*ReadyReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReadyRsp)
		return ctx.Result(200, reply)
	}
}

func _Whot_OnSwitchTableReq0_HTTP_Handler(srv WhotHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SwitchTableReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWhotOnSwitchTableReq)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OnSwitchTableReq(ctx, req.(*SwitchTableReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SwitchTableRsp)
		return ctx.Result(200, reply)
	}
}

func _Whot_OnSceneReq0_HTTP_Handler(srv WhotHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SceneReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWhotOnSceneReq)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OnSceneReq(ctx, req.(*SceneReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SceneRsp)
		return ctx.Result(200, reply)
	}
}

func _Whot_OnChatReq0_HTTP_Handler(srv WhotHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChatReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWhotOnChatReq)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OnChatReq(ctx, req.(*ChatReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ChatRsp)
		return ctx.Result(200, reply)
	}
}

func _Whot_OnHostingReq0_HTTP_Handler(srv WhotHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HostingReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWhotOnHostingReq)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OnHostingReq(ctx, req.(*HostingReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HostingRsp)
		return ctx.Result(200, reply)
	}
}

func _Whot_OnForwardReq0_HTTP_Handler(srv WhotHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ForwardReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWhotOnForwardReq)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OnForwardReq(ctx, req.(*ForwardReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ForwardRsp)
		return ctx.Result(200, reply)
	}
}

func _Whot_OnPlayerActionReq0_HTTP_Handler(srv WhotHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PlayerActionReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWhotOnPlayerActionReq)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OnPlayerActionReq(ctx, req.(*PlayerActionReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PlayerActionRsp)
		return ctx.Result(200, reply)
	}
}

type WhotHTTPClient interface {
	OnChatReq(ctx context.Context, req *ChatReq, opts ...http.CallOption) (rsp *ChatRsp, err error)
	OnForwardReq(ctx context.Context, req *ForwardReq, opts ...http.CallOption) (rsp *ForwardRsp, err error)
	OnHostingReq(ctx context.Context, req *HostingReq, opts ...http.CallOption) (rsp *HostingRsp, err error)
	OnLoginReq(ctx context.Context, req *LoginReq, opts ...http.CallOption) (rsp *LoginRsp, err error)
	OnLogoutReq(ctx context.Context, req *LogoutReq, opts ...http.CallOption) (rsp *LogoutRsp, err error)
	OnPlayerActionReq(ctx context.Context, req *PlayerActionReq, opts ...http.CallOption) (rsp *PlayerActionRsp, err error)
	OnReadyReq(ctx context.Context, req *ReadyReq, opts ...http.CallOption) (rsp *ReadyRsp, err error)
	OnSceneReq(ctx context.Context, req *SceneReq, opts ...http.CallOption) (rsp *SceneRsp, err error)
	OnSwitchTableReq(ctx context.Context, req *SwitchTableReq, opts ...http.CallOption) (rsp *SwitchTableRsp, err error)
	SayHelloReq(ctx context.Context, req *HelloRequest, opts ...http.CallOption) (rsp *HelloReply, err error)
}

type WhotHTTPClientImpl struct {
	cc *http.Client
}

func NewWhotHTTPClient(client *http.Client) WhotHTTPClient {
	return &WhotHTTPClientImpl{client}
}

func (c *WhotHTTPClientImpl) OnChatReq(ctx context.Context, in *ChatReq, opts ...http.CallOption) (*ChatRsp, error) {
	var out ChatRsp
	pattern := "/whot/OnChatOrFaceReq"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWhotOnChatReq))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WhotHTTPClientImpl) OnForwardReq(ctx context.Context, in *ForwardReq, opts ...http.CallOption) (*ForwardRsp, error) {
	var out ForwardRsp
	pattern := "/whot/OnForwardReq"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWhotOnForwardReq))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WhotHTTPClientImpl) OnHostingReq(ctx context.Context, in *HostingReq, opts ...http.CallOption) (*HostingRsp, error) {
	var out HostingRsp
	pattern := "/whot/OnHostingReq"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWhotOnHostingReq))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WhotHTTPClientImpl) OnLoginReq(ctx context.Context, in *LoginReq, opts ...http.CallOption) (*LoginRsp, error) {
	var out LoginRsp
	pattern := "/whot/OnLoginReq"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWhotOnLoginReq))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WhotHTTPClientImpl) OnLogoutReq(ctx context.Context, in *LogoutReq, opts ...http.CallOption) (*LogoutRsp, error) {
	var out LogoutRsp
	pattern := "/whot/OnLogoutReq"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWhotOnLogoutReq))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WhotHTTPClientImpl) OnPlayerActionReq(ctx context.Context, in *PlayerActionReq, opts ...http.CallOption) (*PlayerActionRsp, error) {
	var out PlayerActionRsp
	pattern := "/whot/OnPlayCardReq"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWhotOnPlayerActionReq))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WhotHTTPClientImpl) OnReadyReq(ctx context.Context, in *ReadyReq, opts ...http.CallOption) (*ReadyRsp, error) {
	var out ReadyRsp
	pattern := "/whot/OnReadyReq"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWhotOnReadyReq))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WhotHTTPClientImpl) OnSceneReq(ctx context.Context, in *SceneReq, opts ...http.CallOption) (*SceneRsp, error) {
	var out SceneRsp
	pattern := "/whot/OnSceneReq"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWhotOnSceneReq))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WhotHTTPClientImpl) OnSwitchTableReq(ctx context.Context, in *SwitchTableReq, opts ...http.CallOption) (*SwitchTableRsp, error) {
	var out SwitchTableRsp
	pattern := "/whot/OnSwitchTableReq"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWhotOnSwitchTableReq))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WhotHTTPClientImpl) SayHelloReq(ctx context.Context, in *HelloRequest, opts ...http.CallOption) (*HelloReply, error) {
	var out HelloReply
	pattern := "/whot/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWhotSayHelloReq))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
