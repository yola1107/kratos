// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: helloworld/v1/api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Whot_SayHelloReq_FullMethodName       = "/whot.v1.Whot/SayHelloReq"
	Whot_OnLoginReq_FullMethodName        = "/whot.v1.Whot/OnLoginReq"
	Whot_OnLogoutReq_FullMethodName       = "/whot.v1.Whot/OnLogoutReq"
	Whot_OnReadyReq_FullMethodName        = "/whot.v1.Whot/OnReadyReq"
	Whot_OnSwitchTableReq_FullMethodName  = "/whot.v1.Whot/OnSwitchTableReq"
	Whot_OnSceneReq_FullMethodName        = "/whot.v1.Whot/OnSceneReq"
	Whot_OnChatReq_FullMethodName         = "/whot.v1.Whot/OnChatReq"
	Whot_OnHostingReq_FullMethodName      = "/whot.v1.Whot/OnHostingReq"
	Whot_OnForwardReq_FullMethodName      = "/whot.v1.Whot/OnForwardReq"
	Whot_OnPlayerActionReq_FullMethodName = "/whot.v1.Whot/OnPlayerActionReq"
)

// WhotClient is the client API for Whot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The whot service definition.
type WhotClient interface {
	// Sends a greeting
	SayHelloReq(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	OnLoginReq(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error)
	OnLogoutReq(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutRsp, error)
	OnReadyReq(ctx context.Context, in *ReadyReq, opts ...grpc.CallOption) (*ReadyRsp, error)
	OnSwitchTableReq(ctx context.Context, in *SwitchTableReq, opts ...grpc.CallOption) (*SwitchTableRsp, error)
	OnSceneReq(ctx context.Context, in *SceneReq, opts ...grpc.CallOption) (*SceneRsp, error)
	OnChatReq(ctx context.Context, in *ChatReq, opts ...grpc.CallOption) (*ChatRsp, error)
	OnHostingReq(ctx context.Context, in *HostingReq, opts ...grpc.CallOption) (*HostingRsp, error)
	OnForwardReq(ctx context.Context, in *ForwardReq, opts ...grpc.CallOption) (*ForwardRsp, error)
	// game request
	OnPlayerActionReq(ctx context.Context, in *PlayerActionReq, opts ...grpc.CallOption) (*PlayerActionRsp, error)
}

type whotClient struct {
	cc grpc.ClientConnInterface
}

func NewWhotClient(cc grpc.ClientConnInterface) WhotClient {
	return &whotClient{cc}
}

func (c *whotClient) SayHelloReq(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Whot_SayHelloReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whotClient) OnLoginReq(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, Whot_OnLoginReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whotClient) OnLogoutReq(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutRsp)
	err := c.cc.Invoke(ctx, Whot_OnLogoutReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whotClient) OnReadyReq(ctx context.Context, in *ReadyReq, opts ...grpc.CallOption) (*ReadyRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadyRsp)
	err := c.cc.Invoke(ctx, Whot_OnReadyReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whotClient) OnSwitchTableReq(ctx context.Context, in *SwitchTableReq, opts ...grpc.CallOption) (*SwitchTableRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SwitchTableRsp)
	err := c.cc.Invoke(ctx, Whot_OnSwitchTableReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whotClient) OnSceneReq(ctx context.Context, in *SceneReq, opts ...grpc.CallOption) (*SceneRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SceneRsp)
	err := c.cc.Invoke(ctx, Whot_OnSceneReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whotClient) OnChatReq(ctx context.Context, in *ChatReq, opts ...grpc.CallOption) (*ChatRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatRsp)
	err := c.cc.Invoke(ctx, Whot_OnChatReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whotClient) OnHostingReq(ctx context.Context, in *HostingReq, opts ...grpc.CallOption) (*HostingRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HostingRsp)
	err := c.cc.Invoke(ctx, Whot_OnHostingReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whotClient) OnForwardReq(ctx context.Context, in *ForwardReq, opts ...grpc.CallOption) (*ForwardRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForwardRsp)
	err := c.cc.Invoke(ctx, Whot_OnForwardReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *whotClient) OnPlayerActionReq(ctx context.Context, in *PlayerActionReq, opts ...grpc.CallOption) (*PlayerActionRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlayerActionRsp)
	err := c.cc.Invoke(ctx, Whot_OnPlayerActionReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WhotServer is the server API for Whot service.
// All implementations must embed UnimplementedWhotServer
// for forward compatibility.
//
// The whot service definition.
type WhotServer interface {
	// Sends a greeting
	SayHelloReq(context.Context, *HelloRequest) (*HelloReply, error)
	OnLoginReq(context.Context, *LoginReq) (*LoginRsp, error)
	OnLogoutReq(context.Context, *LogoutReq) (*LogoutRsp, error)
	OnReadyReq(context.Context, *ReadyReq) (*ReadyRsp, error)
	OnSwitchTableReq(context.Context, *SwitchTableReq) (*SwitchTableRsp, error)
	OnSceneReq(context.Context, *SceneReq) (*SceneRsp, error)
	OnChatReq(context.Context, *ChatReq) (*ChatRsp, error)
	OnHostingReq(context.Context, *HostingReq) (*HostingRsp, error)
	OnForwardReq(context.Context, *ForwardReq) (*ForwardRsp, error)
	// game request
	OnPlayerActionReq(context.Context, *PlayerActionReq) (*PlayerActionRsp, error)
	mustEmbedUnimplementedWhotServer()
}

// UnimplementedWhotServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWhotServer struct{}

func (UnimplementedWhotServer) SayHelloReq(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloReq not implemented")
}
func (UnimplementedWhotServer) OnLoginReq(context.Context, *LoginReq) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnLoginReq not implemented")
}
func (UnimplementedWhotServer) OnLogoutReq(context.Context, *LogoutReq) (*LogoutRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnLogoutReq not implemented")
}
func (UnimplementedWhotServer) OnReadyReq(context.Context, *ReadyReq) (*ReadyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnReadyReq not implemented")
}
func (UnimplementedWhotServer) OnSwitchTableReq(context.Context, *SwitchTableReq) (*SwitchTableRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnSwitchTableReq not implemented")
}
func (UnimplementedWhotServer) OnSceneReq(context.Context, *SceneReq) (*SceneRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnSceneReq not implemented")
}
func (UnimplementedWhotServer) OnChatReq(context.Context, *ChatReq) (*ChatRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnChatReq not implemented")
}
func (UnimplementedWhotServer) OnHostingReq(context.Context, *HostingReq) (*HostingRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnHostingReq not implemented")
}
func (UnimplementedWhotServer) OnForwardReq(context.Context, *ForwardReq) (*ForwardRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnForwardReq not implemented")
}
func (UnimplementedWhotServer) OnPlayerActionReq(context.Context, *PlayerActionReq) (*PlayerActionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnPlayerActionReq not implemented")
}
func (UnimplementedWhotServer) mustEmbedUnimplementedWhotServer() {}
func (UnimplementedWhotServer) testEmbeddedByValue()              {}

// UnsafeWhotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WhotServer will
// result in compilation errors.
type UnsafeWhotServer interface {
	mustEmbedUnimplementedWhotServer()
}

func RegisterWhotServer(s grpc.ServiceRegistrar, srv WhotServer) {
	// If the following call pancis, it indicates UnimplementedWhotServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Whot_ServiceDesc, srv)
}

func _Whot_SayHelloReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhotServer).SayHelloReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Whot_SayHelloReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhotServer).SayHelloReq(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Whot_OnLoginReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhotServer).OnLoginReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Whot_OnLoginReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhotServer).OnLoginReq(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Whot_OnLogoutReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhotServer).OnLogoutReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Whot_OnLogoutReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhotServer).OnLogoutReq(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Whot_OnReadyReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhotServer).OnReadyReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Whot_OnReadyReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhotServer).OnReadyReq(ctx, req.(*ReadyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Whot_OnSwitchTableReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhotServer).OnSwitchTableReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Whot_OnSwitchTableReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhotServer).OnSwitchTableReq(ctx, req.(*SwitchTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Whot_OnSceneReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SceneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhotServer).OnSceneReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Whot_OnSceneReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhotServer).OnSceneReq(ctx, req.(*SceneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Whot_OnChatReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhotServer).OnChatReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Whot_OnChatReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhotServer).OnChatReq(ctx, req.(*ChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Whot_OnHostingReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhotServer).OnHostingReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Whot_OnHostingReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhotServer).OnHostingReq(ctx, req.(*HostingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Whot_OnForwardReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhotServer).OnForwardReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Whot_OnForwardReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhotServer).OnForwardReq(ctx, req.(*ForwardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Whot_OnPlayerActionReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhotServer).OnPlayerActionReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Whot_OnPlayerActionReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhotServer).OnPlayerActionReq(ctx, req.(*PlayerActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Whot_ServiceDesc is the grpc.ServiceDesc for Whot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Whot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "whot.v1.Whot",
	HandlerType: (*WhotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHelloReq",
			Handler:    _Whot_SayHelloReq_Handler,
		},
		{
			MethodName: "OnLoginReq",
			Handler:    _Whot_OnLoginReq_Handler,
		},
		{
			MethodName: "OnLogoutReq",
			Handler:    _Whot_OnLogoutReq_Handler,
		},
		{
			MethodName: "OnReadyReq",
			Handler:    _Whot_OnReadyReq_Handler,
		},
		{
			MethodName: "OnSwitchTableReq",
			Handler:    _Whot_OnSwitchTableReq_Handler,
		},
		{
			MethodName: "OnSceneReq",
			Handler:    _Whot_OnSceneReq_Handler,
		},
		{
			MethodName: "OnChatReq",
			Handler:    _Whot_OnChatReq_Handler,
		},
		{
			MethodName: "OnHostingReq",
			Handler:    _Whot_OnHostingReq_Handler,
		},
		{
			MethodName: "OnForwardReq",
			Handler:    _Whot_OnForwardReq_Handler,
		},
		{
			MethodName: "OnPlayerActionReq",
			Handler:    _Whot_OnPlayerActionReq_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/v1/api.proto",
}
