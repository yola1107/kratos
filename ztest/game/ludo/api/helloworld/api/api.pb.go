// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: helloworld/api/api.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 游戏指令类型 subCmd
type GameCommand int32

const (
	GameCommand_MsVoid                GameCommand = 0  // 空
	GameCommand_MsSenceReq            GameCommand = 1  // 请求场景
	GameCommand_MsSenceResp           GameCommand = 2  // 响应场景（GameState）
	GameCommand_MsRollDiceReq         GameCommand = 5  // 请求掷骰（RollDiceRequest）
	GameCommand_MsRollDiceResp        GameCommand = 6  // 响应掷骰（RollDiceResponse）
	GameCommand_MsMoveReq             GameCommand = 7  // 请求移动棋子（MoveRequest）
	GameCommand_MsMoveResp            GameCommand = 8  // 响应移动棋子（MoveResponse）
	GameCommand_MsEmojiReq            GameCommand = 9  // 表情请求（EmojiRequest）
	GameCommand_MsEmojiResp           GameCommand = 10 // 表情广播（BaseResponse）
	GameCommand_MsChatReq             GameCommand = 11 // 聊天请求（ChatMsg）
	GameCommand_MsChatResp            GameCommand = 12 // 聊天广播（ChatMsg）
	GameCommand_MsActivePush          GameCommand = 13 // 激活当前玩家
	GameCommand_MsStartNtf            GameCommand = 14 // 游戏开始通知（LudoStart）
	GameCommand_MsSettleNtf           GameCommand = 15 // 游戏结算通知（Settle）
	GameCommand_MsSitDown             GameCommand = 16 // 玩家坐下（PlayerSitDown）
	GameCommand_MsLeaveReq            GameCommand = 17 // 请求离开房间
	GameCommand_MsLeaveResp           GameCommand = 18 // 离开广播（S2CLeavRoom）
	GameCommand_MsMasterStart         GameCommand = 19 // 房主强制开始游戏  空 -> BaseResponse
	GameCommand_MsPrivateRoomLeaveReq GameCommand = 20 // 未开始时，玩家请求退出私有房间（房主则解散房间，非房主则离开）
	GameCommand_MsPrivateRoomLeaveRsp GameCommand = 21 // 响应房间退出/解散请求
)

// Enum value maps for GameCommand.
var (
	GameCommand_name = map[int32]string{
		0:  "MsVoid",
		1:  "MsSenceReq",
		2:  "MsSenceResp",
		5:  "MsRollDiceReq",
		6:  "MsRollDiceResp",
		7:  "MsMoveReq",
		8:  "MsMoveResp",
		9:  "MsEmojiReq",
		10: "MsEmojiResp",
		11: "MsChatReq",
		12: "MsChatResp",
		13: "MsActivePush",
		14: "MsStartNtf",
		15: "MsSettleNtf",
		16: "MsSitDown",
		17: "MsLeaveReq",
		18: "MsLeaveResp",
		19: "MsMasterStart",
		20: "MsPrivateRoomLeaveReq",
		21: "MsPrivateRoomLeaveRsp",
	}
	GameCommand_value = map[string]int32{
		"MsVoid":                0,
		"MsSenceReq":            1,
		"MsSenceResp":           2,
		"MsRollDiceReq":         5,
		"MsRollDiceResp":        6,
		"MsMoveReq":             7,
		"MsMoveResp":            8,
		"MsEmojiReq":            9,
		"MsEmojiResp":           10,
		"MsChatReq":             11,
		"MsChatResp":            12,
		"MsActivePush":          13,
		"MsStartNtf":            14,
		"MsSettleNtf":           15,
		"MsSitDown":             16,
		"MsLeaveReq":            17,
		"MsLeaveResp":           18,
		"MsMasterStart":         19,
		"MsPrivateRoomLeaveReq": 20,
		"MsPrivateRoomLeaveRsp": 21,
	}
)

func (x GameCommand) Enum() *GameCommand {
	p := new(GameCommand)
	*p = x
	return p
}

func (x GameCommand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameCommand) Descriptor() protoreflect.EnumDescriptor {
	return file_helloworld_api_api_proto_enumTypes[0].Descriptor()
}

func (GameCommand) Type() protoreflect.EnumType {
	return &file_helloworld_api_api_proto_enumTypes[0]
}

func (x GameCommand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameCommand.Descriptor instead.
func (GameCommand) EnumDescriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{0}
}

// 游戏阶段状态
type LudoGameStatus int32

const (
	LudoGameStatus_StVoid    LudoGameStatus = 0 // 空
	LudoGameStatus_StUnReady LudoGameStatus = 1 // 等待玩家准备
	LudoGameStatus_StStart   LudoGameStatus = 2 // 游戏已开始
	LudoGameStatus_StDice    LudoGameStatus = 3 // 投掷骰子阶段
	LudoGameStatus_StMove    LudoGameStatus = 4 // 移动棋子阶段
	LudoGameStatus_StSettle  LudoGameStatus = 5 // 结算阶段
	LudoGameStatus_StMoveAni LudoGameStatus = 6 // 移动动画
)

// Enum value maps for LudoGameStatus.
var (
	LudoGameStatus_name = map[int32]string{
		0: "StVoid",
		1: "StUnReady",
		2: "StStart",
		3: "StDice",
		4: "StMove",
		5: "StSettle",
		6: "StMoveAni",
	}
	LudoGameStatus_value = map[string]int32{
		"StVoid":    0,
		"StUnReady": 1,
		"StStart":   2,
		"StDice":    3,
		"StMove":    4,
		"StSettle":  5,
		"StMoveAni": 6,
	}
)

func (x LudoGameStatus) Enum() *LudoGameStatus {
	p := new(LudoGameStatus)
	*p = x
	return p
}

func (x LudoGameStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LudoGameStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_helloworld_api_api_proto_enumTypes[1].Descriptor()
}

func (LudoGameStatus) Type() protoreflect.EnumType {
	return &file_helloworld_api_api_proto_enumTypes[1]
}

func (x LudoGameStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LudoGameStatus.Descriptor instead.
func (LudoGameStatus) EnumDescriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{1}
}

// 服务器错误码定义
type ErrorCode int32

const (
	ErrorCode_SUCCESS              ErrorCode = 0  // 成功
	ErrorCode_ROOM_FULL            ErrorCode = 1  // 房间已满
	ErrorCode_INVALID_STAKE        ErrorCode = 2  // 无效底注
	ErrorCode_NOT_YOUR_TURN        ErrorCode = 3  // 非你的回合
	ErrorCode_INVALID_MOVE         ErrorCode = 4  // 非法移动
	ErrorCode_GAME_ALREADY_STARTED ErrorCode = 5  // 游戏已开始
	ErrorCode_PLAYER_NOT_FOUND     ErrorCode = 6  // 玩家未找到
	ErrorCode_NETWORK_ERROR        ErrorCode = 7  // 网络错误
	ErrorCode_TIMEOUT              ErrorCode = 8  // 超时
	ErrorCode_INSUFFICIENT_BALANCE ErrorCode = 9  // 余额不足
	ErrorCode_IsInGaming           ErrorCode = 10 // 游戏中无法退出
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:  "SUCCESS",
		1:  "ROOM_FULL",
		2:  "INVALID_STAKE",
		3:  "NOT_YOUR_TURN",
		4:  "INVALID_MOVE",
		5:  "GAME_ALREADY_STARTED",
		6:  "PLAYER_NOT_FOUND",
		7:  "NETWORK_ERROR",
		8:  "TIMEOUT",
		9:  "INSUFFICIENT_BALANCE",
		10: "IsInGaming",
	}
	ErrorCode_value = map[string]int32{
		"SUCCESS":              0,
		"ROOM_FULL":            1,
		"INVALID_STAKE":        2,
		"NOT_YOUR_TURN":        3,
		"INVALID_MOVE":         4,
		"GAME_ALREADY_STARTED": 5,
		"PLAYER_NOT_FOUND":     6,
		"NETWORK_ERROR":        7,
		"TIMEOUT":              8,
		"INSUFFICIENT_BALANCE": 9,
		"IsInGaming":           10,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_helloworld_api_api_proto_enumTypes[2].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_helloworld_api_api_proto_enumTypes[2]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{2}
}

// 玩家状态类型
type PlayerStatusType int32

const (
	PlayerStatusType_PlayerStatusTypeVoid    PlayerStatusType = 0 // 空闲
	PlayerStatusType_PlayerStatusTypeIngame  PlayerStatusType = 1 // 游戏中
	PlayerStatusType_PlayerStatusTypeOffline PlayerStatusType = 2 // 离线
	PlayerStatusType_PlayerStatusTypeTrust   PlayerStatusType = 3 // 托管
)

// Enum value maps for PlayerStatusType.
var (
	PlayerStatusType_name = map[int32]string{
		0: "PlayerStatusTypeVoid",
		1: "PlayerStatusTypeIngame",
		2: "PlayerStatusTypeOffline",
		3: "PlayerStatusTypeTrust",
	}
	PlayerStatusType_value = map[string]int32{
		"PlayerStatusTypeVoid":    0,
		"PlayerStatusTypeIngame":  1,
		"PlayerStatusTypeOffline": 2,
		"PlayerStatusTypeTrust":   3,
	}
)

func (x PlayerStatusType) Enum() *PlayerStatusType {
	p := new(PlayerStatusType)
	*p = x
	return p
}

func (x PlayerStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_helloworld_api_api_proto_enumTypes[3].Descriptor()
}

func (PlayerStatusType) Type() protoreflect.EnumType {
	return &file_helloworld_api_api_proto_enumTypes[3]
}

func (x PlayerStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerStatusType.Descriptor instead.
func (PlayerStatusType) EnumDescriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{3}
}

// 玩家动作类型
type ActionType int32

const (
	ActionType_ACVoid ActionType = 0 // 空
	ActionType_ACDice ActionType = 1 // 掷骰
	ActionType_ACMove ActionType = 2 // 移动
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0: "ACVoid",
		1: "ACDice",
		2: "ACMove",
	}
	ActionType_value = map[string]int32{
		"ACVoid": 0,
		"ACDice": 1,
		"ACMove": 2,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_helloworld_api_api_proto_enumTypes[4].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_helloworld_api_api_proto_enumTypes[4]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{4}
}

// 通用响应结构
type BaseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误码（0为成功）
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 提示信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BaseResponse) Reset() {
	*x = BaseResponse{}
	mi := &file_helloworld_api_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseResponse) ProtoMessage() {}

func (x *BaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseResponse.ProtoReflect.Descriptor instead.
func (*BaseResponse) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{0}
}

func (x *BaseResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BaseResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 单个棋子信息
type Piece struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`         // 棋子ID（全局唯一）
	Pos           int32                  `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`       // 当前棋盘坐标位置
	Color         int32                  `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`   // 所属颜色（0红，1黄，2绿，3蓝）
	Status        int32                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"` // 状态（0基地，1公共路径，2终点路径，3到达终点）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Piece) Reset() {
	*x = Piece{}
	mi := &file_helloworld_api_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Piece) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Piece) ProtoMessage() {}

func (x *Piece) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Piece.ProtoReflect.Descriptor instead.
func (*Piece) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{1}
}

func (x *Piece) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Piece) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *Piece) GetColor() int32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *Piece) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 玩家坐下消息
type PlayerSitDown struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      int64                  `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"` // 玩家ID
	Seat          int32                  `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`                         // 座位号（0-3）
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                          // 昵称
	Avatar        string                 `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`                      // 头像
	Color         int32                  `protobuf:"varint,5,opt,name=color,proto3" json:"color,omitempty"`                       // 玩家颜色（0-3）
	Balance       int64                  `protobuf:"varint,6,opt,name=balance,proto3" json:"balance,omitempty"`                   // 当前余额
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerSitDown) Reset() {
	*x = PlayerSitDown{}
	mi := &file_helloworld_api_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerSitDown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerSitDown) ProtoMessage() {}

func (x *PlayerSitDown) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerSitDown.ProtoReflect.Descriptor instead.
func (*PlayerSitDown) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{2}
}

func (x *PlayerSitDown) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *PlayerSitDown) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *PlayerSitDown) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlayerSitDown) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *PlayerSitDown) GetColor() int32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *PlayerSitDown) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

// 游戏中玩家信息
type Player struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   // 玩家ID
	Seat          int32                  `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`                               // 座位号（0-3）
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                // 昵称
	Avatar        string                 `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`                            // 头像
	Color         int32                  `protobuf:"varint,5,opt,name=color,proto3" json:"color,omitempty"`                             // 0红 1黄 2绿 3蓝
	Status        PlayerStatusType       `protobuf:"varint,6,opt,name=status,proto3,enum=api.PlayerStatusType" json:"status,omitempty"` // 当前状态 2:托管 3:离线
	Balance       int64                  `protobuf:"varint,7,opt,name=balance,proto3" json:"balance,omitempty"`                         // 余额
	DiceList      []*Dice                `protobuf:"bytes,8,rep,name=diceList,proto3" json:"diceList,omitempty"`                        // 骰子列表（当前或上轮）
	CanAction     ActionType             `protobuf:"varint,9,opt,name=canAction,proto3,enum=api.ActionType" json:"canAction,omitempty"` // 动作类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Player) Reset() {
	*x = Player{}
	mi := &file_helloworld_api_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{3}
}

func (x *Player) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Player) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *Player) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Player) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Player) GetColor() int32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *Player) GetStatus() PlayerStatusType {
	if x != nil {
		return x.Status
	}
	return PlayerStatusType_PlayerStatusTypeVoid
}

func (x *Player) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Player) GetDiceList() []*Dice {
	if x != nil {
		return x.DiceList
	}
	return nil
}

func (x *Player) GetCanAction() ActionType {
	if x != nil {
		return x.CanAction
	}
	return ActionType_ACVoid
}

// 棋盘信息
type Board struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Common        []int32                `protobuf:"varint,1,rep,packed,name=common,proto3" json:"common,omitempty"` // 公共路径格子（0-51）
	Home          []int32                `protobuf:"varint,2,rep,packed,name=home,proto3" json:"home,omitempty"`     // 各色基地（已废弃，用-1 表示）
	Entry         []int32                `protobuf:"varint,3,rep,packed,name=entry,proto3" json:"entry,omitempty"`   // 出发点（0红，13黄，26绿，39蓝）
	Safe          []int32                `protobuf:"varint,4,rep,packed,name=safe,proto3" json:"safe,omitempty"`     // 安全格子（不可吃子） 0, 8, 13, 21, 26, 34, 39, 47,
	End           []int32                `protobuf:"varint,5,rep,packed,name=end,proto3" json:"end,omitempty"`       // 终点路径（101~106, 111~116, 121~126, 131-136）
	Color         []int32                `protobuf:"varint,6,rep,packed,name=color,proto3" json:"color,omitempty"`   // 颜色标记（0-3）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Board) Reset() {
	*x = Board{}
	mi := &file_helloworld_api_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Board) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Board) ProtoMessage() {}

func (x *Board) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Board.ProtoReflect.Descriptor instead.
func (*Board) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{4}
}

func (x *Board) GetCommon() []int32 {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *Board) GetHome() []int32 {
	if x != nil {
		return x.Home
	}
	return nil
}

func (x *Board) GetEntry() []int32 {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *Board) GetSafe() []int32 {
	if x != nil {
		return x.Safe
	}
	return nil
}

func (x *Board) GetEnd() []int32 {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *Board) GetColor() []int32 {
	if x != nil {
		return x.Color
	}
	return nil
}

// 游戏场景状态
type GameState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameId        string                 `protobuf:"bytes,1,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`            // 游戏唯一ID
	Mode          int32                  `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`                             // 0=经典，1=快速
	Status        LudoGameStatus         `protobuf:"varint,3,opt,name=status,proto3,enum=api.LudoGameStatus" json:"status,omitempty"` // 当前阶段
	Timeout       int64                  `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`                       // 倒计时，单位 ms
	CurSeat       int32                  `protobuf:"varint,5,opt,name=curSeat,proto3" json:"curSeat,omitempty"`                       // 当前操作的座位号
	Board         *Board                 `protobuf:"bytes,6,opt,name=board,proto3" json:"board,omitempty"`                            // 棋盘信息
	Players       []*Player              `protobuf:"bytes,7,rep,name=players,proto3" json:"players,omitempty"`                        // 玩家信息
	Winners       []string               `protobuf:"bytes,8,rep,name=winners,proto3" json:"winners,omitempty"`                        // 胜利玩家 ID 列表
	BaseScore     int64                  `protobuf:"varint,9,opt,name=baseScore,proto3" json:"baseScore,omitempty"`                   // 底注
	TableId       string                 `protobuf:"bytes,10,opt,name=tableId,proto3" json:"tableId,omitempty"`                       // 桌子ID
	Level         int64                  `protobuf:"varint,11,opt,name=level,proto3" json:"level,omitempty"`                          // 游戏等级
	TimeLeft      int64                  `protobuf:"varint,12,opt,name=timeLeft,proto3" json:"timeLeft,omitempty"`                    // 快速场剩余时间（毫秒）
	CurScore      []*FastScore           `protobuf:"bytes,13,rep,name=cur_score,json=curScore,proto3" json:"cur_score,omitempty"`     // 当前积分（快速场）
	Pieces        []*Piece               `protobuf:"bytes,14,rep,name=pieces,proto3" json:"pieces,omitempty"`                         // 棋盘所有棋子信息
	PlayerNum     int32                  `protobuf:"varint,15,opt,name=playerNum,proto3" json:"playerNum,omitempty"`                  // 房间最大人数 (私有房间使用创建房间规则的人数)
	SN            int64                  `protobuf:"varint,16,opt,name=SN,proto3" json:"SN,omitempty"`                                // 6位数房间号 (私有房间创建房间时生成)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameState) Reset() {
	*x = GameState{}
	mi := &file_helloworld_api_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameState) ProtoMessage() {}

func (x *GameState) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameState.ProtoReflect.Descriptor instead.
func (*GameState) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{5}
}

func (x *GameState) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *GameState) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *GameState) GetStatus() LudoGameStatus {
	if x != nil {
		return x.Status
	}
	return LudoGameStatus_StVoid
}

func (x *GameState) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *GameState) GetCurSeat() int32 {
	if x != nil {
		return x.CurSeat
	}
	return 0
}

func (x *GameState) GetBoard() *Board {
	if x != nil {
		return x.Board
	}
	return nil
}

func (x *GameState) GetPlayers() []*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *GameState) GetWinners() []string {
	if x != nil {
		return x.Winners
	}
	return nil
}

func (x *GameState) GetBaseScore() int64 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *GameState) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *GameState) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GameState) GetTimeLeft() int64 {
	if x != nil {
		return x.TimeLeft
	}
	return 0
}

func (x *GameState) GetCurScore() []*FastScore {
	if x != nil {
		return x.CurScore
	}
	return nil
}

func (x *GameState) GetPieces() []*Piece {
	if x != nil {
		return x.Pieces
	}
	return nil
}

func (x *GameState) GetPlayerNum() int32 {
	if x != nil {
		return x.PlayerNum
	}
	return 0
}

func (x *GameState) GetSN() int64 {
	if x != nil {
		return x.SN
	}
	return 0
}

// 游戏开始通知
type LudoStart struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TimeLeft      int64                  `protobuf:"varint,1,opt,name=timeLeft,proto3" json:"timeLeft,omitempty"` // 快速场剩余时间（毫秒）
	Pieces        []*Piece               `protobuf:"bytes,2,rep,name=pieces,proto3" json:"pieces,omitempty"`      // 棋盘所有棋子信息
	Gamers        []*GamePlayerInfo      `protobuf:"bytes,3,rep,name=gamers,proto3" json:"gamers,omitempty"`      // 参与游戏的玩家信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LudoStart) Reset() {
	*x = LudoStart{}
	mi := &file_helloworld_api_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LudoStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LudoStart) ProtoMessage() {}

func (x *LudoStart) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LudoStart.ProtoReflect.Descriptor instead.
func (*LudoStart) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{6}
}

func (x *LudoStart) GetTimeLeft() int64 {
	if x != nil {
		return x.TimeLeft
	}
	return 0
}

func (x *LudoStart) GetPieces() []*Piece {
	if x != nil {
		return x.Pieces
	}
	return nil
}

func (x *LudoStart) GetGamers() []*GamePlayerInfo {
	if x != nil {
		return x.Gamers
	}
	return nil
}

type GamePlayerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`     // 玩家ID
	Seat          int32                  `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`   // 玩家椅子号
	Color         int32                  `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"` // 玩家颜色持方: 0红 1黄 2绿 3蓝
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GamePlayerInfo) Reset() {
	*x = GamePlayerInfo{}
	mi := &file_helloworld_api_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GamePlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayerInfo) ProtoMessage() {}

func (x *GamePlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayerInfo.ProtoReflect.Descriptor instead.
func (*GamePlayerInfo) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{7}
}

func (x *GamePlayerInfo) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *GamePlayerInfo) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *GamePlayerInfo) GetColor() int32 {
	if x != nil {
		return x.Color
	}
	return 0
}

// 单个骰子结果
type Dice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         int32                  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"` // 骰子点数
	Used          bool                   `protobuf:"varint,2,opt,name=used,proto3" json:"used,omitempty"`   // 是否已使用
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Dice) Reset() {
	*x = Dice{}
	mi := &file_helloworld_api_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dice) ProtoMessage() {}

func (x *Dice) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dice.ProtoReflect.Descriptor instead.
func (*Dice) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{8}
}

func (x *Dice) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Dice) GetUsed() bool {
	if x != nil {
		return x.Used
	}
	return false
}

// 当前活动玩家操作提示
type ActivePush struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CurSeat       int32                  `protobuf:"varint,1,opt,name=curSeat,proto3" json:"curSeat,omitempty"`               // 当前操作的座位号
	Type          ActionType             `protobuf:"varint,2,opt,name=type,proto3,enum=api.ActionType" json:"type,omitempty"` // 动作类型
	Color         int32                  `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`                   // 玩家颜色
	Timeout       int64                  `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`               // 剩余时间（ms）
	DiceList      []*Dice                `protobuf:"bytes,5,rep,name=diceList,proto3" json:"diceList,omitempty"`              // 骰子列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivePush) Reset() {
	*x = ActivePush{}
	mi := &file_helloworld_api_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivePush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivePush) ProtoMessage() {}

func (x *ActivePush) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivePush.ProtoReflect.Descriptor instead.
func (*ActivePush) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{9}
}

func (x *ActivePush) GetCurSeat() int32 {
	if x != nil {
		return x.CurSeat
	}
	return 0
}

func (x *ActivePush) GetType() ActionType {
	if x != nil {
		return x.Type
	}
	return ActionType_ACVoid
}

func (x *ActivePush) GetColor() int32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *ActivePush) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ActivePush) GetDiceList() []*Dice {
	if x != nil {
		return x.DiceList
	}
	return nil
}

// 掷骰请求
type RollDiceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      int64                  `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RollDiceRequest) Reset() {
	*x = RollDiceRequest{}
	mi := &file_helloworld_api_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollDiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollDiceRequest) ProtoMessage() {}

func (x *RollDiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollDiceRequest.ProtoReflect.Descriptor instead.
func (*RollDiceRequest) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{10}
}

func (x *RollDiceRequest) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

// 掷骰响应
type RollDiceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	PlayerId      int64                  `protobuf:"varint,3,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Dice          int32                  `protobuf:"varint,4,opt,name=dice,proto3" json:"dice,omitempty"`                               // 当前骰子点数
	DiceList      []*Dice                `protobuf:"bytes,5,rep,name=diceList,proto3" json:"diceList,omitempty"`                        // 所有骰子
	Status        PlayerStatusType       `protobuf:"varint,6,opt,name=status,proto3,enum=api.PlayerStatusType" json:"status,omitempty"` // 玩家状态（v2025-08-03）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RollDiceResponse) Reset() {
	*x = RollDiceResponse{}
	mi := &file_helloworld_api_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollDiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollDiceResponse) ProtoMessage() {}

func (x *RollDiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollDiceResponse.ProtoReflect.Descriptor instead.
func (*RollDiceResponse) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{11}
}

func (x *RollDiceResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RollDiceResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RollDiceResponse) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *RollDiceResponse) GetDice() int32 {
	if x != nil {
		return x.Dice
	}
	return 0
}

func (x *RollDiceResponse) GetDiceList() []*Dice {
	if x != nil {
		return x.DiceList
	}
	return nil
}

func (x *RollDiceResponse) GetStatus() PlayerStatusType {
	if x != nil {
		return x.Status
	}
	return PlayerStatusType_PlayerStatusTypeVoid
}

// 移动棋子请求
type MoveRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      int64                  `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`    // 玩家id
	PieceId       int32                  `protobuf:"varint,2,opt,name=piece_id,json=pieceId,proto3" json:"piece_id,omitempty"`       // 棋子ID
	DiceValue     int32                  `protobuf:"varint,3,opt,name=dice_value,json=diceValue,proto3" json:"dice_value,omitempty"` // 使用的骰子点数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveRequest) Reset() {
	*x = MoveRequest{}
	mi := &file_helloworld_api_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveRequest) ProtoMessage() {}

func (x *MoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveRequest.ProtoReflect.Descriptor instead.
func (*MoveRequest) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{12}
}

func (x *MoveRequest) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *MoveRequest) GetPieceId() int32 {
	if x != nil {
		return x.PieceId
	}
	return 0
}

func (x *MoveRequest) GetDiceValue() int32 {
	if x != nil {
		return x.DiceValue
	}
	return 0
}

// 移动棋子响应
type MoveResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	PlayerId      int64                  `protobuf:"varint,3,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`        // 玩家id
	PieceId       int32                  `protobuf:"varint,4,opt,name=piece_id,json=pieceId,proto3" json:"piece_id,omitempty"`           // 棋子ID
	DiceValue     int32                  `protobuf:"varint,5,opt,name=dice_value,json=diceValue,proto3" json:"dice_value,omitempty"`     // 使用的骰子点数
	Move          *DiceMove              `protobuf:"bytes,6,opt,name=move,proto3" json:"move,omitempty"`                                 // 实际移动
	Killed        []*DiceMove            `protobuf:"bytes,7,rep,name=killed,proto3" json:"killed,omitempty"`                             // 被吃子
	CurScore      []*FastScore           `protobuf:"bytes,8,rep,name=cur_score,json=curScore,proto3" json:"cur_score,omitempty"`         //
	IncrScore     []*FastScore           `protobuf:"bytes,9,rep,name=incr_score,json=incrScore,proto3" json:"incr_score,omitempty"`      //
	Status        PlayerStatusType       `protobuf:"varint,10,opt,name=status,proto3,enum=api.PlayerStatusType" json:"status,omitempty"` // 玩家状态（v2025-08-03）
	Pieces        []*Piece               `protobuf:"bytes,11,rep,name=pieces,proto3" json:"pieces,omitempty"`                            // 棋盘所有棋子当前状态
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveResponse) Reset() {
	*x = MoveResponse{}
	mi := &file_helloworld_api_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveResponse) ProtoMessage() {}

func (x *MoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveResponse.ProtoReflect.Descriptor instead.
func (*MoveResponse) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{13}
}

func (x *MoveResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MoveResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *MoveResponse) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *MoveResponse) GetPieceId() int32 {
	if x != nil {
		return x.PieceId
	}
	return 0
}

func (x *MoveResponse) GetDiceValue() int32 {
	if x != nil {
		return x.DiceValue
	}
	return 0
}

func (x *MoveResponse) GetMove() *DiceMove {
	if x != nil {
		return x.Move
	}
	return nil
}

func (x *MoveResponse) GetKilled() []*DiceMove {
	if x != nil {
		return x.Killed
	}
	return nil
}

func (x *MoveResponse) GetCurScore() []*FastScore {
	if x != nil {
		return x.CurScore
	}
	return nil
}

func (x *MoveResponse) GetIncrScore() []*FastScore {
	if x != nil {
		return x.IncrScore
	}
	return nil
}

func (x *MoveResponse) GetStatus() PlayerStatusType {
	if x != nil {
		return x.Status
	}
	return PlayerStatusType_PlayerStatusTypeVoid
}

func (x *MoveResponse) GetPieces() []*Piece {
	if x != nil {
		return x.Pieces
	}
	return nil
}

// 移动棋子信息
type DiceMove struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      int64                  `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"` // 玩家id
	PieceId       int32                  `protobuf:"varint,2,opt,name=piece_id,json=pieceId,proto3" json:"piece_id,omitempty"`    // 棋子ID
	From          int32                  `protobuf:"varint,3,opt,name=from,proto3" json:"from,omitempty"`                         // 起始位置
	To            int32                  `protobuf:"varint,4,opt,name=to,proto3" json:"to,omitempty"`                             // 目标位置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiceMove) Reset() {
	*x = DiceMove{}
	mi := &file_helloworld_api_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiceMove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiceMove) ProtoMessage() {}

func (x *DiceMove) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiceMove.ProtoReflect.Descriptor instead.
func (*DiceMove) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{14}
}

func (x *DiceMove) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *DiceMove) GetPieceId() int32 {
	if x != nil {
		return x.PieceId
	}
	return 0
}

func (x *DiceMove) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *DiceMove) GetTo() int32 {
	if x != nil {
		return x.To
	}
	return 0
}

// 快速得分结构
type FastScore struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`       // 玩家ID
	Score         int64                  `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"` // 分数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FastScore) Reset() {
	*x = FastScore{}
	mi := &file_helloworld_api_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FastScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastScore) ProtoMessage() {}

func (x *FastScore) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastScore.ProtoReflect.Descriptor instead.
func (*FastScore) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{15}
}

func (x *FastScore) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FastScore) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

// 单个玩家结算数据
type SettlePlayer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 基础信息
	PlayerId int64  `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"` // 玩家ID
	Seat     int32  `protobuf:"varint,2,opt,name=seat,proto3" json:"seat,omitempty"`                         // 座位号（0-3）
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                          // 昵称
	Avatar   string `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`                      // 头像
	Color    int32  `protobuf:"varint,5,opt,name=color,proto3" json:"color,omitempty"`                       // 0红 1黄 2绿 3蓝
	// 结算信息
	BetAll        int64 `protobuf:"varint,6,opt,name=betAll,proto3" json:"betAll,omitempty"`            // 下注额
	Score         int64 `protobuf:"varint,7,opt,name=score,proto3" json:"score,omitempty"`              // 玩家得分
	Rank          int64 `protobuf:"varint,8,opt,name=rank,proto3" json:"rank,omitempty"`                // 排名
	IsWin         bool  `protobuf:"varint,9,opt,name=is_win,json=isWin,proto3" json:"is_win,omitempty"` // 是否胜利
	Balance       int64 `protobuf:"varint,10,opt,name=balance,proto3" json:"balance,omitempty"`         // 玩家余额
	FastScore     int64 `protobuf:"varint,11,opt,name=fastScore,proto3" json:"fastScore,omitempty"`     // 快速模式得分
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SettlePlayer) Reset() {
	*x = SettlePlayer{}
	mi := &file_helloworld_api_api_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SettlePlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettlePlayer) ProtoMessage() {}

func (x *SettlePlayer) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettlePlayer.ProtoReflect.Descriptor instead.
func (*SettlePlayer) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{16}
}

func (x *SettlePlayer) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *SettlePlayer) GetSeat() int32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *SettlePlayer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SettlePlayer) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *SettlePlayer) GetColor() int32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *SettlePlayer) GetBetAll() int64 {
	if x != nil {
		return x.BetAll
	}
	return 0
}

func (x *SettlePlayer) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SettlePlayer) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *SettlePlayer) GetIsWin() bool {
	if x != nil {
		return x.IsWin
	}
	return false
}

func (x *SettlePlayer) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *SettlePlayer) GetFastScore() int64 {
	if x != nil {
		return x.FastScore
	}
	return 0
}

// 结算数据
type Settle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BaseScore     int64                  `protobuf:"varint,1,opt,name=baseScore,proto3" json:"baseScore,omitempty"`                             // 底注
	SettlePlayers []*SettlePlayer        `protobuf:"bytes,2,rep,name=settle_players,json=settlePlayers,proto3" json:"settle_players,omitempty"` // 结算玩家列表
	WinType       int64                  `protobuf:"varint,3,opt,name=winType,proto3" json:"winType,omitempty"`                                 // 0=正常，1=时间到
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Settle) Reset() {
	*x = Settle{}
	mi := &file_helloworld_api_api_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settle) ProtoMessage() {}

func (x *Settle) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settle.ProtoReflect.Descriptor instead.
func (*Settle) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{17}
}

func (x *Settle) GetBaseScore() int64 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *Settle) GetSettlePlayers() []*SettlePlayer {
	if x != nil {
		return x.SettlePlayers
	}
	return nil
}

func (x *Settle) GetWinType() int64 {
	if x != nil {
		return x.WinType
	}
	return 0
}

// 表情功能
type EmojiRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomId        string                 `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	PlayerId      int64                  `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	EmojiId       int64                  `protobuf:"varint,3,opt,name=emoji_id,json=emojiId,proto3" json:"emoji_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmojiRequest) Reset() {
	*x = EmojiRequest{}
	mi := &file_helloworld_api_api_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmojiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmojiRequest) ProtoMessage() {}

func (x *EmojiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmojiRequest.ProtoReflect.Descriptor instead.
func (*EmojiRequest) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{18}
}

func (x *EmojiRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *EmojiRequest) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *EmojiRequest) GetEmojiId() int64 {
	if x != nil {
		return x.EmojiId
	}
	return 0
}

// 聊天功能
type ChatMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoomId        string                 `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	PlayerId      int64                  `protobuf:"varint,2,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Text          string                 `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMsg) Reset() {
	*x = ChatMsg{}
	mi := &file_helloworld_api_api_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMsg) ProtoMessage() {}

func (x *ChatMsg) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMsg.ProtoReflect.Descriptor instead.
func (*ChatMsg) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{19}
}

func (x *ChatMsg) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *ChatMsg) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *ChatMsg) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// 玩家主动退出
type C2SLeavRoom struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *C2SLeavRoom) Reset() {
	*x = C2SLeavRoom{}
	mi := &file_helloworld_api_api_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *C2SLeavRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2SLeavRoom) ProtoMessage() {}

func (x *C2SLeavRoom) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2SLeavRoom.ProtoReflect.Descriptor instead.
func (*C2SLeavRoom) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{20}
}

// 玩家离开广播
type S2CLeavRoom struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Code          int32                  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *S2CLeavRoom) Reset() {
	*x = S2CLeavRoom{}
	mi := &file_helloworld_api_api_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S2CLeavRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S2CLeavRoom) ProtoMessage() {}

func (x *S2CLeavRoom) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S2CLeavRoom.ProtoReflect.Descriptor instead.
func (*S2CLeavRoom) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{21}
}

func (x *S2CLeavRoom) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *S2CLeavRoom) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

// 未开始时，玩家请求退出私有房间（房主则解散房间，非房主则离开）
type PrivateRoomLeaveReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrivateRoomLeaveReq) Reset() {
	*x = PrivateRoomLeaveReq{}
	mi := &file_helloworld_api_api_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrivateRoomLeaveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateRoomLeaveReq) ProtoMessage() {}

func (x *PrivateRoomLeaveReq) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateRoomLeaveReq.ProtoReflect.Descriptor instead.
func (*PrivateRoomLeaveReq) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{22}
}

type PrivateRoomLeaveRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	MasterID      int64                  `protobuf:"varint,2,opt,name=masterID,proto3" json:"masterID,omitempty"` // 房主ID
	Uid           int64                  `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`           // 离开玩家ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrivateRoomLeaveRsp) Reset() {
	*x = PrivateRoomLeaveRsp{}
	mi := &file_helloworld_api_api_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrivateRoomLeaveRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateRoomLeaveRsp) ProtoMessage() {}

func (x *PrivateRoomLeaveRsp) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_api_api_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateRoomLeaveRsp.ProtoReflect.Descriptor instead.
func (*PrivateRoomLeaveRsp) Descriptor() ([]byte, []int) {
	return file_helloworld_api_api_proto_rawDescGZIP(), []int{23}
}

func (x *PrivateRoomLeaveRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PrivateRoomLeaveRsp) GetMasterID() int64 {
	if x != nil {
		return x.MasterID
	}
	return 0
}

func (x *PrivateRoomLeaveRsp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

var File_helloworld_api_api_proto protoreflect.FileDescriptor

const file_helloworld_api_api_proto_rawDesc = "" +
	"\n" +
	"\x18helloworld/api/api.proto\x12\x03api\"4\n" +
	"\fBaseResponse\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\"W\n" +
	"\x05Piece\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x10\n" +
	"\x03pos\x18\x02 \x01(\x05R\x03pos\x12\x14\n" +
	"\x05color\x18\x03 \x01(\x05R\x05color\x12\x16\n" +
	"\x06status\x18\x04 \x01(\x05R\x06status\"\x9c\x01\n" +
	"\rPlayerSitDown\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\x03R\bplayerId\x12\x12\n" +
	"\x04seat\x18\x02 \x01(\x05R\x04seat\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x16\n" +
	"\x06avatar\x18\x04 \x01(\tR\x06avatar\x12\x14\n" +
	"\x05color\x18\x05 \x01(\x05R\x05color\x12\x18\n" +
	"\abalance\x18\x06 \x01(\x03R\abalance\"\x8d\x02\n" +
	"\x06Player\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x12\n" +
	"\x04seat\x18\x02 \x01(\x05R\x04seat\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x16\n" +
	"\x06avatar\x18\x04 \x01(\tR\x06avatar\x12\x14\n" +
	"\x05color\x18\x05 \x01(\x05R\x05color\x12-\n" +
	"\x06status\x18\x06 \x01(\x0e2\x15.api.PlayerStatusTypeR\x06status\x12\x18\n" +
	"\abalance\x18\a \x01(\x03R\abalance\x12%\n" +
	"\bdiceList\x18\b \x03(\v2\t.api.DiceR\bdiceList\x12-\n" +
	"\tcanAction\x18\t \x01(\x0e2\x0f.api.ActionTypeR\tcanAction\"\x85\x01\n" +
	"\x05Board\x12\x16\n" +
	"\x06common\x18\x01 \x03(\x05R\x06common\x12\x12\n" +
	"\x04home\x18\x02 \x03(\x05R\x04home\x12\x14\n" +
	"\x05entry\x18\x03 \x03(\x05R\x05entry\x12\x12\n" +
	"\x04safe\x18\x04 \x03(\x05R\x04safe\x12\x10\n" +
	"\x03end\x18\x05 \x03(\x05R\x03end\x12\x14\n" +
	"\x05color\x18\x06 \x03(\x05R\x05color\"\xe5\x03\n" +
	"\tGameState\x12\x17\n" +
	"\agame_id\x18\x01 \x01(\tR\x06gameId\x12\x12\n" +
	"\x04mode\x18\x02 \x01(\x05R\x04mode\x12+\n" +
	"\x06status\x18\x03 \x01(\x0e2\x13.api.LudoGameStatusR\x06status\x12\x18\n" +
	"\atimeout\x18\x04 \x01(\x03R\atimeout\x12\x18\n" +
	"\acurSeat\x18\x05 \x01(\x05R\acurSeat\x12 \n" +
	"\x05board\x18\x06 \x01(\v2\n" +
	".api.BoardR\x05board\x12%\n" +
	"\aplayers\x18\a \x03(\v2\v.api.PlayerR\aplayers\x12\x18\n" +
	"\awinners\x18\b \x03(\tR\awinners\x12\x1c\n" +
	"\tbaseScore\x18\t \x01(\x03R\tbaseScore\x12\x18\n" +
	"\atableId\x18\n" +
	" \x01(\tR\atableId\x12\x14\n" +
	"\x05level\x18\v \x01(\x03R\x05level\x12\x1a\n" +
	"\btimeLeft\x18\f \x01(\x03R\btimeLeft\x12+\n" +
	"\tcur_score\x18\r \x03(\v2\x0e.api.FastScoreR\bcurScore\x12\"\n" +
	"\x06pieces\x18\x0e \x03(\v2\n" +
	".api.PieceR\x06pieces\x12\x1c\n" +
	"\tplayerNum\x18\x0f \x01(\x05R\tplayerNum\x12\x0e\n" +
	"\x02SN\x18\x10 \x01(\x03R\x02SN\"x\n" +
	"\tLudoStart\x12\x1a\n" +
	"\btimeLeft\x18\x01 \x01(\x03R\btimeLeft\x12\"\n" +
	"\x06pieces\x18\x02 \x03(\v2\n" +
	".api.PieceR\x06pieces\x12+\n" +
	"\x06gamers\x18\x03 \x03(\v2\x13.api.GamePlayerInfoR\x06gamers\"L\n" +
	"\x0eGamePlayerInfo\x12\x10\n" +
	"\x03uid\x18\x01 \x01(\x03R\x03uid\x12\x12\n" +
	"\x04seat\x18\x02 \x01(\x05R\x04seat\x12\x14\n" +
	"\x05color\x18\x03 \x01(\x05R\x05color\"0\n" +
	"\x04Dice\x12\x14\n" +
	"\x05value\x18\x01 \x01(\x05R\x05value\x12\x12\n" +
	"\x04used\x18\x02 \x01(\bR\x04used\"\xa2\x01\n" +
	"\n" +
	"ActivePush\x12\x18\n" +
	"\acurSeat\x18\x01 \x01(\x05R\acurSeat\x12#\n" +
	"\x04type\x18\x02 \x01(\x0e2\x0f.api.ActionTypeR\x04type\x12\x14\n" +
	"\x05color\x18\x03 \x01(\x05R\x05color\x12\x18\n" +
	"\atimeout\x18\x04 \x01(\x03R\atimeout\x12%\n" +
	"\bdiceList\x18\x05 \x03(\v2\t.api.DiceR\bdiceList\".\n" +
	"\x0fRollDiceRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\x03R\bplayerId\"\xbf\x01\n" +
	"\x10RollDiceResponse\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\x12\x1b\n" +
	"\tplayer_id\x18\x03 \x01(\x03R\bplayerId\x12\x12\n" +
	"\x04dice\x18\x04 \x01(\x05R\x04dice\x12%\n" +
	"\bdiceList\x18\x05 \x03(\v2\t.api.DiceR\bdiceList\x12-\n" +
	"\x06status\x18\x06 \x01(\x0e2\x15.api.PlayerStatusTypeR\x06status\"d\n" +
	"\vMoveRequest\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\x03R\bplayerId\x12\x19\n" +
	"\bpiece_id\x18\x02 \x01(\x05R\apieceId\x12\x1d\n" +
	"\n" +
	"dice_value\x18\x03 \x01(\x05R\tdiceValue\"\x84\x03\n" +
	"\fMoveResponse\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\x12\x1b\n" +
	"\tplayer_id\x18\x03 \x01(\x03R\bplayerId\x12\x19\n" +
	"\bpiece_id\x18\x04 \x01(\x05R\apieceId\x12\x1d\n" +
	"\n" +
	"dice_value\x18\x05 \x01(\x05R\tdiceValue\x12!\n" +
	"\x04move\x18\x06 \x01(\v2\r.api.DiceMoveR\x04move\x12%\n" +
	"\x06killed\x18\a \x03(\v2\r.api.DiceMoveR\x06killed\x12+\n" +
	"\tcur_score\x18\b \x03(\v2\x0e.api.FastScoreR\bcurScore\x12-\n" +
	"\n" +
	"incr_score\x18\t \x03(\v2\x0e.api.FastScoreR\tincrScore\x12-\n" +
	"\x06status\x18\n" +
	" \x01(\x0e2\x15.api.PlayerStatusTypeR\x06status\x12\"\n" +
	"\x06pieces\x18\v \x03(\v2\n" +
	".api.PieceR\x06pieces\"f\n" +
	"\bDiceMove\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\x03R\bplayerId\x12\x19\n" +
	"\bpiece_id\x18\x02 \x01(\x05R\apieceId\x12\x12\n" +
	"\x04from\x18\x03 \x01(\x05R\x04from\x12\x0e\n" +
	"\x02to\x18\x04 \x01(\x05R\x02to\"1\n" +
	"\tFastScore\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x14\n" +
	"\x05score\x18\x02 \x01(\x03R\x05score\"\x92\x02\n" +
	"\fSettlePlayer\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\x03R\bplayerId\x12\x12\n" +
	"\x04seat\x18\x02 \x01(\x05R\x04seat\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x16\n" +
	"\x06avatar\x18\x04 \x01(\tR\x06avatar\x12\x14\n" +
	"\x05color\x18\x05 \x01(\x05R\x05color\x12\x16\n" +
	"\x06betAll\x18\x06 \x01(\x03R\x06betAll\x12\x14\n" +
	"\x05score\x18\a \x01(\x03R\x05score\x12\x12\n" +
	"\x04rank\x18\b \x01(\x03R\x04rank\x12\x15\n" +
	"\x06is_win\x18\t \x01(\bR\x05isWin\x12\x18\n" +
	"\abalance\x18\n" +
	" \x01(\x03R\abalance\x12\x1c\n" +
	"\tfastScore\x18\v \x01(\x03R\tfastScore\"z\n" +
	"\x06Settle\x12\x1c\n" +
	"\tbaseScore\x18\x01 \x01(\x03R\tbaseScore\x128\n" +
	"\x0esettle_players\x18\x02 \x03(\v2\x11.api.SettlePlayerR\rsettlePlayers\x12\x18\n" +
	"\awinType\x18\x03 \x01(\x03R\awinType\"_\n" +
	"\fEmojiRequest\x12\x17\n" +
	"\aroom_id\x18\x01 \x01(\tR\x06roomId\x12\x1b\n" +
	"\tplayer_id\x18\x02 \x01(\x03R\bplayerId\x12\x19\n" +
	"\bemoji_id\x18\x03 \x01(\x03R\aemojiId\"S\n" +
	"\aChatMsg\x12\x17\n" +
	"\aroom_id\x18\x01 \x01(\tR\x06roomId\x12\x1b\n" +
	"\tplayer_id\x18\x02 \x01(\x03R\bplayerId\x12\x12\n" +
	"\x04text\x18\x03 \x01(\tR\x04text\"\r\n" +
	"\vC2SLeavRoom\"3\n" +
	"\vS2CLeavRoom\x12\x10\n" +
	"\x03uid\x18\x01 \x01(\x03R\x03uid\x12\x12\n" +
	"\x04code\x18\x02 \x01(\x05R\x04code\"\x15\n" +
	"\x13PrivateRoomLeaveReq\"W\n" +
	"\x13PrivateRoomLeaveRsp\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x1a\n" +
	"\bmasterID\x18\x02 \x01(\x03R\bmasterID\x12\x10\n" +
	"\x03uid\x18\x03 \x01(\x03R\x03uid*\xec\x02\n" +
	"\vGameCommand\x12\n" +
	"\n" +
	"\x06MsVoid\x10\x00\x12\x0e\n" +
	"\n" +
	"MsSenceReq\x10\x01\x12\x0f\n" +
	"\vMsSenceResp\x10\x02\x12\x11\n" +
	"\rMsRollDiceReq\x10\x05\x12\x12\n" +
	"\x0eMsRollDiceResp\x10\x06\x12\r\n" +
	"\tMsMoveReq\x10\a\x12\x0e\n" +
	"\n" +
	"MsMoveResp\x10\b\x12\x0e\n" +
	"\n" +
	"MsEmojiReq\x10\t\x12\x0f\n" +
	"\vMsEmojiResp\x10\n" +
	"\x12\r\n" +
	"\tMsChatReq\x10\v\x12\x0e\n" +
	"\n" +
	"MsChatResp\x10\f\x12\x10\n" +
	"\fMsActivePush\x10\r\x12\x0e\n" +
	"\n" +
	"MsStartNtf\x10\x0e\x12\x0f\n" +
	"\vMsSettleNtf\x10\x0f\x12\r\n" +
	"\tMsSitDown\x10\x10\x12\x0e\n" +
	"\n" +
	"MsLeaveReq\x10\x11\x12\x0f\n" +
	"\vMsLeaveResp\x10\x12\x12\x11\n" +
	"\rMsMasterStart\x10\x13\x12\x19\n" +
	"\x15MsPrivateRoomLeaveReq\x10\x14\x12\x19\n" +
	"\x15MsPrivateRoomLeaveRsp\x10\x15*m\n" +
	"\x0eLudoGameStatus\x12\n" +
	"\n" +
	"\x06StVoid\x10\x00\x12\r\n" +
	"\tStUnReady\x10\x01\x12\v\n" +
	"\aStStart\x10\x02\x12\n" +
	"\n" +
	"\x06StDice\x10\x03\x12\n" +
	"\n" +
	"\x06StMove\x10\x04\x12\f\n" +
	"\bStSettle\x10\x05\x12\r\n" +
	"\tStMoveAni\x10\x06*\xd9\x01\n" +
	"\tErrorCode\x12\v\n" +
	"\aSUCCESS\x10\x00\x12\r\n" +
	"\tROOM_FULL\x10\x01\x12\x11\n" +
	"\rINVALID_STAKE\x10\x02\x12\x11\n" +
	"\rNOT_YOUR_TURN\x10\x03\x12\x10\n" +
	"\fINVALID_MOVE\x10\x04\x12\x18\n" +
	"\x14GAME_ALREADY_STARTED\x10\x05\x12\x14\n" +
	"\x10PLAYER_NOT_FOUND\x10\x06\x12\x11\n" +
	"\rNETWORK_ERROR\x10\a\x12\v\n" +
	"\aTIMEOUT\x10\b\x12\x18\n" +
	"\x14INSUFFICIENT_BALANCE\x10\t\x12\x0e\n" +
	"\n" +
	"IsInGaming\x10\n" +
	"*\x80\x01\n" +
	"\x10PlayerStatusType\x12\x18\n" +
	"\x14PlayerStatusTypeVoid\x10\x00\x12\x1a\n" +
	"\x16PlayerStatusTypeIngame\x10\x01\x12\x1b\n" +
	"\x17PlayerStatusTypeOffline\x10\x02\x12\x19\n" +
	"\x15PlayerStatusTypeTrust\x10\x03*0\n" +
	"\n" +
	"ActionType\x12\n" +
	"\n" +
	"\x06ACVoid\x10\x00\x12\n" +
	"\n" +
	"\x06ACDice\x10\x01\x12\n" +
	"\n" +
	"\x06ACMove\x10\x02B\bZ\x06./;apib\x06proto3"

var (
	file_helloworld_api_api_proto_rawDescOnce sync.Once
	file_helloworld_api_api_proto_rawDescData []byte
)

func file_helloworld_api_api_proto_rawDescGZIP() []byte {
	file_helloworld_api_api_proto_rawDescOnce.Do(func() {
		file_helloworld_api_api_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_helloworld_api_api_proto_rawDesc), len(file_helloworld_api_api_proto_rawDesc)))
	})
	return file_helloworld_api_api_proto_rawDescData
}

var file_helloworld_api_api_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_helloworld_api_api_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_helloworld_api_api_proto_goTypes = []any{
	(GameCommand)(0),            // 0: api.GameCommand
	(LudoGameStatus)(0),         // 1: api.LudoGameStatus
	(ErrorCode)(0),              // 2: api.ErrorCode
	(PlayerStatusType)(0),       // 3: api.PlayerStatusType
	(ActionType)(0),             // 4: api.ActionType
	(*BaseResponse)(nil),        // 5: api.BaseResponse
	(*Piece)(nil),               // 6: api.Piece
	(*PlayerSitDown)(nil),       // 7: api.PlayerSitDown
	(*Player)(nil),              // 8: api.Player
	(*Board)(nil),               // 9: api.Board
	(*GameState)(nil),           // 10: api.GameState
	(*LudoStart)(nil),           // 11: api.LudoStart
	(*GamePlayerInfo)(nil),      // 12: api.GamePlayerInfo
	(*Dice)(nil),                // 13: api.Dice
	(*ActivePush)(nil),          // 14: api.ActivePush
	(*RollDiceRequest)(nil),     // 15: api.RollDiceRequest
	(*RollDiceResponse)(nil),    // 16: api.RollDiceResponse
	(*MoveRequest)(nil),         // 17: api.MoveRequest
	(*MoveResponse)(nil),        // 18: api.MoveResponse
	(*DiceMove)(nil),            // 19: api.DiceMove
	(*FastScore)(nil),           // 20: api.FastScore
	(*SettlePlayer)(nil),        // 21: api.SettlePlayer
	(*Settle)(nil),              // 22: api.Settle
	(*EmojiRequest)(nil),        // 23: api.EmojiRequest
	(*ChatMsg)(nil),             // 24: api.ChatMsg
	(*C2SLeavRoom)(nil),         // 25: api.C2SLeavRoom
	(*S2CLeavRoom)(nil),         // 26: api.S2CLeavRoom
	(*PrivateRoomLeaveReq)(nil), // 27: api.PrivateRoomLeaveReq
	(*PrivateRoomLeaveRsp)(nil), // 28: api.PrivateRoomLeaveRsp
}
var file_helloworld_api_api_proto_depIdxs = []int32{
	3,  // 0: api.Player.status:type_name -> api.PlayerStatusType
	13, // 1: api.Player.diceList:type_name -> api.Dice
	4,  // 2: api.Player.canAction:type_name -> api.ActionType
	1,  // 3: api.GameState.status:type_name -> api.LudoGameStatus
	9,  // 4: api.GameState.board:type_name -> api.Board
	8,  // 5: api.GameState.players:type_name -> api.Player
	20, // 6: api.GameState.cur_score:type_name -> api.FastScore
	6,  // 7: api.GameState.pieces:type_name -> api.Piece
	6,  // 8: api.LudoStart.pieces:type_name -> api.Piece
	12, // 9: api.LudoStart.gamers:type_name -> api.GamePlayerInfo
	4,  // 10: api.ActivePush.type:type_name -> api.ActionType
	13, // 11: api.ActivePush.diceList:type_name -> api.Dice
	13, // 12: api.RollDiceResponse.diceList:type_name -> api.Dice
	3,  // 13: api.RollDiceResponse.status:type_name -> api.PlayerStatusType
	19, // 14: api.MoveResponse.move:type_name -> api.DiceMove
	19, // 15: api.MoveResponse.killed:type_name -> api.DiceMove
	20, // 16: api.MoveResponse.cur_score:type_name -> api.FastScore
	20, // 17: api.MoveResponse.incr_score:type_name -> api.FastScore
	3,  // 18: api.MoveResponse.status:type_name -> api.PlayerStatusType
	6,  // 19: api.MoveResponse.pieces:type_name -> api.Piece
	21, // 20: api.Settle.settle_players:type_name -> api.SettlePlayer
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_helloworld_api_api_proto_init() }
func file_helloworld_api_api_proto_init() {
	if File_helloworld_api_api_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_helloworld_api_api_proto_rawDesc), len(file_helloworld_api_api_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_helloworld_api_api_proto_goTypes,
		DependencyIndexes: file_helloworld_api_api_proto_depIdxs,
		EnumInfos:         file_helloworld_api_api_proto_enumTypes,
		MessageInfos:      file_helloworld_api_api_proto_msgTypes,
	}.Build()
	File_helloworld_api_api_proto = out.File
	file_helloworld_api_api_proto_goTypes = nil
	file_helloworld_api_api_proto_depIdxs = nil
}
