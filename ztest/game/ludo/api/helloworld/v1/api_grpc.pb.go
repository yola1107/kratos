// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: helloworld/v1/api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Ludo_SayHelloReq_FullMethodName      = "/ludo.v1.Ludo/SayHelloReq"
	Ludo_OnLoginReq_FullMethodName       = "/ludo.v1.Ludo/OnLoginReq"
	Ludo_OnLogoutReq_FullMethodName      = "/ludo.v1.Ludo/OnLogoutReq"
	Ludo_OnReadyReq_FullMethodName       = "/ludo.v1.Ludo/OnReadyReq"
	Ludo_OnSwitchTableReq_FullMethodName = "/ludo.v1.Ludo/OnSwitchTableReq"
	Ludo_OnSceneReq_FullMethodName       = "/ludo.v1.Ludo/OnSceneReq"
	Ludo_OnChatReq_FullMethodName        = "/ludo.v1.Ludo/OnChatReq"
	Ludo_OnHostingReq_FullMethodName     = "/ludo.v1.Ludo/OnHostingReq"
	Ludo_OnForwardReq_FullMethodName     = "/ludo.v1.Ludo/OnForwardReq"
	Ludo_OnMoveReq_FullMethodName        = "/ludo.v1.Ludo/OnMoveReq"
	Ludo_OnDiceReq_FullMethodName        = "/ludo.v1.Ludo/OnDiceReq"
)

// LudoClient is the client API for Ludo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The ludo service definition.
type LudoClient interface {
	// Sends a greeting
	SayHelloReq(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	OnLoginReq(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error)
	OnLogoutReq(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutRsp, error)
	OnReadyReq(ctx context.Context, in *ReadyReq, opts ...grpc.CallOption) (*ReadyRsp, error)
	OnSwitchTableReq(ctx context.Context, in *SwitchTableReq, opts ...grpc.CallOption) (*SwitchTableRsp, error)
	OnSceneReq(ctx context.Context, in *SceneReq, opts ...grpc.CallOption) (*SceneRsp, error)
	OnChatReq(ctx context.Context, in *ChatReq, opts ...grpc.CallOption) (*ChatRsp, error)
	OnHostingReq(ctx context.Context, in *HostingReq, opts ...grpc.CallOption) (*HostingRsp, error)
	OnForwardReq(ctx context.Context, in *ForwardReq, opts ...grpc.CallOption) (*ForwardRsp, error)
	// game request
	OnMoveReq(ctx context.Context, in *MoveReq, opts ...grpc.CallOption) (*MoveRsp, error)
	OnDiceReq(ctx context.Context, in *DiceReq, opts ...grpc.CallOption) (*DiceRsp, error)
}

type ludoClient struct {
	cc grpc.ClientConnInterface
}

func NewLudoClient(cc grpc.ClientConnInterface) LudoClient {
	return &ludoClient{cc}
}

func (c *ludoClient) SayHelloReq(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Ludo_SayHelloReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ludoClient) OnLoginReq(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, Ludo_OnLoginReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ludoClient) OnLogoutReq(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutRsp)
	err := c.cc.Invoke(ctx, Ludo_OnLogoutReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ludoClient) OnReadyReq(ctx context.Context, in *ReadyReq, opts ...grpc.CallOption) (*ReadyRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadyRsp)
	err := c.cc.Invoke(ctx, Ludo_OnReadyReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ludoClient) OnSwitchTableReq(ctx context.Context, in *SwitchTableReq, opts ...grpc.CallOption) (*SwitchTableRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SwitchTableRsp)
	err := c.cc.Invoke(ctx, Ludo_OnSwitchTableReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ludoClient) OnSceneReq(ctx context.Context, in *SceneReq, opts ...grpc.CallOption) (*SceneRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SceneRsp)
	err := c.cc.Invoke(ctx, Ludo_OnSceneReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ludoClient) OnChatReq(ctx context.Context, in *ChatReq, opts ...grpc.CallOption) (*ChatRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatRsp)
	err := c.cc.Invoke(ctx, Ludo_OnChatReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ludoClient) OnHostingReq(ctx context.Context, in *HostingReq, opts ...grpc.CallOption) (*HostingRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HostingRsp)
	err := c.cc.Invoke(ctx, Ludo_OnHostingReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ludoClient) OnForwardReq(ctx context.Context, in *ForwardReq, opts ...grpc.CallOption) (*ForwardRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ForwardRsp)
	err := c.cc.Invoke(ctx, Ludo_OnForwardReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ludoClient) OnMoveReq(ctx context.Context, in *MoveReq, opts ...grpc.CallOption) (*MoveRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MoveRsp)
	err := c.cc.Invoke(ctx, Ludo_OnMoveReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ludoClient) OnDiceReq(ctx context.Context, in *DiceReq, opts ...grpc.CallOption) (*DiceRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiceRsp)
	err := c.cc.Invoke(ctx, Ludo_OnDiceReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LudoServer is the server API for Ludo service.
// All implementations must embed UnimplementedLudoServer
// for forward compatibility.
//
// The ludo service definition.
type LudoServer interface {
	// Sends a greeting
	SayHelloReq(context.Context, *HelloRequest) (*HelloReply, error)
	OnLoginReq(context.Context, *LoginReq) (*LoginRsp, error)
	OnLogoutReq(context.Context, *LogoutReq) (*LogoutRsp, error)
	OnReadyReq(context.Context, *ReadyReq) (*ReadyRsp, error)
	OnSwitchTableReq(context.Context, *SwitchTableReq) (*SwitchTableRsp, error)
	OnSceneReq(context.Context, *SceneReq) (*SceneRsp, error)
	OnChatReq(context.Context, *ChatReq) (*ChatRsp, error)
	OnHostingReq(context.Context, *HostingReq) (*HostingRsp, error)
	OnForwardReq(context.Context, *ForwardReq) (*ForwardRsp, error)
	// game request
	OnMoveReq(context.Context, *MoveReq) (*MoveRsp, error)
	OnDiceReq(context.Context, *DiceReq) (*DiceRsp, error)
	mustEmbedUnimplementedLudoServer()
}

// UnimplementedLudoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLudoServer struct{}

func (UnimplementedLudoServer) SayHelloReq(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloReq not implemented")
}
func (UnimplementedLudoServer) OnLoginReq(context.Context, *LoginReq) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnLoginReq not implemented")
}
func (UnimplementedLudoServer) OnLogoutReq(context.Context, *LogoutReq) (*LogoutRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnLogoutReq not implemented")
}
func (UnimplementedLudoServer) OnReadyReq(context.Context, *ReadyReq) (*ReadyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnReadyReq not implemented")
}
func (UnimplementedLudoServer) OnSwitchTableReq(context.Context, *SwitchTableReq) (*SwitchTableRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnSwitchTableReq not implemented")
}
func (UnimplementedLudoServer) OnSceneReq(context.Context, *SceneReq) (*SceneRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnSceneReq not implemented")
}
func (UnimplementedLudoServer) OnChatReq(context.Context, *ChatReq) (*ChatRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnChatReq not implemented")
}
func (UnimplementedLudoServer) OnHostingReq(context.Context, *HostingReq) (*HostingRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnHostingReq not implemented")
}
func (UnimplementedLudoServer) OnForwardReq(context.Context, *ForwardReq) (*ForwardRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnForwardReq not implemented")
}
func (UnimplementedLudoServer) OnMoveReq(context.Context, *MoveReq) (*MoveRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnMoveReq not implemented")
}
func (UnimplementedLudoServer) OnDiceReq(context.Context, *DiceReq) (*DiceRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnDiceReq not implemented")
}
func (UnimplementedLudoServer) mustEmbedUnimplementedLudoServer() {}
func (UnimplementedLudoServer) testEmbeddedByValue()              {}

// UnsafeLudoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LudoServer will
// result in compilation errors.
type UnsafeLudoServer interface {
	mustEmbedUnimplementedLudoServer()
}

func RegisterLudoServer(s grpc.ServiceRegistrar, srv LudoServer) {
	// If the following call pancis, it indicates UnimplementedLudoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Ludo_ServiceDesc, srv)
}

func _Ludo_SayHelloReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LudoServer).SayHelloReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ludo_SayHelloReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LudoServer).SayHelloReq(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ludo_OnLoginReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LudoServer).OnLoginReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ludo_OnLoginReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LudoServer).OnLoginReq(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ludo_OnLogoutReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LudoServer).OnLogoutReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ludo_OnLogoutReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LudoServer).OnLogoutReq(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ludo_OnReadyReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LudoServer).OnReadyReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ludo_OnReadyReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LudoServer).OnReadyReq(ctx, req.(*ReadyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ludo_OnSwitchTableReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LudoServer).OnSwitchTableReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ludo_OnSwitchTableReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LudoServer).OnSwitchTableReq(ctx, req.(*SwitchTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ludo_OnSceneReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SceneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LudoServer).OnSceneReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ludo_OnSceneReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LudoServer).OnSceneReq(ctx, req.(*SceneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ludo_OnChatReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LudoServer).OnChatReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ludo_OnChatReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LudoServer).OnChatReq(ctx, req.(*ChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ludo_OnHostingReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LudoServer).OnHostingReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ludo_OnHostingReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LudoServer).OnHostingReq(ctx, req.(*HostingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ludo_OnForwardReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LudoServer).OnForwardReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ludo_OnForwardReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LudoServer).OnForwardReq(ctx, req.(*ForwardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ludo_OnMoveReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LudoServer).OnMoveReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ludo_OnMoveReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LudoServer).OnMoveReq(ctx, req.(*MoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ludo_OnDiceReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LudoServer).OnDiceReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ludo_OnDiceReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LudoServer).OnDiceReq(ctx, req.(*DiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Ludo_ServiceDesc is the grpc.ServiceDesc for Ludo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ludo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ludo.v1.Ludo",
	HandlerType: (*LudoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHelloReq",
			Handler:    _Ludo_SayHelloReq_Handler,
		},
		{
			MethodName: "OnLoginReq",
			Handler:    _Ludo_OnLoginReq_Handler,
		},
		{
			MethodName: "OnLogoutReq",
			Handler:    _Ludo_OnLogoutReq_Handler,
		},
		{
			MethodName: "OnReadyReq",
			Handler:    _Ludo_OnReadyReq_Handler,
		},
		{
			MethodName: "OnSwitchTableReq",
			Handler:    _Ludo_OnSwitchTableReq_Handler,
		},
		{
			MethodName: "OnSceneReq",
			Handler:    _Ludo_OnSceneReq_Handler,
		},
		{
			MethodName: "OnChatReq",
			Handler:    _Ludo_OnChatReq_Handler,
		},
		{
			MethodName: "OnHostingReq",
			Handler:    _Ludo_OnHostingReq_Handler,
		},
		{
			MethodName: "OnForwardReq",
			Handler:    _Ludo_OnForwardReq_Handler,
		},
		{
			MethodName: "OnMoveReq",
			Handler:    _Ludo_OnMoveReq_Handler,
		},
		{
			MethodName: "OnDiceReq",
			Handler:    _Ludo_OnDiceReq_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/v1/api.proto",
}
