// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: helloworld/v1/api.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 通信指令枚举，定义客户端与服务器之间的消息类型
type GameCommand int32

const (
	// ---------------------- 测试指令 ----------------------
	GameCommand_Nothing     GameCommand = 0 //测试空消息
	GameCommand_SayHelloReq GameCommand = 1 //测试请求（返回 HelloReply）
	GameCommand_SayHelloRsp GameCommand = 2 //测试响应
	// ---------------------- 系统请求 ----------------------
	GameCommand_OnLoginReq       GameCommand = 1001 //登录
	GameCommand_OnLoginRsp       GameCommand = 1002
	GameCommand_OnLogoutReq      GameCommand = 1003 //登出
	GameCommand_OnLogoutRsp      GameCommand = 1004
	GameCommand_OnReadyReq       GameCommand = 1005 //准备
	GameCommand_OnReadyRsp       GameCommand = 1006
	GameCommand_OnSwitchTableReq GameCommand = 1007 //换桌
	GameCommand_OnSwitchTableRsp GameCommand = 1008
	GameCommand_OnSceneReq       GameCommand = 1009 //场景信息
	GameCommand_OnSceneRsp       GameCommand = 1010
	GameCommand_OnChatReq        GameCommand = 1011 //聊天
	GameCommand_OnChatRsp        GameCommand = 1012
	GameCommand_OnHostingReq     GameCommand = 1013 //托管
	GameCommand_OnHostingRsp     GameCommand = 1014
	GameCommand_OnForwardReq     GameCommand = 1015 //转发
	GameCommand_OnForwardRsp     GameCommand = 1016
	// ---------------------- 游戏操作请求 ----------------------
	GameCommand_OnMoveReq GameCommand = 1101 //棋子移动请求
	GameCommand_OnMoveRsp GameCommand = 1102 //棋子移动响应（包括被吃信息）
	GameCommand_OnDiceReq GameCommand = 1103 //掷骰子请求
	GameCommand_OnDiceRsp GameCommand = 1104 //掷骰子响应
	// ---------------------- 主动推送消息 ----------------------
	GameCommand_OnUserInfoPush    GameCommand = 2001 //玩家信息（入桌、变动等）
	GameCommand_OnEmojiConfigPush GameCommand = 2002 //表情配置
	GameCommand_OnPlayerQuitPush  GameCommand = 2003 //玩家退出
	GameCommand_OnUserOfflinePush GameCommand = 2004 //玩家断线
	// ---------------------- 游戏流程推送 ----------------------
	GameCommand_OnMatchResultPush GameCommand = 2100 //匹配结果（保留字段）
	GameCommand_OnSendCardPush    GameCommand = 2101 //发牌/初始化棋盘信息
	GameCommand_OnActivePush      GameCommand = 2102 //玩家操作通知（轮到谁）
	GameCommand_OnResultPush      GameCommand = 2200 //游戏结算
)

// Enum value maps for GameCommand.
var (
	GameCommand_name = map[int32]string{
		0:    "Nothing",
		1:    "SayHelloReq",
		2:    "SayHelloRsp",
		1001: "OnLoginReq",
		1002: "OnLoginRsp",
		1003: "OnLogoutReq",
		1004: "OnLogoutRsp",
		1005: "OnReadyReq",
		1006: "OnReadyRsp",
		1007: "OnSwitchTableReq",
		1008: "OnSwitchTableRsp",
		1009: "OnSceneReq",
		1010: "OnSceneRsp",
		1011: "OnChatReq",
		1012: "OnChatRsp",
		1013: "OnHostingReq",
		1014: "OnHostingRsp",
		1015: "OnForwardReq",
		1016: "OnForwardRsp",
		1101: "OnMoveReq",
		1102: "OnMoveRsp",
		1103: "OnDiceReq",
		1104: "OnDiceRsp",
		2001: "OnUserInfoPush",
		2002: "OnEmojiConfigPush",
		2003: "OnPlayerQuitPush",
		2004: "OnUserOfflinePush",
		2100: "OnMatchResultPush",
		2101: "OnSendCardPush",
		2102: "OnActivePush",
		2200: "OnResultPush",
	}
	GameCommand_value = map[string]int32{
		"Nothing":           0,
		"SayHelloReq":       1,
		"SayHelloRsp":       2,
		"OnLoginReq":        1001,
		"OnLoginRsp":        1002,
		"OnLogoutReq":       1003,
		"OnLogoutRsp":       1004,
		"OnReadyReq":        1005,
		"OnReadyRsp":        1006,
		"OnSwitchTableReq":  1007,
		"OnSwitchTableRsp":  1008,
		"OnSceneReq":        1009,
		"OnSceneRsp":        1010,
		"OnChatReq":         1011,
		"OnChatRsp":         1012,
		"OnHostingReq":      1013,
		"OnHostingRsp":      1014,
		"OnForwardReq":      1015,
		"OnForwardRsp":      1016,
		"OnMoveReq":         1101,
		"OnMoveRsp":         1102,
		"OnDiceReq":         1103,
		"OnDiceRsp":         1104,
		"OnUserInfoPush":    2001,
		"OnEmojiConfigPush": 2002,
		"OnPlayerQuitPush":  2003,
		"OnUserOfflinePush": 2004,
		"OnMatchResultPush": 2100,
		"OnSendCardPush":    2101,
		"OnActivePush":      2102,
		"OnResultPush":      2200,
	}
)

func (x GameCommand) Enum() *GameCommand {
	p := new(GameCommand)
	*p = x
	return p
}

func (x GameCommand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameCommand) Descriptor() protoreflect.EnumDescriptor {
	return file_helloworld_v1_api_proto_enumTypes[0].Descriptor()
}

func (GameCommand) Type() protoreflect.EnumType {
	return &file_helloworld_v1_api_proto_enumTypes[0]
}

func (x GameCommand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameCommand.Descriptor instead.
func (GameCommand) EnumDescriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{0}
}

// 可执行动作类型，表示玩家当前可以进行的操作
type ACTION_TYPE int32

const (
	ACTION_TYPE_AcVoid ACTION_TYPE = 0 //无操作，当前无法行动
	ACTION_TYPE_AcDice ACTION_TYPE = 1 //掷骰子动作
	ACTION_TYPE_AcMove ACTION_TYPE = 2 //移动棋子动作
)

// Enum value maps for ACTION_TYPE.
var (
	ACTION_TYPE_name = map[int32]string{
		0: "AcVoid",
		1: "AcDice",
		2: "AcMove",
	}
	ACTION_TYPE_value = map[string]int32{
		"AcVoid": 0,
		"AcDice": 1,
		"AcMove": 2,
	}
)

func (x ACTION_TYPE) Enum() *ACTION_TYPE {
	p := new(ACTION_TYPE)
	*p = x
	return p
}

func (x ACTION_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACTION_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_helloworld_v1_api_proto_enumTypes[1].Descriptor()
}

func (ACTION_TYPE) Type() protoreflect.EnumType {
	return &file_helloworld_v1_api_proto_enumTypes[1]
}

func (x ACTION_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ACTION_TYPE.Descriptor instead.
func (ACTION_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{1}
}

// 游戏结束类型，指示游戏何种状态下结束
type FINISH_TYPE int32

const (
	FINISH_TYPE_NONE              FINISH_TYPE = 0 //游戏未结束
	FINISH_TYPE_PLAYER_HAND_EMPTY FINISH_TYPE = 1 //玩家所有棋子已到达终点（获胜）
	FINISH_TYPE_DECK_EMPTY        FINISH_TYPE = 2 //牌堆为空（备用结束条件）
)

// Enum value maps for FINISH_TYPE.
var (
	FINISH_TYPE_name = map[int32]string{
		0: "NONE",
		1: "PLAYER_HAND_EMPTY",
		2: "DECK_EMPTY",
	}
	FINISH_TYPE_value = map[string]int32{
		"NONE":              0,
		"PLAYER_HAND_EMPTY": 1,
		"DECK_EMPTY":        2,
	}
)

func (x FINISH_TYPE) Enum() *FINISH_TYPE {
	p := new(FINISH_TYPE)
	*p = x
	return p
}

func (x FINISH_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FINISH_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_helloworld_v1_api_proto_enumTypes[2].Descriptor()
}

func (FINISH_TYPE) Type() protoreflect.EnumType {
	return &file_helloworld_v1_api_proto_enumTypes[2]
}

func (x FINISH_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FINISH_TYPE.Descriptor instead.
func (FINISH_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{2}
}

// Hello 测试接口请求
type HelloRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HelloRequest) Reset() {
	*x = HelloRequest{}
	mi := &file_helloworld_v1_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HelloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloRequest) ProtoMessage() {}

func (x *HelloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloRequest.ProtoReflect.Descriptor instead.
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{0}
}

func (x *HelloRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Hello 测试接口响应
type HelloReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HelloReply) Reset() {
	*x = HelloReply{}
	mi := &file_helloworld_v1_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HelloReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloReply) ProtoMessage() {}

func (x *HelloReply) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloReply.ProtoReflect.Descriptor instead.
func (*HelloReply) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{1}
}

func (x *HelloReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 登录请求
type LoginReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int64                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`   //用户ID
	Token         string                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`      //验证token
	Type          int32                  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`       //0创建 1加入 2快速加入
	TableID       int32                  `protobuf:"varint,4,opt,name=tableID,proto3" json:"tableID,omitempty"` //目标桌号
	ChairID       int32                  `protobuf:"varint,5,opt,name=chairID,proto3" json:"chairID,omitempty"` //指定椅子号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginReq) Reset() {
	*x = LoginReq{}
	mi := &file_helloworld_v1_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReq) ProtoMessage() {}

func (x *LoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReq.ProtoReflect.Descriptor instead.
func (*LoginReq) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{2}
}

func (x *LoginReq) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *LoginReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LoginReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *LoginReq) GetTableID() int32 {
	if x != nil {
		return x.TableID
	}
	return 0
}

func (x *LoginReq) GetChairID() int32 {
	if x != nil {
		return x.ChairID
	}
	return 0
}

// 登录响应
type LoginRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`       //错误码（0成功）
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`          //错误信息
	UserID        int64                  `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`   //用户ID
	TableID       int32                  `protobuf:"varint,4,opt,name=tableID,proto3" json:"tableID,omitempty"` //桌号
	ChairID       int32                  `protobuf:"varint,5,opt,name=chairID,proto3" json:"chairID,omitempty"` //椅子号
	ArenaID       int32                  `protobuf:"varint,6,opt,name=arenaID,proto3" json:"arenaID,omitempty"` //场次编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginRsp) Reset() {
	*x = LoginRsp{}
	mi := &file_helloworld_v1_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRsp) ProtoMessage() {}

func (x *LoginRsp) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRsp.ProtoReflect.Descriptor instead.
func (*LoginRsp) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{3}
}

func (x *LoginRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *LoginRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *LoginRsp) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *LoginRsp) GetTableID() int32 {
	if x != nil {
		return x.TableID
	}
	return 0
}

func (x *LoginRsp) GetChairID() int32 {
	if x != nil {
		return x.ChairID
	}
	return 0
}

func (x *LoginRsp) GetArenaID() int32 {
	if x != nil {
		return x.ArenaID
	}
	return 0
}

// 登出请求
type LogoutReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserDBID      int64                  `protobuf:"varint,1,opt,name=userDBID,proto3" json:"userDBID,omitempty"` //用户数据库ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogoutReq) Reset() {
	*x = LogoutReq{}
	mi := &file_helloworld_v1_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogoutReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutReq) ProtoMessage() {}

func (x *LogoutReq) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutReq.ProtoReflect.Descriptor instead.
func (*LogoutReq) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{4}
}

func (x *LogoutReq) GetUserDBID() int64 {
	if x != nil {
		return x.UserDBID
	}
	return 0
}

// 登出响应
type LogoutRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` //错误码 0:成功
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    //错误信息 主动/踢人
	UserID        int64                  `protobuf:"varint,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogoutRsp) Reset() {
	*x = LogoutRsp{}
	mi := &file_helloworld_v1_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogoutRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutRsp) ProtoMessage() {}

func (x *LogoutRsp) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutRsp.ProtoReflect.Descriptor instead.
func (*LogoutRsp) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{5}
}

func (x *LogoutRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *LogoutRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *LogoutRsp) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

// 准备请求
type ReadyReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int64                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	IsReady       bool                   `protobuf:"varint,2,opt,name=isReady,proto3" json:"isReady,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadyReq) Reset() {
	*x = ReadyReq{}
	mi := &file_helloworld_v1_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadyReq) ProtoMessage() {}

func (x *ReadyReq) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadyReq.ProtoReflect.Descriptor instead.
func (*ReadyReq) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{6}
}

func (x *ReadyReq) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ReadyReq) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

// 准备响应
type ReadyRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int64                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	IsReady       bool                   `protobuf:"varint,2,opt,name=isReady,proto3" json:"isReady,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadyRsp) Reset() {
	*x = ReadyRsp{}
	mi := &file_helloworld_v1_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadyRsp) ProtoMessage() {}

func (x *ReadyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadyRsp.ProtoReflect.Descriptor instead.
func (*ReadyRsp) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{7}
}

func (x *ReadyRsp) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ReadyRsp) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

// 换桌请求
type SwitchTableReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int64                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`
	ChairID       int32                  `protobuf:"varint,2,opt,name=chairID,proto3" json:"chairID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwitchTableReq) Reset() {
	*x = SwitchTableReq{}
	mi := &file_helloworld_v1_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwitchTableReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchTableReq) ProtoMessage() {}

func (x *SwitchTableReq) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchTableReq.ProtoReflect.Descriptor instead.
func (*SwitchTableReq) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{8}
}

func (x *SwitchTableReq) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *SwitchTableReq) GetChairID() int32 {
	if x != nil {
		return x.ChairID
	}
	return 0
}

// 换桌响应
type SwitchTableRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	UserID        int64                  `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwitchTableRsp) Reset() {
	*x = SwitchTableRsp{}
	mi := &file_helloworld_v1_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwitchTableRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchTableRsp) ProtoMessage() {}

func (x *SwitchTableRsp) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchTableRsp.ProtoReflect.Descriptor instead.
func (*SwitchTableRsp) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{9}
}

func (x *SwitchTableRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SwitchTableRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *SwitchTableRsp) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

// 聊天请求
type ChatReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int32                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"` //玩家ID
	OpType        int32                  `protobuf:"varint,2,opt,name=opType,proto3" json:"opType,omitempty"` //0表情 1快捷文字 2自定义文字
	FaceID        int32                  `protobuf:"varint,3,opt,name=faceID,proto3" json:"faceID,omitempty"` //表情or聊天ID
	Msg           string                 `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`        //聊天信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatReq) Reset() {
	*x = ChatReq{}
	mi := &file_helloworld_v1_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatReq) ProtoMessage() {}

func (x *ChatReq) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatReq.ProtoReflect.Descriptor instead.
func (*ChatReq) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{10}
}

func (x *ChatReq) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ChatReq) GetOpType() int32 {
	if x != nil {
		return x.OpType
	}
	return 0
}

func (x *ChatReq) GetFaceID() int32 {
	if x != nil {
		return x.FaceID
	}
	return 0
}

func (x *ChatReq) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 聊天响应
type ChatRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int32                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"` //玩家ID
	OpType        int32                  `protobuf:"varint,2,opt,name=opType,proto3" json:"opType,omitempty"` //0表情 1快捷文字 2自定义文字
	FaceID        int32                  `protobuf:"varint,3,opt,name=faceID,proto3" json:"faceID,omitempty"` //表情or聊天ID
	Msg           string                 `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`        //聊天信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatRsp) Reset() {
	*x = ChatRsp{}
	mi := &file_helloworld_v1_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRsp) ProtoMessage() {}

func (x *ChatRsp) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRsp.ProtoReflect.Descriptor instead.
func (*ChatRsp) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{11}
}

func (x *ChatRsp) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *ChatRsp) GetOpType() int32 {
	if x != nil {
		return x.OpType
	}
	return 0
}

func (x *ChatRsp) GetFaceID() int32 {
	if x != nil {
		return x.FaceID
	}
	return 0
}

func (x *ChatRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 自定义转发请求
type ForwardReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          int32                  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` //消息类型
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    //消息内容
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForwardReq) Reset() {
	*x = ForwardReq{}
	mi := &file_helloworld_v1_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForwardReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardReq) ProtoMessage() {}

func (x *ForwardReq) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardReq.ProtoReflect.Descriptor instead.
func (*ForwardReq) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{12}
}

func (x *ForwardReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ForwardReq) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 自定义转发响应
type ForwardRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          int32                  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForwardRsp) Reset() {
	*x = ForwardRsp{}
	mi := &file_helloworld_v1_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForwardRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardRsp) ProtoMessage() {}

func (x *ForwardRsp) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardRsp.ProtoReflect.Descriptor instead.
func (*ForwardRsp) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{13}
}

func (x *ForwardRsp) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ForwardRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 托管请求
type HostingReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsHosting     bool                   `protobuf:"varint,1,opt,name=isHosting,proto3" json:"isHosting,omitempty"` //true启用托管 false取消托管
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostingReq) Reset() {
	*x = HostingReq{}
	mi := &file_helloworld_v1_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostingReq) ProtoMessage() {}

func (x *HostingReq) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostingReq.ProtoReflect.Descriptor instead.
func (*HostingReq) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{14}
}

func (x *HostingReq) GetIsHosting() bool {
	if x != nil {
		return x.IsHosting
	}
	return false
}

// 托管响应
type HostingRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChairID       int32                  `protobuf:"varint,1,opt,name=chairID,proto3" json:"chairID,omitempty"`     //玩家座位
	Status        int32                  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`       //状态：1正常，2托管
	AiNum         int32                  `protobuf:"varint,3,opt,name=aiNum,proto3" json:"aiNum,omitempty"`         //当前局托管次数
	PlayTimes     int32                  `protobuf:"varint,4,opt,name=playTimes,proto3" json:"playTimes,omitempty"` //玩家操作倒计时
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostingRsp) Reset() {
	*x = HostingRsp{}
	mi := &file_helloworld_v1_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostingRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostingRsp) ProtoMessage() {}

func (x *HostingRsp) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostingRsp.ProtoReflect.Descriptor instead.
func (*HostingRsp) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{15}
}

func (x *HostingRsp) GetChairID() int32 {
	if x != nil {
		return x.ChairID
	}
	return 0
}

func (x *HostingRsp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *HostingRsp) GetAiNum() int32 {
	if x != nil {
		return x.AiNum
	}
	return 0
}

func (x *HostingRsp) GetPlayTimes() int32 {
	if x != nil {
		return x.PlayTimes
	}
	return 0
}

// 玩家信息推送
type UserInfoPush struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int64                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`      //用户ID
	ChairID       int32                  `protobuf:"varint,2,opt,name=chairID,proto3" json:"chairID,omitempty"`    //椅子号
	UserName      string                 `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`   //用户名字
	Money         float64                `protobuf:"fixed64,4,opt,name=money,proto3" json:"money,omitempty"`       //玩家金币
	Avatar        string                 `protobuf:"bytes,5,opt,name=avatar,proto3" json:"avatar,omitempty"`       //头像
	AvatarUrl     string                 `protobuf:"bytes,6,opt,name=avatarUrl,proto3" json:"avatarUrl,omitempty"` //头像
	Vip           int32                  `protobuf:"varint,7,opt,name=vip,proto3" json:"vip,omitempty"`            //用户vip
	Status        int32                  `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`      //用户状态，符合原Frame的用户状态 0:free 1:sit(noReady) 2:ready 3:gaming
	Ip            string                 `protobuf:"bytes,9,opt,name=ip,proto3" json:"ip,omitempty"`               //ip地址
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserInfoPush) Reset() {
	*x = UserInfoPush{}
	mi := &file_helloworld_v1_api_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInfoPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoPush) ProtoMessage() {}

func (x *UserInfoPush) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoPush.ProtoReflect.Descriptor instead.
func (*UserInfoPush) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{16}
}

func (x *UserInfoPush) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UserInfoPush) GetChairID() int32 {
	if x != nil {
		return x.ChairID
	}
	return 0
}

func (x *UserInfoPush) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserInfoPush) GetMoney() float64 {
	if x != nil {
		return x.Money
	}
	return 0
}

func (x *UserInfoPush) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserInfoPush) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *UserInfoPush) GetVip() int32 {
	if x != nil {
		return x.Vip
	}
	return 0
}

func (x *UserInfoPush) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserInfoPush) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

// 玩家退出推送
type PlayerQuitPush struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int64                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`   //玩家ID
	ChairID       int32                  `protobuf:"varint,2,opt,name=chairID,proto3" json:"chairID,omitempty"` //椅子号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerQuitPush) Reset() {
	*x = PlayerQuitPush{}
	mi := &file_helloworld_v1_api_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerQuitPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerQuitPush) ProtoMessage() {}

func (x *PlayerQuitPush) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerQuitPush.ProtoReflect.Descriptor instead.
func (*PlayerQuitPush) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{17}
}

func (x *PlayerQuitPush) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *PlayerQuitPush) GetChairID() int32 {
	if x != nil {
		return x.ChairID
	}
	return 0
}

// 用户断线状态推送
type UserOfflinePush struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int64                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`       //用户ID
	IsOffline     bool                   `protobuf:"varint,2,opt,name=isOffline,proto3" json:"isOffline,omitempty"` //用户离线状态
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserOfflinePush) Reset() {
	*x = UserOfflinePush{}
	mi := &file_helloworld_v1_api_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserOfflinePush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOfflinePush) ProtoMessage() {}

func (x *UserOfflinePush) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOfflinePush.ProtoReflect.Descriptor instead.
func (*UserOfflinePush) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{18}
}

func (x *UserOfflinePush) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UserOfflinePush) GetIsOffline() bool {
	if x != nil {
		return x.IsOffline
	}
	return false
}

// 匹配结果推送（已废弃）
type MatchResultPush struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` //状态码，0表示成功
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    //提示信息
	Uid           int64                  `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`   //用户ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchResultPush) Reset() {
	*x = MatchResultPush{}
	mi := &file_helloworld_v1_api_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchResultPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchResultPush) ProtoMessage() {}

func (x *MatchResultPush) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchResultPush.ProtoReflect.Descriptor instead.
func (*MatchResultPush) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{19}
}

func (x *MatchResultPush) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MatchResultPush) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *MatchResultPush) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

// 发牌及棋盘状态推送，通知玩家当前的棋子布局
type SendCardPush struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int64                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`         //接收该消息的玩家ID
	FirstChair    int32                  `protobuf:"varint,2,opt,name=firstChair,proto3" json:"firstChair,omitempty"` //第一位出手玩家的座位号
	Color         int32                  `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`           //当前持方颜色（红黄绿蓝）
	Pieces        []*Piece               `protobuf:"bytes,4,rep,name=pieces,proto3" json:"pieces,omitempty"`          //当前所有棋子的状态列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendCardPush) Reset() {
	*x = SendCardPush{}
	mi := &file_helloworld_v1_api_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendCardPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCardPush) ProtoMessage() {}

func (x *SendCardPush) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCardPush.ProtoReflect.Descriptor instead.
func (*SendCardPush) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{20}
}

func (x *SendCardPush) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *SendCardPush) GetFirstChair() int32 {
	if x != nil {
		return x.FirstChair
	}
	return 0
}

func (x *SendCardPush) GetColor() int32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *SendCardPush) GetPieces() []*Piece {
	if x != nil {
		return x.Pieces
	}
	return nil
}

// 场景请求，客户端请求当前游戏全局状态
type SceneReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        int64                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"` //请求者的用户ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SceneReq) Reset() {
	*x = SceneReq{}
	mi := &file_helloworld_v1_api_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SceneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneReq) ProtoMessage() {}

func (x *SceneReq) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneReq.ProtoReflect.Descriptor instead.
func (*SceneReq) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{21}
}

func (x *SceneReq) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

// 场景响应，返回游戏当前整体状态
type SceneRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BaseScore     float64                `protobuf:"fixed64,1,opt,name=baseScore,proto3" json:"baseScore,omitempty"`   //游戏基础分
	Stage         int32                  `protobuf:"varint,2,opt,name=stage,proto3" json:"stage,omitempty"`            //当前游戏阶段（如等待、掷骰、行动等）
	Timeout       int64                  `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`        //当前阶段剩余时间（秒）
	Active        int32                  `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`          //当前操作玩家椅子号
	FirstChair    int32                  `protobuf:"varint,5,opt,name=firstChair,proto3" json:"firstChair,omitempty"`  //首家玩家椅子号
	BoardConfig   *BoardConfig           `protobuf:"bytes,6,opt,name=boardConfig,proto3" json:"boardConfig,omitempty"` //当前棋盘配置
	Players       []*PlayerInfo          `protobuf:"bytes,7,rep,name=players,proto3" json:"players,omitempty"`         //所有玩家信息列表
	Pieces        []*Piece               `protobuf:"bytes,8,rep,name=pieces,proto3" json:"pieces,omitempty"`           //棋盘所有棋子信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SceneRsp) Reset() {
	*x = SceneRsp{}
	mi := &file_helloworld_v1_api_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SceneRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneRsp) ProtoMessage() {}

func (x *SceneRsp) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneRsp.ProtoReflect.Descriptor instead.
func (*SceneRsp) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{22}
}

func (x *SceneRsp) GetBaseScore() float64 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *SceneRsp) GetStage() int32 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *SceneRsp) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *SceneRsp) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *SceneRsp) GetFirstChair() int32 {
	if x != nil {
		return x.FirstChair
	}
	return 0
}

func (x *SceneRsp) GetBoardConfig() *BoardConfig {
	if x != nil {
		return x.BoardConfig
	}
	return nil
}

func (x *SceneRsp) GetPlayers() []*PlayerInfo {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *SceneRsp) GetPieces() []*Piece {
	if x != nil {
		return x.Pieces
	}
	return nil
}

// 棋盘配置，描述棋盘的基础布局信息
type BoardConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Common        []int32                `protobuf:"varint,1,rep,packed,name=common,proto3" json:"common,omitempty"` //公共路径格子索引（0~51）
	Home          []int32                `protobuf:"varint,2,rep,packed,name=home,proto3" json:"home,omitempty"`     //各玩家的基地起始格子位置
	Entry         []int32                `protobuf:"varint,3,rep,packed,name=entry,proto3" json:"entry,omitempty"`   //各玩家进入公共路径的起始点
	Safe          []int32                `protobuf:"varint,4,rep,packed,name=safe,proto3" json:"safe,omitempty"`     //安全区域位置，棋子不可被吃
	End           []int32                `protobuf:"varint,5,rep,packed,name=end,proto3" json:"end,omitempty"`       //终点区域的格子索引
	Color         []int32                `protobuf:"varint,6,rep,packed,name=color,proto3" json:"color,omitempty"`   //颜色对应索引，红黄绿蓝
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoardConfig) Reset() {
	*x = BoardConfig{}
	mi := &file_helloworld_v1_api_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoardConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoardConfig) ProtoMessage() {}

func (x *BoardConfig) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoardConfig.ProtoReflect.Descriptor instead.
func (*BoardConfig) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{23}
}

func (x *BoardConfig) GetCommon() []int32 {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *BoardConfig) GetHome() []int32 {
	if x != nil {
		return x.Home
	}
	return nil
}

func (x *BoardConfig) GetEntry() []int32 {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *BoardConfig) GetSafe() []int32 {
	if x != nil {
		return x.Safe
	}
	return nil
}

func (x *BoardConfig) GetEnd() []int32 {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *BoardConfig) GetColor() []int32 {
	if x != nil {
		return x.Color
	}
	return nil
}

// 玩家信息，描述单个玩家的状态及操作能力
type PlayerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`                                //玩家ID
	ChairId       int32                  `protobuf:"varint,2,opt,name=chairId,proto3" json:"chairId,omitempty"`                              //玩家座位号
	Status        int32                  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`                                //玩家状态（0:空闲，1:坐下未准备，2:已准备，3:游戏中）
	Hosting       bool                   `protobuf:"varint,4,opt,name=hosting,proto3" json:"hosting,omitempty"`                              //是否处于托管状态（AI代打）
	Offline       bool                   `protobuf:"varint,5,opt,name=offline,proto3" json:"offline,omitempty"`                              //是否断线
	Color         int32                  `protobuf:"varint,6,opt,name=color,proto3" json:"color,omitempty"`                                  //玩家棋子颜色（0红，1黄，2绿，3蓝）
	DiceList      []*Dice                `protobuf:"bytes,7,rep,name=diceList,proto3" json:"diceList,omitempty"`                             //当前玩家持有的骰子列表
	CanAction     ACTION_TYPE            `protobuf:"varint,8,opt,name=canAction,proto3,enum=ludo.v1.ACTION_TYPE" json:"canAction,omitempty"` //玩家当前可执行的动作类型
	MoveDices     []*CanMoveDice         `protobuf:"bytes,9,rep,name=move_dices,json=moveDices,proto3" json:"move_dices,omitempty"`          //当前可用骰子对应的可移动棋子列表
	Ret           *TagRetData            `protobuf:"bytes,10,opt,name=Ret,proto3" json:"Ret,omitempty"`                                      //玩家全路径遍历可移动路径信息（如果有）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayerInfo) Reset() {
	*x = PlayerInfo{}
	mi := &file_helloworld_v1_api_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInfo) ProtoMessage() {}

func (x *PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInfo.ProtoReflect.Descriptor instead.
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{24}
}

func (x *PlayerInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PlayerInfo) GetChairId() int32 {
	if x != nil {
		return x.ChairId
	}
	return 0
}

func (x *PlayerInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PlayerInfo) GetHosting() bool {
	if x != nil {
		return x.Hosting
	}
	return false
}

func (x *PlayerInfo) GetOffline() bool {
	if x != nil {
		return x.Offline
	}
	return false
}

func (x *PlayerInfo) GetColor() int32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *PlayerInfo) GetDiceList() []*Dice {
	if x != nil {
		return x.DiceList
	}
	return nil
}

func (x *PlayerInfo) GetCanAction() ACTION_TYPE {
	if x != nil {
		return x.CanAction
	}
	return ACTION_TYPE_AcVoid
}

func (x *PlayerInfo) GetMoveDices() []*CanMoveDice {
	if x != nil {
		return x.MoveDices
	}
	return nil
}

func (x *PlayerInfo) GetRet() *TagRetData {
	if x != nil {
		return x.Ret
	}
	return nil
}

// 请求掷骰色子
type DiceReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           int64                  `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"` //掷骰玩家ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiceReq) Reset() {
	*x = DiceReq{}
	mi := &file_helloworld_v1_api_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiceReq) ProtoMessage() {}

func (x *DiceReq) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiceReq.ProtoReflect.Descriptor instead.
func (*DiceReq) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{25}
}

func (x *DiceReq) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

type DiceRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Uid           int64                  `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`          //掷骰玩家ID
	Dice          int32                  `protobuf:"varint,4,opt,name=dice,proto3" json:"dice,omitempty"`        //掷骰点数结果
	DiceList      []*Dice                `protobuf:"bytes,5,rep,name=diceList,proto3" json:"diceList,omitempty"` //色子列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiceRsp) Reset() {
	*x = DiceRsp{}
	mi := &file_helloworld_v1_api_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiceRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiceRsp) ProtoMessage() {}

func (x *DiceRsp) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiceRsp.ProtoReflect.Descriptor instead.
func (*DiceRsp) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{26}
}

func (x *DiceRsp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DiceRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DiceRsp) GetUid() int64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *DiceRsp) GetDice() int32 {
	if x != nil {
		return x.Dice
	}
	return 0
}

func (x *DiceRsp) GetDiceList() []*Dice {
	if x != nil {
		return x.DiceList
	}
	return nil
}

// 骰子信息，表示骰子的点数及是否已被使用
type Dice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         int32                  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"` //骰子点数（1~6）
	Used          bool                   `protobuf:"varint,2,opt,name=used,proto3" json:"used,omitempty"`   //是否已使用该骰子点数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Dice) Reset() {
	*x = Dice{}
	mi := &file_helloworld_v1_api_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Dice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dice) ProtoMessage() {}

func (x *Dice) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dice.ProtoReflect.Descriptor instead.
func (*Dice) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{27}
}

func (x *Dice) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Dice) GetUsed() bool {
	if x != nil {
		return x.Used
	}
	return false
}

// 玩家行动请求，玩家指定移动哪个棋子及用哪个骰子点数
type MoveReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`                        //玩家ID
	PieceId       int32                  `protobuf:"varint,2,opt,name=piece_id,json=pieceId,proto3" json:"piece_id,omitempty"`       //移动棋子ID
	DiceValue     int32                  `protobuf:"varint,3,opt,name=dice_value,json=diceValue,proto3" json:"dice_value,omitempty"` //选用的骰子点数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveReq) Reset() {
	*x = MoveReq{}
	mi := &file_helloworld_v1_api_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveReq) ProtoMessage() {}

func (x *MoveReq) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveReq.ProtoReflect.Descriptor instead.
func (*MoveReq) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{28}
}

func (x *MoveReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MoveReq) GetPieceId() int32 {
	if x != nil {
		return x.PieceId
	}
	return 0
}

func (x *MoveReq) GetDiceValue() int32 {
	if x != nil {
		return x.DiceValue
	}
	return 0
}

// 玩家行动响应，包含移动结果和更新的棋盘状态
type MoveRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int64                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`                            //状态码，0为成功
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`                               //消息说明
	DiceValue     int32                  `protobuf:"varint,3,opt,name=dice_value,json=diceValue,proto3" json:"dice_value,omitempty"` //实际使用的骰子点数
	Move          *DiceMove              `protobuf:"bytes,4,opt,name=move,proto3" json:"move,omitempty"`                             //玩家当前移动动作
	Killed        []*DiceMove            `protobuf:"bytes,5,rep,name=killed,proto3" json:"killed,omitempty"`                         //被捕获（吃掉）的对手棋子列表
	Pieces        []*Piece               `protobuf:"bytes,6,rep,name=pieces,proto3" json:"pieces,omitempty"`                         //最新棋盘所有棋子信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveRsp) Reset() {
	*x = MoveRsp{}
	mi := &file_helloworld_v1_api_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveRsp) ProtoMessage() {}

func (x *MoveRsp) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveRsp.ProtoReflect.Descriptor instead.
func (*MoveRsp) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{29}
}

func (x *MoveRsp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MoveRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *MoveRsp) GetDiceValue() int32 {
	if x != nil {
		return x.DiceValue
	}
	return 0
}

func (x *MoveRsp) GetMove() *DiceMove {
	if x != nil {
		return x.Move
	}
	return nil
}

func (x *MoveRsp) GetKilled() []*DiceMove {
	if x != nil {
		return x.Killed
	}
	return nil
}

func (x *MoveRsp) GetPieces() []*Piece {
	if x != nil {
		return x.Pieces
	}
	return nil
}

// 单次棋子移动的详细信息
type DiceMove struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayerId      int64                  `protobuf:"varint,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"` //玩家ID
	PieceId       int32                  `protobuf:"varint,2,opt,name=piece_id,json=pieceId,proto3" json:"piece_id,omitempty"`    //移动棋子ID
	From          int32                  `protobuf:"varint,3,opt,name=from,proto3" json:"from,omitempty"`                         //起始位置
	To            int32                  `protobuf:"varint,4,opt,name=to,proto3" json:"to,omitempty"`                             //目标位置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiceMove) Reset() {
	*x = DiceMove{}
	mi := &file_helloworld_v1_api_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiceMove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiceMove) ProtoMessage() {}

func (x *DiceMove) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiceMove.ProtoReflect.Descriptor instead.
func (*DiceMove) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{30}
}

func (x *DiceMove) GetPlayerId() int64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *DiceMove) GetPieceId() int32 {
	if x != nil {
		return x.PieceId
	}
	return 0
}

func (x *DiceMove) GetFrom() int32 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *DiceMove) GetTo() int32 {
	if x != nil {
		return x.To
	}
	return 0
}

// 单个棋子的状态
type Piece struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`         //棋子ID
	Pos           int32                  `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`       //当前棋子在棋盘的位置索引
	Color         int32                  `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`   //棋子颜色（0红，1黄，2绿，3蓝）
	Status        int32                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"` //棋子状态（0未出发，1公共路径，2终点路径，3到达终点）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Piece) Reset() {
	*x = Piece{}
	mi := &file_helloworld_v1_api_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Piece) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Piece) ProtoMessage() {}

func (x *Piece) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Piece.ProtoReflect.Descriptor instead.
func (*Piece) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{31}
}

func (x *Piece) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Piece) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *Piece) GetColor() int32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *Piece) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 当前活动玩家信息推送，告知客户端谁可操作及可选动作
type ActivePush struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stage         int32                  `protobuf:"varint,1,opt,name=stage,proto3" json:"stage,omitempty"`                                  //当前游戏阶段
	Timeout       int64                  `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`                              //当前阶段剩余时间（秒）
	Active        int32                  `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`                                //当前操作玩家椅子号
	UnusedDices   []int32                `protobuf:"varint,4,rep,packed,name=unusedDices,proto3" json:"unusedDices,omitempty"`               //未使用的骰子点数列表
	CanAction     ACTION_TYPE            `protobuf:"varint,5,opt,name=canAction,proto3,enum=ludo.v1.ACTION_TYPE" json:"canAction,omitempty"` //当前可执行的动作
	MoveDices     []*CanMoveDice         `protobuf:"bytes,6,rep,name=move_dices,json=moveDices,proto3" json:"move_dices,omitempty"`          //可用骰子对应的可移动棋子列表
	Ret           *TagRetData            `protobuf:"bytes,7,opt,name=Ret,proto3" json:"Ret,omitempty"`                                       //全路径遍历移动路径信息（可选）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivePush) Reset() {
	*x = ActivePush{}
	mi := &file_helloworld_v1_api_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivePush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivePush) ProtoMessage() {}

func (x *ActivePush) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivePush.ProtoReflect.Descriptor instead.
func (*ActivePush) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{32}
}

func (x *ActivePush) GetStage() int32 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *ActivePush) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ActivePush) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *ActivePush) GetUnusedDices() []int32 {
	if x != nil {
		return x.UnusedDices
	}
	return nil
}

func (x *ActivePush) GetCanAction() ACTION_TYPE {
	if x != nil {
		return x.CanAction
	}
	return ACTION_TYPE_AcVoid
}

func (x *ActivePush) GetMoveDices() []*CanMoveDice {
	if x != nil {
		return x.MoveDices
	}
	return nil
}

func (x *ActivePush) GetRet() *TagRetData {
	if x != nil {
		return x.Ret
	}
	return nil
}

// 全遍历结果，描述所有可移动路径
type TagRetData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Max           int32                  `protobuf:"varint,1,opt,name=Max,proto3" json:"Max,omitempty"`            //最大可移动步数
	Cache         []int32                `protobuf:"varint,2,rep,packed,name=Cache,proto3" json:"Cache,omitempty"` //预计算缓存数据
	Paths         []*Path                `protobuf:"bytes,3,rep,name=Paths,proto3" json:"Paths,omitempty"`         //所有可行路径集合
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TagRetData) Reset() {
	*x = TagRetData{}
	mi := &file_helloworld_v1_api_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagRetData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagRetData) ProtoMessage() {}

func (x *TagRetData) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagRetData.ProtoReflect.Descriptor instead.
func (*TagRetData) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{33}
}

func (x *TagRetData) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *TagRetData) GetCache() []int32 {
	if x != nil {
		return x.Cache
	}
	return nil
}

func (x *TagRetData) GetPaths() []*Path {
	if x != nil {
		return x.Paths
	}
	return nil
}

// 单条移动路径描述
type Path struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          []int32                `protobuf:"varint,1,rep,packed,name=Path,proto3" json:"Path,omitempty"` //一条路径 格式为 [pieceID, 步数, pieceID, 步数, ...]
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Path) Reset() {
	*x = Path{}
	mi := &file_helloworld_v1_api_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Path) ProtoMessage() {}

func (x *Path) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Path.ProtoReflect.Descriptor instead.
func (*Path) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{34}
}

func (x *Path) GetPath() []int32 {
	if x != nil {
		return x.Path
	}
	return nil
}

// 单个骰子及对应可移动棋子列表
type CanMoveDice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dice          int32                  `protobuf:"varint,1,opt,name=dice,proto3" json:"dice,omitempty"`            //骰子点数
	Pieces        []int32                `protobuf:"varint,2,rep,packed,name=pieces,proto3" json:"pieces,omitempty"` //可用该骰子移动的棋子ID列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CanMoveDice) Reset() {
	*x = CanMoveDice{}
	mi := &file_helloworld_v1_api_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CanMoveDice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanMoveDice) ProtoMessage() {}

func (x *CanMoveDice) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanMoveDice.ProtoReflect.Descriptor instead.
func (*CanMoveDice) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{35}
}

func (x *CanMoveDice) GetDice() int32 {
	if x != nil {
		return x.Dice
	}
	return 0
}

func (x *CanMoveDice) GetPieces() []int32 {
	if x != nil {
		return x.Pieces
	}
	return nil
}

// 游戏结算推送
type ResultPush struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FinishType    FINISH_TYPE            `protobuf:"varint,1,opt,name=finishType,proto3,enum=ludo.v1.FINISH_TYPE" json:"finishType,omitempty"` //结束类型
	WinnerID      int64                  `protobuf:"varint,2,opt,name=winnerID,proto3" json:"winnerID,omitempty"`                              //获胜玩家ID
	Results       []*PlayerResult        `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`                                 //所有玩家结算信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResultPush) Reset() {
	*x = ResultPush{}
	mi := &file_helloworld_v1_api_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResultPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultPush) ProtoMessage() {}

func (x *ResultPush) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultPush.ProtoReflect.Descriptor instead.
func (*ResultPush) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{36}
}

func (x *ResultPush) GetFinishType() FINISH_TYPE {
	if x != nil {
		return x.FinishType
	}
	return FINISH_TYPE_NONE
}

func (x *ResultPush) GetWinnerID() int64 {
	if x != nil {
		return x.WinnerID
	}
	return 0
}

func (x *ResultPush) GetResults() []*PlayerResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// 单个玩家结算详情
type PlayerResult struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UserID         int64                  `protobuf:"varint,1,opt,name=userID,proto3" json:"userID,omitempty"`                 //玩家ID
	ChairID        int32                  `protobuf:"varint,2,opt,name=chairID,proto3" json:"chairID,omitempty"`               //玩家座位号
	IsWinner       bool                   `protobuf:"varint,3,opt,name=isWinner,proto3" json:"isWinner,omitempty"`             //是否获胜
	WinScore       float64                `protobuf:"fixed64,4,opt,name=winScore,proto3" json:"winScore,omitempty"`            //赢得分数
	HandCards      []int32                `protobuf:"varint,5,rep,packed,name=handCards,proto3" json:"handCards,omitempty"`    //剩余棋子（备用字段）
	HandCardsScore int32                  `protobuf:"varint,6,opt,name=handCardsScore,proto3" json:"handCardsScore,omitempty"` //剩余棋子得分（备用字段）
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PlayerResult) Reset() {
	*x = PlayerResult{}
	mi := &file_helloworld_v1_api_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerResult) ProtoMessage() {}

func (x *PlayerResult) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_v1_api_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerResult.ProtoReflect.Descriptor instead.
func (*PlayerResult) Descriptor() ([]byte, []int) {
	return file_helloworld_v1_api_proto_rawDescGZIP(), []int{37}
}

func (x *PlayerResult) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *PlayerResult) GetChairID() int32 {
	if x != nil {
		return x.ChairID
	}
	return 0
}

func (x *PlayerResult) GetIsWinner() bool {
	if x != nil {
		return x.IsWinner
	}
	return false
}

func (x *PlayerResult) GetWinScore() float64 {
	if x != nil {
		return x.WinScore
	}
	return 0
}

func (x *PlayerResult) GetHandCards() []int32 {
	if x != nil {
		return x.HandCards
	}
	return nil
}

func (x *PlayerResult) GetHandCardsScore() int32 {
	if x != nil {
		return x.HandCardsScore
	}
	return 0
}

var File_helloworld_v1_api_proto protoreflect.FileDescriptor

const file_helloworld_v1_api_proto_rawDesc = "" +
	"\n" +
	"\x17helloworld/v1/api.proto\x12\aludo.v1\x1a\x1cgoogle/api/annotations.proto\"\"\n" +
	"\fHelloRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"&\n" +
	"\n" +
	"HelloReply\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\"\x80\x01\n" +
	"\bLoginReq\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\x03R\x06userID\x12\x14\n" +
	"\x05token\x18\x02 \x01(\tR\x05token\x12\x12\n" +
	"\x04type\x18\x03 \x01(\x05R\x04type\x12\x18\n" +
	"\atableID\x18\x04 \x01(\x05R\atableID\x12\x18\n" +
	"\achairID\x18\x05 \x01(\x05R\achairID\"\x96\x01\n" +
	"\bLoginRsp\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\x12\x16\n" +
	"\x06userID\x18\x03 \x01(\x03R\x06userID\x12\x18\n" +
	"\atableID\x18\x04 \x01(\x05R\atableID\x12\x18\n" +
	"\achairID\x18\x05 \x01(\x05R\achairID\x12\x18\n" +
	"\aarenaID\x18\x06 \x01(\x05R\aarenaID\"'\n" +
	"\tLogoutReq\x12\x1a\n" +
	"\buserDBID\x18\x01 \x01(\x03R\buserDBID\"I\n" +
	"\tLogoutRsp\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\x12\x16\n" +
	"\x06UserID\x18\x03 \x01(\x03R\x06UserID\"<\n" +
	"\bReadyReq\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\x03R\x06userID\x12\x18\n" +
	"\aisReady\x18\x02 \x01(\bR\aisReady\"<\n" +
	"\bReadyRsp\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\x03R\x06userID\x12\x18\n" +
	"\aisReady\x18\x02 \x01(\bR\aisReady\"B\n" +
	"\x0eSwitchTableReq\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\x03R\x06userID\x12\x18\n" +
	"\achairID\x18\x02 \x01(\x05R\achairID\"N\n" +
	"\x0eSwitchTableRsp\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\x12\x16\n" +
	"\x06userID\x18\x03 \x01(\x03R\x06userID\"c\n" +
	"\aChatReq\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\x05R\x06userID\x12\x16\n" +
	"\x06opType\x18\x02 \x01(\x05R\x06opType\x12\x16\n" +
	"\x06faceID\x18\x03 \x01(\x05R\x06faceID\x12\x10\n" +
	"\x03msg\x18\x04 \x01(\tR\x03msg\"c\n" +
	"\aChatRsp\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\x05R\x06userID\x12\x16\n" +
	"\x06opType\x18\x02 \x01(\x05R\x06opType\x12\x16\n" +
	"\x06faceID\x18\x03 \x01(\x05R\x06faceID\x12\x10\n" +
	"\x03msg\x18\x04 \x01(\tR\x03msg\"2\n" +
	"\n" +
	"ForwardReq\x12\x12\n" +
	"\x04type\x18\x01 \x01(\x05R\x04type\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\"2\n" +
	"\n" +
	"ForwardRsp\x12\x12\n" +
	"\x04type\x18\x01 \x01(\x05R\x04type\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\"*\n" +
	"\n" +
	"HostingReq\x12\x1c\n" +
	"\tisHosting\x18\x01 \x01(\bR\tisHosting\"r\n" +
	"\n" +
	"HostingRsp\x12\x18\n" +
	"\achairID\x18\x01 \x01(\x05R\achairID\x12\x16\n" +
	"\x06status\x18\x02 \x01(\x05R\x06status\x12\x14\n" +
	"\x05aiNum\x18\x03 \x01(\x05R\x05aiNum\x12\x1c\n" +
	"\tplayTimes\x18\x04 \x01(\x05R\tplayTimes\"\xe2\x01\n" +
	"\fUserInfoPush\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\x03R\x06userID\x12\x18\n" +
	"\achairID\x18\x02 \x01(\x05R\achairID\x12\x1a\n" +
	"\buserName\x18\x03 \x01(\tR\buserName\x12\x14\n" +
	"\x05money\x18\x04 \x01(\x01R\x05money\x12\x16\n" +
	"\x06avatar\x18\x05 \x01(\tR\x06avatar\x12\x1c\n" +
	"\tavatarUrl\x18\x06 \x01(\tR\tavatarUrl\x12\x10\n" +
	"\x03vip\x18\a \x01(\x05R\x03vip\x12\x16\n" +
	"\x06status\x18\b \x01(\x05R\x06status\x12\x0e\n" +
	"\x02ip\x18\t \x01(\tR\x02ip\"B\n" +
	"\x0ePlayerQuitPush\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\x03R\x06userID\x12\x18\n" +
	"\achairID\x18\x02 \x01(\x05R\achairID\"G\n" +
	"\x0fUserOfflinePush\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\x03R\x06userID\x12\x1c\n" +
	"\tisOffline\x18\x02 \x01(\bR\tisOffline\"I\n" +
	"\x0fMatchResultPush\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\x12\x10\n" +
	"\x03uid\x18\x03 \x01(\x03R\x03uid\"\x84\x01\n" +
	"\fSendCardPush\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\x03R\x06userID\x12\x1e\n" +
	"\n" +
	"firstChair\x18\x02 \x01(\x05R\n" +
	"firstChair\x12\x14\n" +
	"\x05color\x18\x03 \x01(\x05R\x05color\x12&\n" +
	"\x06pieces\x18\x04 \x03(\v2\x0e.ludo.v1.PieceR\x06pieces\"\"\n" +
	"\bSceneReq\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\x03R\x06userID\"\x9f\x02\n" +
	"\bSceneRsp\x12\x1c\n" +
	"\tbaseScore\x18\x01 \x01(\x01R\tbaseScore\x12\x14\n" +
	"\x05stage\x18\x02 \x01(\x05R\x05stage\x12\x18\n" +
	"\atimeout\x18\x03 \x01(\x03R\atimeout\x12\x16\n" +
	"\x06active\x18\x04 \x01(\x05R\x06active\x12\x1e\n" +
	"\n" +
	"firstChair\x18\x05 \x01(\x05R\n" +
	"firstChair\x126\n" +
	"\vboardConfig\x18\x06 \x01(\v2\x14.ludo.v1.BoardConfigR\vboardConfig\x12-\n" +
	"\aplayers\x18\a \x03(\v2\x13.ludo.v1.PlayerInfoR\aplayers\x12&\n" +
	"\x06pieces\x18\b \x03(\v2\x0e.ludo.v1.PieceR\x06pieces\"\x8b\x01\n" +
	"\vBoardConfig\x12\x16\n" +
	"\x06common\x18\x01 \x03(\x05R\x06common\x12\x12\n" +
	"\x04home\x18\x02 \x03(\x05R\x04home\x12\x14\n" +
	"\x05entry\x18\x03 \x03(\x05R\x05entry\x12\x12\n" +
	"\x04safe\x18\x04 \x03(\x05R\x04safe\x12\x10\n" +
	"\x03end\x18\x05 \x03(\x05R\x03end\x12\x14\n" +
	"\x05color\x18\x06 \x03(\x05R\x05color\"\xdb\x02\n" +
	"\n" +
	"PlayerInfo\x12\x16\n" +
	"\x06userId\x18\x01 \x01(\x03R\x06userId\x12\x18\n" +
	"\achairId\x18\x02 \x01(\x05R\achairId\x12\x16\n" +
	"\x06status\x18\x03 \x01(\x05R\x06status\x12\x18\n" +
	"\ahosting\x18\x04 \x01(\bR\ahosting\x12\x18\n" +
	"\aoffline\x18\x05 \x01(\bR\aoffline\x12\x14\n" +
	"\x05color\x18\x06 \x01(\x05R\x05color\x12)\n" +
	"\bdiceList\x18\a \x03(\v2\r.ludo.v1.DiceR\bdiceList\x122\n" +
	"\tcanAction\x18\b \x01(\x0e2\x14.ludo.v1.ACTION_TYPER\tcanAction\x123\n" +
	"\n" +
	"move_dices\x18\t \x03(\v2\x14.ludo.v1.CanMoveDiceR\tmoveDices\x12%\n" +
	"\x03Ret\x18\n" +
	" \x01(\v2\x13.ludo.v1.TagRetDataR\x03Ret\"\x1b\n" +
	"\aDiceReq\x12\x10\n" +
	"\x03uid\x18\x01 \x01(\x03R\x03uid\"\x80\x01\n" +
	"\aDiceRsp\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\x12\x10\n" +
	"\x03uid\x18\x03 \x01(\x03R\x03uid\x12\x12\n" +
	"\x04dice\x18\x04 \x01(\x05R\x04dice\x12)\n" +
	"\bdiceList\x18\x05 \x03(\v2\r.ludo.v1.DiceR\bdiceList\"0\n" +
	"\x04Dice\x12\x14\n" +
	"\x05value\x18\x01 \x01(\x05R\x05value\x12\x12\n" +
	"\x04used\x18\x02 \x01(\bR\x04used\"[\n" +
	"\aMoveReq\x12\x16\n" +
	"\x06userId\x18\x01 \x01(\x03R\x06userId\x12\x19\n" +
	"\bpiece_id\x18\x02 \x01(\x05R\apieceId\x12\x1d\n" +
	"\n" +
	"dice_value\x18\x03 \x01(\x05R\tdiceValue\"\xc8\x01\n" +
	"\aMoveRsp\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x03R\x04code\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\x12\x1d\n" +
	"\n" +
	"dice_value\x18\x03 \x01(\x05R\tdiceValue\x12%\n" +
	"\x04move\x18\x04 \x01(\v2\x11.ludo.v1.DiceMoveR\x04move\x12)\n" +
	"\x06killed\x18\x05 \x03(\v2\x11.ludo.v1.DiceMoveR\x06killed\x12&\n" +
	"\x06pieces\x18\x06 \x03(\v2\x0e.ludo.v1.PieceR\x06pieces\"f\n" +
	"\bDiceMove\x12\x1b\n" +
	"\tplayer_id\x18\x01 \x01(\x03R\bplayerId\x12\x19\n" +
	"\bpiece_id\x18\x02 \x01(\x05R\apieceId\x12\x12\n" +
	"\x04from\x18\x03 \x01(\x05R\x04from\x12\x0e\n" +
	"\x02to\x18\x04 \x01(\x05R\x02to\"W\n" +
	"\x05Piece\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x10\n" +
	"\x03pos\x18\x02 \x01(\x05R\x03pos\x12\x14\n" +
	"\x05color\x18\x03 \x01(\x05R\x05color\x12\x16\n" +
	"\x06status\x18\x04 \x01(\x05R\x06status\"\x86\x02\n" +
	"\n" +
	"ActivePush\x12\x14\n" +
	"\x05stage\x18\x01 \x01(\x05R\x05stage\x12\x18\n" +
	"\atimeout\x18\x02 \x01(\x03R\atimeout\x12\x16\n" +
	"\x06active\x18\x03 \x01(\x05R\x06active\x12 \n" +
	"\vunusedDices\x18\x04 \x03(\x05R\vunusedDices\x122\n" +
	"\tcanAction\x18\x05 \x01(\x0e2\x14.ludo.v1.ACTION_TYPER\tcanAction\x123\n" +
	"\n" +
	"move_dices\x18\x06 \x03(\v2\x14.ludo.v1.CanMoveDiceR\tmoveDices\x12%\n" +
	"\x03Ret\x18\a \x01(\v2\x13.ludo.v1.TagRetDataR\x03Ret\"Y\n" +
	"\n" +
	"TagRetData\x12\x10\n" +
	"\x03Max\x18\x01 \x01(\x05R\x03Max\x12\x14\n" +
	"\x05Cache\x18\x02 \x03(\x05R\x05Cache\x12#\n" +
	"\x05Paths\x18\x03 \x03(\v2\r.ludo.v1.PathR\x05Paths\"\x1a\n" +
	"\x04Path\x12\x12\n" +
	"\x04Path\x18\x01 \x03(\x05R\x04Path\"9\n" +
	"\vCanMoveDice\x12\x12\n" +
	"\x04dice\x18\x01 \x01(\x05R\x04dice\x12\x16\n" +
	"\x06pieces\x18\x02 \x03(\x05R\x06pieces\"\x8f\x01\n" +
	"\n" +
	"ResultPush\x124\n" +
	"\n" +
	"finishType\x18\x01 \x01(\x0e2\x14.ludo.v1.FINISH_TYPER\n" +
	"finishType\x12\x1a\n" +
	"\bwinnerID\x18\x02 \x01(\x03R\bwinnerID\x12/\n" +
	"\aresults\x18\x03 \x03(\v2\x15.ludo.v1.PlayerResultR\aresults\"\xbe\x01\n" +
	"\fPlayerResult\x12\x16\n" +
	"\x06userID\x18\x01 \x01(\x03R\x06userID\x12\x18\n" +
	"\achairID\x18\x02 \x01(\x05R\achairID\x12\x1a\n" +
	"\bisWinner\x18\x03 \x01(\bR\bisWinner\x12\x1a\n" +
	"\bwinScore\x18\x04 \x01(\x01R\bwinScore\x12\x1c\n" +
	"\thandCards\x18\x05 \x03(\x05R\thandCards\x12&\n" +
	"\x0ehandCardsScore\x18\x06 \x01(\x05R\x0ehandCardsScore*\xcf\x04\n" +
	"\vGameCommand\x12\v\n" +
	"\aNothing\x10\x00\x12\x0f\n" +
	"\vSayHelloReq\x10\x01\x12\x0f\n" +
	"\vSayHelloRsp\x10\x02\x12\x0f\n" +
	"\n" +
	"OnLoginReq\x10\xe9\a\x12\x0f\n" +
	"\n" +
	"OnLoginRsp\x10\xea\a\x12\x10\n" +
	"\vOnLogoutReq\x10\xeb\a\x12\x10\n" +
	"\vOnLogoutRsp\x10\xec\a\x12\x0f\n" +
	"\n" +
	"OnReadyReq\x10\xed\a\x12\x0f\n" +
	"\n" +
	"OnReadyRsp\x10\xee\a\x12\x15\n" +
	"\x10OnSwitchTableReq\x10\xef\a\x12\x15\n" +
	"\x10OnSwitchTableRsp\x10\xf0\a\x12\x0f\n" +
	"\n" +
	"OnSceneReq\x10\xf1\a\x12\x0f\n" +
	"\n" +
	"OnSceneRsp\x10\xf2\a\x12\x0e\n" +
	"\tOnChatReq\x10\xf3\a\x12\x0e\n" +
	"\tOnChatRsp\x10\xf4\a\x12\x11\n" +
	"\fOnHostingReq\x10\xf5\a\x12\x11\n" +
	"\fOnHostingRsp\x10\xf6\a\x12\x11\n" +
	"\fOnForwardReq\x10\xf7\a\x12\x11\n" +
	"\fOnForwardRsp\x10\xf8\a\x12\x0e\n" +
	"\tOnMoveReq\x10\xcd\b\x12\x0e\n" +
	"\tOnMoveRsp\x10\xce\b\x12\x0e\n" +
	"\tOnDiceReq\x10\xcf\b\x12\x0e\n" +
	"\tOnDiceRsp\x10\xd0\b\x12\x13\n" +
	"\x0eOnUserInfoPush\x10\xd1\x0f\x12\x16\n" +
	"\x11OnEmojiConfigPush\x10\xd2\x0f\x12\x15\n" +
	"\x10OnPlayerQuitPush\x10\xd3\x0f\x12\x16\n" +
	"\x11OnUserOfflinePush\x10\xd4\x0f\x12\x16\n" +
	"\x11OnMatchResultPush\x10\xb4\x10\x12\x13\n" +
	"\x0eOnSendCardPush\x10\xb5\x10\x12\x11\n" +
	"\fOnActivePush\x10\xb6\x10\x12\x11\n" +
	"\fOnResultPush\x10\x98\x11*1\n" +
	"\vACTION_TYPE\x12\n" +
	"\n" +
	"\x06AcVoid\x10\x00\x12\n" +
	"\n" +
	"\x06AcDice\x10\x01\x12\n" +
	"\n" +
	"\x06AcMove\x10\x02*>\n" +
	"\vFINISH_TYPE\x12\b\n" +
	"\x04NONE\x10\x00\x12\x15\n" +
	"\x11PLAYER_HAND_EMPTY\x10\x01\x12\x0e\n" +
	"\n" +
	"DECK_EMPTY\x10\x022\xa7\a\n" +
	"\x04Ludo\x12O\n" +
	"\vSayHelloReq\x12\x15.ludo.v1.HelloRequest\x1a\x13.ludo.v1.HelloReply\"\x14\x82\xd3\xe4\x93\x02\x0e\x12\f/ludo/{name}\x12O\n" +
	"\n" +
	"OnLoginReq\x12\x11.ludo.v1.LoginReq\x1a\x11.ludo.v1.LoginRsp\"\x1b\x82\xd3\xe4\x93\x02\x15:\x01*\"\x10/ludo/OnLoginReq\x12S\n" +
	"\vOnLogoutReq\x12\x12.ludo.v1.LogoutReq\x1a\x12.ludo.v1.LogoutRsp\"\x1c\x82\xd3\xe4\x93\x02\x16:\x01*\"\x11/ludo/OnLogoutReq\x12O\n" +
	"\n" +
	"OnReadyReq\x12\x11.ludo.v1.ReadyReq\x1a\x11.ludo.v1.ReadyRsp\"\x1b\x82\xd3\xe4\x93\x02\x15:\x01*\"\x10/ludo/OnReadyReq\x12g\n" +
	"\x10OnSwitchTableReq\x12\x17.ludo.v1.SwitchTableReq\x1a\x17.ludo.v1.SwitchTableRsp\"!\x82\xd3\xe4\x93\x02\x1b:\x01*\"\x16/ludo/OnSwitchTableReq\x12O\n" +
	"\n" +
	"OnSceneReq\x12\x11.ludo.v1.SceneReq\x1a\x11.ludo.v1.SceneRsp\"\x1b\x82\xd3\xe4\x93\x02\x15:\x01*\"\x10/ludo/OnSceneReq\x12Q\n" +
	"\tOnChatReq\x12\x10.ludo.v1.ChatReq\x1a\x10.ludo.v1.ChatRsp\" \x82\xd3\xe4\x93\x02\x1a:\x01*\"\x15/ludo/OnChatOrFaceReq\x12W\n" +
	"\fOnHostingReq\x12\x13.ludo.v1.HostingReq\x1a\x13.ludo.v1.HostingRsp\"\x1d\x82\xd3\xe4\x93\x02\x17:\x01*\"\x12/ludo/OnHostingReq\x12W\n" +
	"\fOnForwardReq\x12\x13.ludo.v1.ForwardReq\x1a\x13.ludo.v1.ForwardRsp\"\x1d\x82\xd3\xe4\x93\x02\x17:\x01*\"\x12/ludo/OnForwardReq\x12K\n" +
	"\tOnMoveReq\x12\x10.ludo.v1.MoveReq\x1a\x10.ludo.v1.MoveRsp\"\x1a\x82\xd3\xe4\x93\x02\x14:\x01*\"\x0f/ludo/OnMoveReq\x12K\n" +
	"\tOnDiceReq\x12\x10.ludo.v1.DiceReq\x1a\x10.ludo.v1.DiceRsp\"\x1a\x82\xd3\xe4\x93\x02\x14:\x01*\"\x0f/ludo/OnDiceReqB\x1bZ\x19ludo/api/helloworld/v1;v1b\x06proto3"

var (
	file_helloworld_v1_api_proto_rawDescOnce sync.Once
	file_helloworld_v1_api_proto_rawDescData []byte
)

func file_helloworld_v1_api_proto_rawDescGZIP() []byte {
	file_helloworld_v1_api_proto_rawDescOnce.Do(func() {
		file_helloworld_v1_api_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_helloworld_v1_api_proto_rawDesc), len(file_helloworld_v1_api_proto_rawDesc)))
	})
	return file_helloworld_v1_api_proto_rawDescData
}

var file_helloworld_v1_api_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_helloworld_v1_api_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_helloworld_v1_api_proto_goTypes = []any{
	(GameCommand)(0),        // 0: ludo.v1.GameCommand
	(ACTION_TYPE)(0),        // 1: ludo.v1.ACTION_TYPE
	(FINISH_TYPE)(0),        // 2: ludo.v1.FINISH_TYPE
	(*HelloRequest)(nil),    // 3: ludo.v1.HelloRequest
	(*HelloReply)(nil),      // 4: ludo.v1.HelloReply
	(*LoginReq)(nil),        // 5: ludo.v1.LoginReq
	(*LoginRsp)(nil),        // 6: ludo.v1.LoginRsp
	(*LogoutReq)(nil),       // 7: ludo.v1.LogoutReq
	(*LogoutRsp)(nil),       // 8: ludo.v1.LogoutRsp
	(*ReadyReq)(nil),        // 9: ludo.v1.ReadyReq
	(*ReadyRsp)(nil),        // 10: ludo.v1.ReadyRsp
	(*SwitchTableReq)(nil),  // 11: ludo.v1.SwitchTableReq
	(*SwitchTableRsp)(nil),  // 12: ludo.v1.SwitchTableRsp
	(*ChatReq)(nil),         // 13: ludo.v1.ChatReq
	(*ChatRsp)(nil),         // 14: ludo.v1.ChatRsp
	(*ForwardReq)(nil),      // 15: ludo.v1.ForwardReq
	(*ForwardRsp)(nil),      // 16: ludo.v1.ForwardRsp
	(*HostingReq)(nil),      // 17: ludo.v1.HostingReq
	(*HostingRsp)(nil),      // 18: ludo.v1.HostingRsp
	(*UserInfoPush)(nil),    // 19: ludo.v1.UserInfoPush
	(*PlayerQuitPush)(nil),  // 20: ludo.v1.PlayerQuitPush
	(*UserOfflinePush)(nil), // 21: ludo.v1.UserOfflinePush
	(*MatchResultPush)(nil), // 22: ludo.v1.MatchResultPush
	(*SendCardPush)(nil),    // 23: ludo.v1.SendCardPush
	(*SceneReq)(nil),        // 24: ludo.v1.SceneReq
	(*SceneRsp)(nil),        // 25: ludo.v1.SceneRsp
	(*BoardConfig)(nil),     // 26: ludo.v1.BoardConfig
	(*PlayerInfo)(nil),      // 27: ludo.v1.PlayerInfo
	(*DiceReq)(nil),         // 28: ludo.v1.DiceReq
	(*DiceRsp)(nil),         // 29: ludo.v1.DiceRsp
	(*Dice)(nil),            // 30: ludo.v1.Dice
	(*MoveReq)(nil),         // 31: ludo.v1.MoveReq
	(*MoveRsp)(nil),         // 32: ludo.v1.MoveRsp
	(*DiceMove)(nil),        // 33: ludo.v1.DiceMove
	(*Piece)(nil),           // 34: ludo.v1.Piece
	(*ActivePush)(nil),      // 35: ludo.v1.ActivePush
	(*TagRetData)(nil),      // 36: ludo.v1.TagRetData
	(*Path)(nil),            // 37: ludo.v1.Path
	(*CanMoveDice)(nil),     // 38: ludo.v1.CanMoveDice
	(*ResultPush)(nil),      // 39: ludo.v1.ResultPush
	(*PlayerResult)(nil),    // 40: ludo.v1.PlayerResult
}
var file_helloworld_v1_api_proto_depIdxs = []int32{
	34, // 0: ludo.v1.SendCardPush.pieces:type_name -> ludo.v1.Piece
	26, // 1: ludo.v1.SceneRsp.boardConfig:type_name -> ludo.v1.BoardConfig
	27, // 2: ludo.v1.SceneRsp.players:type_name -> ludo.v1.PlayerInfo
	34, // 3: ludo.v1.SceneRsp.pieces:type_name -> ludo.v1.Piece
	30, // 4: ludo.v1.PlayerInfo.diceList:type_name -> ludo.v1.Dice
	1,  // 5: ludo.v1.PlayerInfo.canAction:type_name -> ludo.v1.ACTION_TYPE
	38, // 6: ludo.v1.PlayerInfo.move_dices:type_name -> ludo.v1.CanMoveDice
	36, // 7: ludo.v1.PlayerInfo.Ret:type_name -> ludo.v1.TagRetData
	30, // 8: ludo.v1.DiceRsp.diceList:type_name -> ludo.v1.Dice
	33, // 9: ludo.v1.MoveRsp.move:type_name -> ludo.v1.DiceMove
	33, // 10: ludo.v1.MoveRsp.killed:type_name -> ludo.v1.DiceMove
	34, // 11: ludo.v1.MoveRsp.pieces:type_name -> ludo.v1.Piece
	1,  // 12: ludo.v1.ActivePush.canAction:type_name -> ludo.v1.ACTION_TYPE
	38, // 13: ludo.v1.ActivePush.move_dices:type_name -> ludo.v1.CanMoveDice
	36, // 14: ludo.v1.ActivePush.Ret:type_name -> ludo.v1.TagRetData
	37, // 15: ludo.v1.TagRetData.Paths:type_name -> ludo.v1.Path
	2,  // 16: ludo.v1.ResultPush.finishType:type_name -> ludo.v1.FINISH_TYPE
	40, // 17: ludo.v1.ResultPush.results:type_name -> ludo.v1.PlayerResult
	3,  // 18: ludo.v1.Ludo.SayHelloReq:input_type -> ludo.v1.HelloRequest
	5,  // 19: ludo.v1.Ludo.OnLoginReq:input_type -> ludo.v1.LoginReq
	7,  // 20: ludo.v1.Ludo.OnLogoutReq:input_type -> ludo.v1.LogoutReq
	9,  // 21: ludo.v1.Ludo.OnReadyReq:input_type -> ludo.v1.ReadyReq
	11, // 22: ludo.v1.Ludo.OnSwitchTableReq:input_type -> ludo.v1.SwitchTableReq
	24, // 23: ludo.v1.Ludo.OnSceneReq:input_type -> ludo.v1.SceneReq
	13, // 24: ludo.v1.Ludo.OnChatReq:input_type -> ludo.v1.ChatReq
	17, // 25: ludo.v1.Ludo.OnHostingReq:input_type -> ludo.v1.HostingReq
	15, // 26: ludo.v1.Ludo.OnForwardReq:input_type -> ludo.v1.ForwardReq
	31, // 27: ludo.v1.Ludo.OnMoveReq:input_type -> ludo.v1.MoveReq
	28, // 28: ludo.v1.Ludo.OnDiceReq:input_type -> ludo.v1.DiceReq
	4,  // 29: ludo.v1.Ludo.SayHelloReq:output_type -> ludo.v1.HelloReply
	6,  // 30: ludo.v1.Ludo.OnLoginReq:output_type -> ludo.v1.LoginRsp
	8,  // 31: ludo.v1.Ludo.OnLogoutReq:output_type -> ludo.v1.LogoutRsp
	10, // 32: ludo.v1.Ludo.OnReadyReq:output_type -> ludo.v1.ReadyRsp
	12, // 33: ludo.v1.Ludo.OnSwitchTableReq:output_type -> ludo.v1.SwitchTableRsp
	25, // 34: ludo.v1.Ludo.OnSceneReq:output_type -> ludo.v1.SceneRsp
	14, // 35: ludo.v1.Ludo.OnChatReq:output_type -> ludo.v1.ChatRsp
	18, // 36: ludo.v1.Ludo.OnHostingReq:output_type -> ludo.v1.HostingRsp
	16, // 37: ludo.v1.Ludo.OnForwardReq:output_type -> ludo.v1.ForwardRsp
	32, // 38: ludo.v1.Ludo.OnMoveReq:output_type -> ludo.v1.MoveRsp
	29, // 39: ludo.v1.Ludo.OnDiceReq:output_type -> ludo.v1.DiceRsp
	29, // [29:40] is the sub-list for method output_type
	18, // [18:29] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_helloworld_v1_api_proto_init() }
func file_helloworld_v1_api_proto_init() {
	if File_helloworld_v1_api_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_helloworld_v1_api_proto_rawDesc), len(file_helloworld_v1_api_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_helloworld_v1_api_proto_goTypes,
		DependencyIndexes: file_helloworld_v1_api_proto_depIdxs,
		EnumInfos:         file_helloworld_v1_api_proto_enumTypes,
		MessageInfos:      file_helloworld_v1_api_proto_msgTypes,
	}.Build()
	File_helloworld_v1_api_proto = out.File
	file_helloworld_v1_api_proto_goTypes = nil
	file_helloworld_v1_api_proto_depIdxs = nil
}
