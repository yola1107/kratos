syntax = "proto3";

package helloworld.v1;

import "google/api/annotations.proto";

option go_package           = "api-server/api/helloworld/v1;v1";
option java_multiple_files  = true;
option java_package         = "dev.kratos.api.helloworld.v1";
option java_outer_classname = "HelloworldProtoV1";

enum GameCommand {
    Nothing     = 0;  //
    SayHelloReq = 1;  //
    SayHelloRsp = 2;

    // request
    OnLoginReq       = 1001;  //登录
    OnLoginRsp       = 1002;
    OnLogoutReq      = 1003;  //登出
    OnLogoutRsp      = 1004;
    OnReadyReq       = 1005;  //准备
    OnReadyRsp       = 1006;
    OnSwitchTableReq = 1007;  //换桌
    OnSwitchTableRsp = 1008;
    OnSceneReq       = 1009;  //场景信息
    OnSceneRsp       = 1010;
    OnChatReq        = 1011;  //聊天
    OnChatRsp        = 1012;
    OnHostingReq     = 1013;  //托管
    OnHostingRsp     = 1014;
    OnForwardReq     = 1015;  //转发
    OnForwardRsp     = 1016;

    // game request
    OnActionReq   = 1101;  //玩家动作
    OnActionRsp   = 1102;
    OnAutoCallReq = 1103;  //自动跟注
    OnAutoCallRsp = 1104;

    // push
    OnUserInfoPush    = 2001;  //玩家信息
    OnEmojiConfigPush = 2002;  //表情道具配置
    OnPlayerQuitPush  = 2003;  //玩家退出
    OnUserOfflinePush = 2004;  //用户断线通知

    // game push
    OnSetBankerPush = 2100;  //庄家通知
    OnSendCardPush  = 2101;  //发牌通知
    OnActivePush    = 2102;  //活动玩家通知
    OnRoundSeePush  = 2103;  //自动看牌通知
    OnShowCardPush  = 2104;  //亮牌通知
    OnResultPush    = 2200;  //结算通知
}

enum ACTION {
    Invalid     = 0;  //
    CALL        = 1;  //"跟注"
    CALL_AUTO   = 2;  //"自动跟注"
    RAISE       = 3;  //"加注"
    SEE         = 4;  //"看牌"
    PACK        = 5;  //"弃牌"
    COMPARE     = 6;  //"比牌"
    SIDER       = 7;  //"提前比牌"
    SIDER_REPLY = 8;  //"提前比牌回应"
    SHOW        = 9;  //"亮牌"
}

// The greeting service definition.
service Greeter {
    // Sends a greeting
    rpc SayHelloReq(HelloRequest) returns (HelloReply) {
        option (google.api.http) = {
            get: "/helloworld/{name}"
        };
    }

    rpc OnLoginReq(LoginReq) returns (LoginRsp) {
        option (google.api.http) = {
            post: "/greeter/OnLoginReq"
            body: "*"
        };
    }
    rpc OnLogoutReq(LogoutReq) returns (LogoutRsp) {
        option (google.api.http) = {
            post: "/greeter/OnLogoutReq"
            body: "*"
        };
    }
    rpc OnReadyReq(ReadyReq) returns (ReadyRsp) {
        option (google.api.http) = {
            post: "/greeter/OnReadyReq"
            body: "*"
        };
    }
    rpc OnSwitchTableReq(SwitchTableReq) returns (SwitchTableRsp) {
        option (google.api.http) = {
            post: "/greeter/OnSwitchTableReq"
            body: "*"
        };
    }
    rpc OnSceneReq(SceneReq) returns (SceneRsp) {
        option (google.api.http) = {
            post: "/greeter/OnSceneReq"
            body: "*"
        };
    }
    rpc OnChatReq(ChatReq) returns (ChatRsp) {
        option (google.api.http) = {
            post: "/greeter/OnChatOrFaceReq"
            body: "*"
        };
    }
    rpc OnHostingReq(HostingReq) returns (HostingRsp) {
        option (google.api.http) = {
            post: "/greeter/OnHostingReq"
            body: "*"
        };
    }
    rpc OnForwardReq(ForwardReq) returns (ForwardRsp) {
        option (google.api.http) = {
            post: "/greeter/OnForwardReq"
            body: "*"
        };
    }

    // game request
    rpc OnActionReq(ActionReq) returns (ActionRsp) {
        option (google.api.http) = {
            post: "/greeter/OnActionReq"
            body: "*"
        };
    }
    rpc OnAutoCallReq(AutoCallReq) returns (AutoCallRsp) {
        option (google.api.http) = {
            post: "/greeter/OnAutoCallReq"
            body: "*"
        };
    }
}

// The request message containing the user's name.
message HelloRequest {
    string name = 1;
}

// The response message containing the greetings
message HelloReply {
    string message = 1;
}

// 登录
message LoginReq {
    int64 userID  = 1;  //ID
    string token  = 2;  //token
    int32 type    = 3;  //0:创建，1：加入 2:快速加入
    int32 tableID = 4;  //桌子号
    int32 chairID = 5;  //椅子号
}

message LoginRsp {
    int32 code    = 1;  //错误码
    string msg    = 2;  //错误信息
    int64 userID  = 3;  //ID
    int32 tableID = 4;
    int32 chairID = 5;
    int32 arenaID = 6;
}

// 登出
message LogoutReq {
    int64 userDBID = 1;
}

message LogoutRsp {
    int32 code = 1;  //错误码 0:成功
    string msg = 2;  //错误信息 主动/踢人
}

// 准备
message ReadyReq {
    int64 userID = 1;
    bool isReady = 2;
}

message ReadyRsp {
    int64 userID = 1;
    bool isReady = 2;
}

// 换桌
message SwitchTableReq {
    int64 userID  = 1;
    int32 chairId = 2;
}

message SwitchTableRsp {
    int32 code   = 1;
    string msg   = 2;
    int64 userID = 3;
}

// 聊天/表情
message ChatReq {
    int32 userID = 1;  //玩家ID
    int32 opType = 2;  //0表情 1快捷文字 2自定义文字
    int32 faceID = 3;  //表情or聊天ID
    string msg   = 4;  //聊天信息
}

message ChatRsp {
    int32 userID = 1;  //玩家ID
    int32 opType = 2;  //0表情 1快捷文字 2自定义文字
    int32 faceID = 3;  //表情or聊天ID
    string msg   = 4;  //聊天信息
}

// 转发
message ForwardReq {
    int32 type = 1;
    string msg = 2;
}

message ForwardRsp {
    int32 type = 1;
    string msg = 2;
}

// 托管
message HostingReq {
    bool isHosting = 1;  // true 托管； false 取消托管
}

message HostingRsp {
    int32 chairId   = 1;  //座位号
    int32 status    = 2;  //1:正常  2:托管
    int32 aiNum     = 3;  //玩家（非断线）超时引起的当前局的托管次数
    int32 playTimes = 4;  //操作时间
}

//
message UserInfoPush {
    int64 userID     = 1;  //用户ID
    int32 chairId    = 2;  //椅子号
    string userName  = 3;  //用户名字
    double money     = 4;  //玩家金币
    string avatar    = 5;  // 头像
    string avatarUrl = 6;  // 头像
    int32 vip        = 7;  //用户vip
    int32 status     = 8;  //用户状态，符合原Frame的用户状态 0:free 1:sit(noReady) 2:ready 3:gaming
    string ip        = 9;  //ip地址
}

// 场景信息
message SceneReq {
    int64 userID = 1;
}

message SceneRsp {
    //配置信息
    double baseScore   = 1;  //
    double chLimit     = 2;  //
    double potLimit    = 3;  //
    int32 autoSeeRound = 4;  //
    //游戏状态
    int32 stage     = 5;  //游戏的状态
    int64 timeout   = 6;  //剩余时间 s
    int32 active    = 7;  //当前操作位置
    int32 banker    = 8;  //庄家位置
    int32 curRound  = 9;
    double totalBet = 10;  //
    //玩家信息
    repeated PlayerScene players = 11;
}

message PlayerScene {
    int64 userID          = 1;   //玩家ID
    int32 chairId         = 2;   //玩家座位号
    int32 status          = 3;   //玩家状态
    bool hosting          = 4;   //是否托管
    bool offline          = 5;   //是否断线
    int32 lastOp          = 6;   //最后操作
    double curBet         = 7;   //
    double totalBet       = 8;   //
    bool see              = 9;   //
    bool isAutoCall       = 10;  //自动跟注 0:未开启 1:已开启
    bool isPaying         = 11;  //支付状态 1:支付中
    CardsInfo cards       = 12;  //手牌
    repeated ACTION canOp = 13;  //可操作列表
}

//
message SetBankerPush {
    int32 ChairId = 1;  //庄家chairId
}

//
message SendCardPush {
    int64 UserID    = 1;
    CardsInfo cards = 2;  //手牌
}

message CardsInfo {
    repeated int32 hands = 1;
    int32 Type           = 2;
}

//用户断线通知
message UserOfflinePush {
    int64 userID   = 1;  //用户ID
    bool isOffline = 2;  //用户离线状态
}

//离桌通知
message PlayerQuitPush {
    int64 userID  = 1;  //玩家ID
    int32 chairID = 2;  //椅子号
}

//
message ActivePush {
    int32 stage        = 1;  //游戏的状态
    int64 timeout      = 2;  //剩余时间 s
    int32 active       = 3;  //当前操作位置
    int32 curRound     = 4;
    double totalBet    = 5;  //
    PlayerScene player = 6;  //
}

//
message ActionReq {
    int64 userID  = 1;  //用户ID
    ACTION action = 2;  //动作
}

message ActionRsp {
    int32 code      = 1;   //错误码
    string msg      = 2;   //错误信息
    int64 userID    = 3;   //用户ID
    ACTION action   = 4;   //动作
    CardsInfo cards = 12;  //手牌
}

//
message AutoCallReq {
    int64 userID  = 1;  //用户ID
    bool autoCall = 2;  //是否自动跟注
}

message AutoCallRsp {
    int64 userID  = 1;  //用户ID
    bool autoCall = 2;  //是否自动跟注
}