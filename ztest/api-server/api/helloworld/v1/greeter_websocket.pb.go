// Code generated by protoc-gen-go-websocket. DO NOT EDIT.
// versions:
// - protoc-gen-go-websocket v2.8.6
// - protoc            v3.6.1
// source: helloworld/v1/greeter.proto

package v1

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
import (
	"context"

	"github.com/yola1107/kratos/v2/library/work"
	"github.com/yola1107/kratos/v2/transport/websocket"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
)

// GreeterWebsocketServer is the server API for Greeter service.
type GreeterWebsocketServer interface {
	GetLoop() work.ITaskLoop
	OnSessionOpen(*websocket.Session)
	OnSessionClose(*websocket.Session)
	SayHelloReq(context.Context, *HelloRequest) (*HelloReply, error)
	OnLoginReq(context.Context, *LoginReq) (*LoginRsp, error)
	OnLogoutReq(context.Context, *LogoutReq) (*LogoutRsp, error)
	OnReadyReq(context.Context, *ReadyReq) (*ReadyRsp, error)
	OnSwitchChairReq(context.Context, *SwitchChairReq) (*SwitchChairRsp, error)
	OnSceneReq(context.Context, *SceneReq) (*SceneRsp, error)
	OnChatReq(context.Context, *ChatReq) (*ChatRsp, error)
	OnHostingReq(context.Context, *HostingReq) (*HostingRsp, error)
	OnForwardReq(context.Context, *ForwardReq) (*ForwardRsp, error)
}

func RegisterGreeterWebsocketServer(s *websocket.Server, srv GreeterWebsocketServer) {
	s.RegisterService(&Greeter_Websocket_ServiceDesc, srv, srv.OnSessionOpen, srv.OnSessionClose)
}

func _Greeter_SayHelloReq_Websocket_Handler(srv interface{}, ctx context.Context, data []byte, interceptor websocket.UnaryServerInterceptor) ([]byte, error) {
	in := new(HelloRequest)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	doFunc := func(ctx context.Context, req *HelloRequest) ([]byte, error) {
		doRequest := func() ([]byte, error) {
			resp, err := srv.(GreeterWebsocketServer).SayHelloReq(ctx, req)
			if err != nil || resp == nil {
				return nil, err
			}
			return proto.Marshal(resp)
		}
		if loop := srv.(GreeterWebsocketServer).GetLoop(); loop != nil {
			return loop.PostAndWaitCtx(ctx, doRequest)
		}
		return doRequest()
	}
	if interceptor == nil {
		return doFunc(ctx, in)
	}
	info := &websocket.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.v1.Greeter/SayHelloReq",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		r, ok := req.(*HelloRequest)
		if !ok {
			return nil, status.Errorf(codes.InvalidArgument, "Invalid Request Argument, expect: *HelloRequest, Not: %T", req)
		}
		return doFunc(ctx, r)
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_OnLoginReq_Websocket_Handler(srv interface{}, ctx context.Context, data []byte, interceptor websocket.UnaryServerInterceptor) ([]byte, error) {
	in := new(LoginReq)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	doFunc := func(ctx context.Context, req *LoginReq) ([]byte, error) {
		doRequest := func() ([]byte, error) {
			resp, err := srv.(GreeterWebsocketServer).OnLoginReq(ctx, req)
			if err != nil || resp == nil {
				return nil, err
			}
			return proto.Marshal(resp)
		}
		if loop := srv.(GreeterWebsocketServer).GetLoop(); loop != nil {
			return loop.PostAndWaitCtx(ctx, doRequest)
		}
		return doRequest()
	}
	if interceptor == nil {
		return doFunc(ctx, in)
	}
	info := &websocket.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.v1.Greeter/OnLoginReq",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		r, ok := req.(*LoginReq)
		if !ok {
			return nil, status.Errorf(codes.InvalidArgument, "Invalid Request Argument, expect: *LoginReq, Not: %T", req)
		}
		return doFunc(ctx, r)
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_OnLogoutReq_Websocket_Handler(srv interface{}, ctx context.Context, data []byte, interceptor websocket.UnaryServerInterceptor) ([]byte, error) {
	in := new(LogoutReq)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	doFunc := func(ctx context.Context, req *LogoutReq) ([]byte, error) {
		doRequest := func() ([]byte, error) {
			resp, err := srv.(GreeterWebsocketServer).OnLogoutReq(ctx, req)
			if err != nil || resp == nil {
				return nil, err
			}
			return proto.Marshal(resp)
		}
		if loop := srv.(GreeterWebsocketServer).GetLoop(); loop != nil {
			return loop.PostAndWaitCtx(ctx, doRequest)
		}
		return doRequest()
	}
	if interceptor == nil {
		return doFunc(ctx, in)
	}
	info := &websocket.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.v1.Greeter/OnLogoutReq",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		r, ok := req.(*LogoutReq)
		if !ok {
			return nil, status.Errorf(codes.InvalidArgument, "Invalid Request Argument, expect: *LogoutReq, Not: %T", req)
		}
		return doFunc(ctx, r)
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_OnReadyReq_Websocket_Handler(srv interface{}, ctx context.Context, data []byte, interceptor websocket.UnaryServerInterceptor) ([]byte, error) {
	in := new(ReadyReq)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	doFunc := func(ctx context.Context, req *ReadyReq) ([]byte, error) {
		doRequest := func() ([]byte, error) {
			resp, err := srv.(GreeterWebsocketServer).OnReadyReq(ctx, req)
			if err != nil || resp == nil {
				return nil, err
			}
			return proto.Marshal(resp)
		}
		if loop := srv.(GreeterWebsocketServer).GetLoop(); loop != nil {
			return loop.PostAndWaitCtx(ctx, doRequest)
		}
		return doRequest()
	}
	if interceptor == nil {
		return doFunc(ctx, in)
	}
	info := &websocket.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.v1.Greeter/OnReadyReq",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		r, ok := req.(*ReadyReq)
		if !ok {
			return nil, status.Errorf(codes.InvalidArgument, "Invalid Request Argument, expect: *ReadyReq, Not: %T", req)
		}
		return doFunc(ctx, r)
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_OnSwitchChairReq_Websocket_Handler(srv interface{}, ctx context.Context, data []byte, interceptor websocket.UnaryServerInterceptor) ([]byte, error) {
	in := new(SwitchChairReq)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	doFunc := func(ctx context.Context, req *SwitchChairReq) ([]byte, error) {
		doRequest := func() ([]byte, error) {
			resp, err := srv.(GreeterWebsocketServer).OnSwitchChairReq(ctx, req)
			if err != nil || resp == nil {
				return nil, err
			}
			return proto.Marshal(resp)
		}
		if loop := srv.(GreeterWebsocketServer).GetLoop(); loop != nil {
			return loop.PostAndWaitCtx(ctx, doRequest)
		}
		return doRequest()
	}
	if interceptor == nil {
		return doFunc(ctx, in)
	}
	info := &websocket.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.v1.Greeter/OnSwitchChairReq",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		r, ok := req.(*SwitchChairReq)
		if !ok {
			return nil, status.Errorf(codes.InvalidArgument, "Invalid Request Argument, expect: *SwitchChairReq, Not: %T", req)
		}
		return doFunc(ctx, r)
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_OnSceneReq_Websocket_Handler(srv interface{}, ctx context.Context, data []byte, interceptor websocket.UnaryServerInterceptor) ([]byte, error) {
	in := new(SceneReq)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	doFunc := func(ctx context.Context, req *SceneReq) ([]byte, error) {
		doRequest := func() ([]byte, error) {
			resp, err := srv.(GreeterWebsocketServer).OnSceneReq(ctx, req)
			if err != nil || resp == nil {
				return nil, err
			}
			return proto.Marshal(resp)
		}
		if loop := srv.(GreeterWebsocketServer).GetLoop(); loop != nil {
			return loop.PostAndWaitCtx(ctx, doRequest)
		}
		return doRequest()
	}
	if interceptor == nil {
		return doFunc(ctx, in)
	}
	info := &websocket.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.v1.Greeter/OnSceneReq",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		r, ok := req.(*SceneReq)
		if !ok {
			return nil, status.Errorf(codes.InvalidArgument, "Invalid Request Argument, expect: *SceneReq, Not: %T", req)
		}
		return doFunc(ctx, r)
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_OnChatReq_Websocket_Handler(srv interface{}, ctx context.Context, data []byte, interceptor websocket.UnaryServerInterceptor) ([]byte, error) {
	in := new(ChatReq)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	doFunc := func(ctx context.Context, req *ChatReq) ([]byte, error) {
		doRequest := func() ([]byte, error) {
			resp, err := srv.(GreeterWebsocketServer).OnChatReq(ctx, req)
			if err != nil || resp == nil {
				return nil, err
			}
			return proto.Marshal(resp)
		}
		if loop := srv.(GreeterWebsocketServer).GetLoop(); loop != nil {
			return loop.PostAndWaitCtx(ctx, doRequest)
		}
		return doRequest()
	}
	if interceptor == nil {
		return doFunc(ctx, in)
	}
	info := &websocket.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.v1.Greeter/OnChatReq",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		r, ok := req.(*ChatReq)
		if !ok {
			return nil, status.Errorf(codes.InvalidArgument, "Invalid Request Argument, expect: *ChatReq, Not: %T", req)
		}
		return doFunc(ctx, r)
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_OnHostingReq_Websocket_Handler(srv interface{}, ctx context.Context, data []byte, interceptor websocket.UnaryServerInterceptor) ([]byte, error) {
	in := new(HostingReq)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	doFunc := func(ctx context.Context, req *HostingReq) ([]byte, error) {
		doRequest := func() ([]byte, error) {
			resp, err := srv.(GreeterWebsocketServer).OnHostingReq(ctx, req)
			if err != nil || resp == nil {
				return nil, err
			}
			return proto.Marshal(resp)
		}
		if loop := srv.(GreeterWebsocketServer).GetLoop(); loop != nil {
			return loop.PostAndWaitCtx(ctx, doRequest)
		}
		return doRequest()
	}
	if interceptor == nil {
		return doFunc(ctx, in)
	}
	info := &websocket.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.v1.Greeter/OnHostingReq",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		r, ok := req.(*HostingReq)
		if !ok {
			return nil, status.Errorf(codes.InvalidArgument, "Invalid Request Argument, expect: *HostingReq, Not: %T", req)
		}
		return doFunc(ctx, r)
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_OnForwardReq_Websocket_Handler(srv interface{}, ctx context.Context, data []byte, interceptor websocket.UnaryServerInterceptor) ([]byte, error) {
	in := new(ForwardReq)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	doFunc := func(ctx context.Context, req *ForwardReq) ([]byte, error) {
		doRequest := func() ([]byte, error) {
			resp, err := srv.(GreeterWebsocketServer).OnForwardReq(ctx, req)
			if err != nil || resp == nil {
				return nil, err
			}
			return proto.Marshal(resp)
		}
		if loop := srv.(GreeterWebsocketServer).GetLoop(); loop != nil {
			return loop.PostAndWaitCtx(ctx, doRequest)
		}
		return doRequest()
	}
	if interceptor == nil {
		return doFunc(ctx, in)
	}
	info := &websocket.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.v1.Greeter/OnForwardReq",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		r, ok := req.(*ForwardReq)
		if !ok {
			return nil, status.Errorf(codes.InvalidArgument, "Invalid Request Argument, expect: *ForwardReq, Not: %T", req)
		}
		return doFunc(ctx, r)
	}
	return interceptor(ctx, in, info, handler)
}

var Greeter_Websocket_ServiceDesc = websocket.ServiceDesc{
	ServiceName: "helloworld.v1.Greeter",
	HandlerType: (*GreeterWebsocketServer)(nil),
	Methods: []websocket.MethodDesc{
		{
			MethodName: "SayHelloReq",
			Handler:    _Greeter_SayHelloReq_Websocket_Handler,
			Ops:        1,
		},
		{
			MethodName: "OnLoginReq",
			Handler:    _Greeter_OnLoginReq_Websocket_Handler,
			Ops:        1001,
		},
		{
			MethodName: "OnLogoutReq",
			Handler:    _Greeter_OnLogoutReq_Websocket_Handler,
			Ops:        1003,
		},
		{
			MethodName: "OnReadyReq",
			Handler:    _Greeter_OnReadyReq_Websocket_Handler,
			Ops:        1005,
		},
		{
			MethodName: "OnSwitchChairReq",
			Handler:    _Greeter_OnSwitchChairReq_Websocket_Handler,
			Ops:        1007,
		},
		{
			MethodName: "OnSceneReq",
			Handler:    _Greeter_OnSceneReq_Websocket_Handler,
			Ops:        1009,
		},
		{
			MethodName: "OnChatReq",
			Handler:    _Greeter_OnChatReq_Websocket_Handler,
			Ops:        1011,
		},
		{
			MethodName: "OnHostingReq",
			Handler:    _Greeter_OnHostingReq_Websocket_Handler,
			Ops:        1013,
		},
		{
			MethodName: "OnForwardReq",
			Handler:    _Greeter_OnForwardReq_Websocket_Handler,
			Ops:        1015,
		},
	},
}
