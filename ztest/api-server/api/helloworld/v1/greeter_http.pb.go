// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.6
// - protoc             v3.6.1
// source: helloworld/v1/greeter.proto

package v1

import (
	context "context"
	http "github.com/yola1107/kratos/v2/transport/http"
	binding "github.com/yola1107/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGreeterOnActionReq = "/helloworld.v1.Greeter/OnActionReq"
const OperationGreeterOnChatReq = "/helloworld.v1.Greeter/OnChatReq"
const OperationGreeterOnForwardReq = "/helloworld.v1.Greeter/OnForwardReq"
const OperationGreeterOnHostingReq = "/helloworld.v1.Greeter/OnHostingReq"
const OperationGreeterOnLoginReq = "/helloworld.v1.Greeter/OnLoginReq"
const OperationGreeterOnLogoutReq = "/helloworld.v1.Greeter/OnLogoutReq"
const OperationGreeterOnReadyReq = "/helloworld.v1.Greeter/OnReadyReq"
const OperationGreeterOnSceneReq = "/helloworld.v1.Greeter/OnSceneReq"
const OperationGreeterOnSwitchChairReq = "/helloworld.v1.Greeter/OnSwitchChairReq"
const OperationGreeterSayHelloReq = "/helloworld.v1.Greeter/SayHelloReq"

type GreeterHTTPServer interface {
	// OnActionReq game request
	OnActionReq(context.Context, *ActionReq) (*ActionRsp, error)
	OnChatReq(context.Context, *ChatReq) (*ChatRsp, error)
	OnForwardReq(context.Context, *ForwardReq) (*ForwardRsp, error)
	OnHostingReq(context.Context, *HostingReq) (*HostingRsp, error)
	OnLoginReq(context.Context, *LoginReq) (*LoginRsp, error)
	OnLogoutReq(context.Context, *LogoutReq) (*LogoutRsp, error)
	OnReadyReq(context.Context, *ReadyReq) (*ReadyRsp, error)
	OnSceneReq(context.Context, *SceneReq) (*SceneRsp, error)
	OnSwitchChairReq(context.Context, *SwitchChairReq) (*SwitchChairRsp, error)
	// SayHelloReq Sends a greeting
	SayHelloReq(context.Context, *HelloRequest) (*HelloReply, error)
}

func RegisterGreeterHTTPServer(s *http.Server, srv GreeterHTTPServer) {
	r := s.Route("/")
	r.GET("/helloworld/{name}", _Greeter_SayHelloReq0_HTTP_Handler(srv))
	r.POST("/greeter/OnLoginReq", _Greeter_OnLoginReq0_HTTP_Handler(srv))
	r.POST("/greeter/OnLogoutReq", _Greeter_OnLogoutReq0_HTTP_Handler(srv))
	r.POST("/greeter/OnReadyReq", _Greeter_OnReadyReq0_HTTP_Handler(srv))
	r.POST("/greeter/OnSwitchChairReq", _Greeter_OnSwitchChairReq0_HTTP_Handler(srv))
	r.POST("/greeter/OnSceneReq", _Greeter_OnSceneReq0_HTTP_Handler(srv))
	r.POST("/greeter/OnChatOrFaceReq", _Greeter_OnChatReq0_HTTP_Handler(srv))
	r.POST("/greeter/OnHostingReq", _Greeter_OnHostingReq0_HTTP_Handler(srv))
	r.POST("/greeter/OnForwardReq", _Greeter_OnForwardReq0_HTTP_Handler(srv))
	r.POST("/greeter/OnActionReq", _Greeter_OnActionReq0_HTTP_Handler(srv))
}

func _Greeter_SayHelloReq0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HelloRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterSayHelloReq)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayHelloReq(ctx, req.(*HelloRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_OnLoginReq0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterOnLoginReq)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OnLoginReq(ctx, req.(*LoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginRsp)
		return ctx.Result(200, reply)
	}
}

func _Greeter_OnLogoutReq0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterOnLogoutReq)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OnLogoutReq(ctx, req.(*LogoutReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutRsp)
		return ctx.Result(200, reply)
	}
}

func _Greeter_OnReadyReq0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReadyReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterOnReadyReq)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OnReadyReq(ctx, req.(*ReadyReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReadyRsp)
		return ctx.Result(200, reply)
	}
}

func _Greeter_OnSwitchChairReq0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SwitchChairReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterOnSwitchChairReq)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OnSwitchChairReq(ctx, req.(*SwitchChairReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SwitchChairRsp)
		return ctx.Result(200, reply)
	}
}

func _Greeter_OnSceneReq0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SceneReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterOnSceneReq)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OnSceneReq(ctx, req.(*SceneReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SceneRsp)
		return ctx.Result(200, reply)
	}
}

func _Greeter_OnChatReq0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChatReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterOnChatReq)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OnChatReq(ctx, req.(*ChatReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ChatRsp)
		return ctx.Result(200, reply)
	}
}

func _Greeter_OnHostingReq0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HostingReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterOnHostingReq)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OnHostingReq(ctx, req.(*HostingReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HostingRsp)
		return ctx.Result(200, reply)
	}
}

func _Greeter_OnForwardReq0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ForwardReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterOnForwardReq)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OnForwardReq(ctx, req.(*ForwardReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ForwardRsp)
		return ctx.Result(200, reply)
	}
}

func _Greeter_OnActionReq0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ActionReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterOnActionReq)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OnActionReq(ctx, req.(*ActionReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ActionRsp)
		return ctx.Result(200, reply)
	}
}

type GreeterHTTPClient interface {
	OnActionReq(ctx context.Context, req *ActionReq, opts ...http.CallOption) (rsp *ActionRsp, err error)
	OnChatReq(ctx context.Context, req *ChatReq, opts ...http.CallOption) (rsp *ChatRsp, err error)
	OnForwardReq(ctx context.Context, req *ForwardReq, opts ...http.CallOption) (rsp *ForwardRsp, err error)
	OnHostingReq(ctx context.Context, req *HostingReq, opts ...http.CallOption) (rsp *HostingRsp, err error)
	OnLoginReq(ctx context.Context, req *LoginReq, opts ...http.CallOption) (rsp *LoginRsp, err error)
	OnLogoutReq(ctx context.Context, req *LogoutReq, opts ...http.CallOption) (rsp *LogoutRsp, err error)
	OnReadyReq(ctx context.Context, req *ReadyReq, opts ...http.CallOption) (rsp *ReadyRsp, err error)
	OnSceneReq(ctx context.Context, req *SceneReq, opts ...http.CallOption) (rsp *SceneRsp, err error)
	OnSwitchChairReq(ctx context.Context, req *SwitchChairReq, opts ...http.CallOption) (rsp *SwitchChairRsp, err error)
	SayHelloReq(ctx context.Context, req *HelloRequest, opts ...http.CallOption) (rsp *HelloReply, err error)
}

type GreeterHTTPClientImpl struct {
	cc *http.Client
}

func NewGreeterHTTPClient(client *http.Client) GreeterHTTPClient {
	return &GreeterHTTPClientImpl{client}
}

func (c *GreeterHTTPClientImpl) OnActionReq(ctx context.Context, in *ActionReq, opts ...http.CallOption) (*ActionRsp, error) {
	var out ActionRsp
	pattern := "/greeter/OnActionReq"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterOnActionReq))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterHTTPClientImpl) OnChatReq(ctx context.Context, in *ChatReq, opts ...http.CallOption) (*ChatRsp, error) {
	var out ChatRsp
	pattern := "/greeter/OnChatOrFaceReq"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterOnChatReq))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterHTTPClientImpl) OnForwardReq(ctx context.Context, in *ForwardReq, opts ...http.CallOption) (*ForwardRsp, error) {
	var out ForwardRsp
	pattern := "/greeter/OnForwardReq"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterOnForwardReq))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterHTTPClientImpl) OnHostingReq(ctx context.Context, in *HostingReq, opts ...http.CallOption) (*HostingRsp, error) {
	var out HostingRsp
	pattern := "/greeter/OnHostingReq"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterOnHostingReq))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterHTTPClientImpl) OnLoginReq(ctx context.Context, in *LoginReq, opts ...http.CallOption) (*LoginRsp, error) {
	var out LoginRsp
	pattern := "/greeter/OnLoginReq"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterOnLoginReq))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterHTTPClientImpl) OnLogoutReq(ctx context.Context, in *LogoutReq, opts ...http.CallOption) (*LogoutRsp, error) {
	var out LogoutRsp
	pattern := "/greeter/OnLogoutReq"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterOnLogoutReq))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterHTTPClientImpl) OnReadyReq(ctx context.Context, in *ReadyReq, opts ...http.CallOption) (*ReadyRsp, error) {
	var out ReadyRsp
	pattern := "/greeter/OnReadyReq"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterOnReadyReq))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterHTTPClientImpl) OnSceneReq(ctx context.Context, in *SceneReq, opts ...http.CallOption) (*SceneRsp, error) {
	var out SceneRsp
	pattern := "/greeter/OnSceneReq"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterOnSceneReq))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterHTTPClientImpl) OnSwitchChairReq(ctx context.Context, in *SwitchChairReq, opts ...http.CallOption) (*SwitchChairRsp, error) {
	var out SwitchChairRsp
	pattern := "/greeter/OnSwitchChairReq"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterOnSwitchChairReq))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GreeterHTTPClientImpl) SayHelloReq(ctx context.Context, in *HelloRequest, opts ...http.CallOption) (*HelloReply, error) {
	var out HelloReply
	pattern := "/helloworld/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterSayHelloReq))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
