syntax = "proto3";
package kratos.api;

option go_package = "api-server/internal/conf;conf";

import "google/protobuf/duration.proto";
import "validate/validate.proto";

message Bootstrap {
    Server server = 1;
    Data data     = 2;
    Room room     = 3;
}

message Server {
    message HTTP {
        string network                   = 1;
        string addr                      = 2;
        google.protobuf.Duration timeout = 3;
    }
    message GRPC {
        string network                   = 1;
        string addr                      = 2;
        google.protobuf.Duration timeout = 3;
    }
    message TCP {
        string network                   = 1;
        string addr                      = 2;
        google.protobuf.Duration timeout = 3;
    }
    message Websocket {
        string network                   = 1;
        string addr                      = 2;
        google.protobuf.Duration timeout = 3;
    }
    HTTP http           = 1;
    GRPC grpc           = 2;
    TCP tcp             = 3;
    Websocket websocket = 4;
}

message Data {
    message Database {
        string driver = 1;
        string source = 2;
    }
    message Redis {
        string network  = 1;
        string addr     = 2;
        string password = 3;
        int32 db        = 4;
    }
    Database database = 1;
    Redis redis       = 2;
}

message Room {
    message Table {
        int32 tableNum = 1;
        int32 chairNum = 2;
    }
    message Game {
        int32 vid                = 1;
        int32 see_round          = 2;
        int32 auto_see_round     = 3;
        int32 speaker_card_type  = 4;
        int32 high_strength_rate = 5;
        bool is_newbie           = 6;
        bool auto_ready          = 7;
        double min_money         = 8;
        double max_money         = 9;
        double base_money        = 10;
        double ch_limit          = 11;
        double pot_limit         = 12;
        double fee               = 13;
        double speaker_minmoney  = 14;
        int32 vip_limit          = 15;
    }
    // 机器人配置
    message Robot {
        bool open              = 1;
        int32 num              = 2;
        int32 table_max_count  = 3;
        int32 min_play_count   = 4;  // 预留N个AI自己玩游戏
        int64 id_begin         = 5;
        double min_money       = 6;
        double max_money       = 7;
        double stand_min_money = 8;
        double stand_max_money = 9;
    }
    message LogCache {
        bool open = 1;
    }
    Table table       = 1 [(validate.rules).message.required = true];
    Game game         = 2 [(validate.rules).message.required = true];
    Robot robot       = 3 [(validate.rules).message.required = true];
    LogCache logCache = 4 [(validate.rules).message.required = true];
}
