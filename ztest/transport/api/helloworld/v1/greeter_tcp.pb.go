// Code generated by protoc-gen-go-tcp. DO NOT EDIT.
// versions:
// - protoc-gen-go-tcp v2.8.6
// - protoc            v3.6.1
// source: helloworld/v1/greeter.proto

package v1

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
import (
	"context"

	"github.com/yola1107/kratos/v2/library/work"
	"github.com/yola1107/kratos/v2/transport/tcp"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
)

// GreeterTCPServer is the server API for Greeter service.
type GreeterTCPServer interface {
	GetTCPLoop() work.ITaskLoop
	SetCometChan(cl *tcp.ChanList, cs *tcp.Server)
	SayHelloReq(context.Context, *HelloRequest) (*HelloReply, error)
	SayHello2Req(context.Context, *Hello2Request) (*Hello2Reply, error)
}

func RegisterGreeterTCPServer(s *tcp.Server, srv GreeterTCPServer) {
	chanList := s.RegisterService(&Greeter_TCP_ServiceDesc, srv)
	srv.SetCometChan(chanList, s)
}

func _Greeter_SayHelloReq_TCP_Handler(srv interface{}, ctx context.Context, data []byte, interceptor tcp.UnaryServerInterceptor) ([]byte, error) {
	in := new(HelloRequest)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	doFunc := func(ctx context.Context, req *HelloRequest) ([]byte, error) {
		doRequest := func() ([]byte, error) {
			resp, err := srv.(GreeterTCPServer).SayHelloReq(ctx, req)
			if err != nil || resp == nil {
				return nil, err
			}
			return proto.Marshal(resp)
		}
		if loop := srv.(GreeterTCPServer).GetTCPLoop(); loop != nil {
			return loop.PostAndWaitCtx(ctx, doRequest)
		}
		return doRequest()
	}
	if interceptor == nil {
		return doFunc(ctx, in)
	}
	info := &tcp.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.v1.Greeter/SayHelloReq",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		r, ok := req.(*HelloRequest)
		if !ok {
			return nil, status.Errorf(codes.InvalidArgument, "Invalid Request Argument, expect: *HelloRequest, Not: %T", req)
		}
		return doFunc(ctx, r)
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SayHello2Req_TCP_Handler(srv interface{}, ctx context.Context, data []byte, interceptor tcp.UnaryServerInterceptor) ([]byte, error) {
	in := new(Hello2Request)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	doFunc := func(ctx context.Context, req *Hello2Request) ([]byte, error) {
		doRequest := func() ([]byte, error) {
			resp, err := srv.(GreeterTCPServer).SayHello2Req(ctx, req)
			if err != nil || resp == nil {
				return nil, err
			}
			return proto.Marshal(resp)
		}
		if loop := srv.(GreeterTCPServer).GetTCPLoop(); loop != nil {
			return loop.PostAndWaitCtx(ctx, doRequest)
		}
		return doRequest()
	}
	if interceptor == nil {
		return doFunc(ctx, in)
	}
	info := &tcp.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.v1.Greeter/SayHello2Req",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		r, ok := req.(*Hello2Request)
		if !ok {
			return nil, status.Errorf(codes.InvalidArgument, "Invalid Request Argument, expect: *Hello2Request, Not: %T", req)
		}
		return doFunc(ctx, r)
	}
	return interceptor(ctx, in, info, handler)
}

var Greeter_TCP_ServiceDesc = tcp.ServiceDesc{
	ServiceName: "helloworld.v1.Greeter",
	HandlerType: (*GreeterTCPServer)(nil),
	Methods: []tcp.MethodDesc{
		{
			MethodName: "SayHelloReq",
			Handler:    _Greeter_SayHelloReq_TCP_Handler,
			Ops:        1001,
		},
		{
			MethodName: "SayHello2Req",
			Handler:    _Greeter_SayHello2Req_TCP_Handler,
			Ops:        1003,
		},
	},
}
