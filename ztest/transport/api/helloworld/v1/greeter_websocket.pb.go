// Code generated by protoc-gen-go-websocket. DO NOT EDIT.
// versions:
// - protoc-gen-go-websocket v2.8.6
// - protoc            v3.6.1
// source: helloworld/v1/greeter.proto

package v1

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
import (
	"context"

	"github.com/yola1107/kratos/v2/library/work"
	"github.com/yola1107/kratos/v2/transport/websocket"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
)

// GreeterWebsocketServer is the server API for Greeter service.
type GreeterWebsocketServer interface {
	GetLoop() work.ITaskLoop
	OnSessionOpen(*websocket.Session)
	OnSessionClose(*websocket.Session)
	SayHelloReq(context.Context, *HelloRequest) (*HelloReply, error)
	SayHello2Req(context.Context, *Hello2Request) (*Hello2Reply, error)
}

func RegisterGreeterWebsocketServer(s *websocket.Server, srv GreeterWebsocketServer) {
	s.RegisterService(&Greeter_Websocket_ServiceDesc, srv, srv.OnSessionOpen, srv.OnSessionClose)
}

func _Greeter_SayHelloReq_Websocket_Handler(srv interface{}, ctx context.Context, data []byte, interceptor websocket.UnaryServerInterceptor) ([]byte, error) {
	in := new(HelloRequest)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	doFunc := func(ctx context.Context, req *HelloRequest) ([]byte, error) {
		doRequest := func() ([]byte, error) {
			resp, err := srv.(GreeterWebsocketServer).SayHelloReq(ctx, req)
			if err != nil || resp == nil {
				return nil, err
			}
			return proto.Marshal(resp)
		}
		if loop := srv.(GreeterWebsocketServer).GetLoop(); loop != nil {
			return loop.PostAndWaitCtx(ctx, doRequest)
		}
		return doRequest()
	}
	if interceptor == nil {
		return doFunc(ctx, in)
	}
	info := &websocket.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.v1.Greeter/SayHelloReq",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		r, ok := req.(*HelloRequest)
		if !ok {
			return nil, status.Errorf(codes.InvalidArgument, "Invalid Request Argument, expect: *HelloRequest, Not: %T", req)
		}
		return doFunc(ctx, r)
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SayHello2Req_Websocket_Handler(srv interface{}, ctx context.Context, data []byte, interceptor websocket.UnaryServerInterceptor) ([]byte, error) {
	in := new(Hello2Request)
	if err := proto.Unmarshal(data, in); err != nil {
		return nil, err
	}
	doFunc := func(ctx context.Context, req *Hello2Request) ([]byte, error) {
		doRequest := func() ([]byte, error) {
			resp, err := srv.(GreeterWebsocketServer).SayHello2Req(ctx, req)
			if err != nil || resp == nil {
				return nil, err
			}
			return proto.Marshal(resp)
		}
		if loop := srv.(GreeterWebsocketServer).GetLoop(); loop != nil {
			return loop.PostAndWaitCtx(ctx, doRequest)
		}
		return doRequest()
	}
	if interceptor == nil {
		return doFunc(ctx, in)
	}
	info := &websocket.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.v1.Greeter/SayHello2Req",
	}
	handler := func(ctx context.Context, req interface{}) ([]byte, error) {
		r, ok := req.(*Hello2Request)
		if !ok {
			return nil, status.Errorf(codes.InvalidArgument, "Invalid Request Argument, expect: *Hello2Request, Not: %T", req)
		}
		return doFunc(ctx, r)
	}
	return interceptor(ctx, in, info, handler)
}

var Greeter_Websocket_ServiceDesc = websocket.ServiceDesc{
	ServiceName: "helloworld.v1.Greeter",
	HandlerType: (*GreeterWebsocketServer)(nil),
	Methods: []websocket.MethodDesc{
		{
			MethodName: "SayHelloReq",
			Handler:    _Greeter_SayHelloReq_Websocket_Handler,
			Ops:        1001,
		},
		{
			MethodName: "SayHello2Req",
			Handler:    _Greeter_SayHello2Req_Websocket_Handler,
			Ops:        1003,
		},
	},
}
